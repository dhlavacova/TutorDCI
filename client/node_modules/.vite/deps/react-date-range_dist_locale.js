import {
  buildFormatLongFn,
  buildLocalizeFn,
  buildMatchFn,
  buildMatchPatternFn,
  en_US_exports,
  formatDistance_default,
  formatRelative_default,
  init_addDays,
  init_addLeadingZeros,
  init_addMilliseconds,
  init_addMonths,
  init_addYears,
  init_assign,
  init_buildFormatLongFn,
  init_buildLocalizeFn,
  init_buildMatchFn,
  init_buildMatchPatternFn,
  init_constants,
  init_defaultLocale,
  init_defaultOptions,
  init_differenceInCalendarDays,
  init_differenceInCalendarMonths,
  init_differenceInDays,
  init_eachDayOfInterval,
  init_en_US,
  init_endOfDay,
  init_endOfMonth,
  init_endOfWeek,
  init_format,
  init_formatDistance,
  init_formatRelative,
  init_getDaysInMonth,
  init_getTimezoneOffsetInMilliseconds,
  init_isAfter,
  init_isBefore,
  init_isDate,
  init_isEqual,
  init_isSameDay,
  init_isSameMonth,
  init_isValid,
  init_isWeekend,
  init_isWithinInterval,
  init_lightFormatters,
  init_localize,
  init_match,
  init_max,
  init_min,
  init_parse,
  init_requiredArgs,
  init_setMonth,
  init_setYear,
  init_startOfDay,
  init_startOfMonth,
  init_startOfUTCWeek,
  init_startOfWeek,
  init_subMilliseconds,
  init_subMonths,
  init_toDate,
  init_toInteger,
  init_typeof,
  localize_default,
  match_default,
  requiredArgs,
  startOfUTCWeek,
  toDate
} from "./chunk-IB3YSE4B.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/date-fns/esm/locale/af/_lib/formatDistance/index.js
var formatDistanceLocale, formatDistance, formatDistance_default2;
var init_formatDistance2 = __esm({
  "node_modules/date-fns/esm/locale/af/_lib/formatDistance/index.js"() {
    formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder as 'n sekonde",
        other: "minder as {{count}} sekondes"
      },
      xSeconds: {
        one: "1 sekonde",
        other: "{{count}} sekondes"
      },
      halfAMinute: "'n halwe minuut",
      lessThanXMinutes: {
        one: "minder as 'n minuut",
        other: "minder as {{count}} minute"
      },
      xMinutes: {
        one: "'n minuut",
        other: "{{count}} minute"
      },
      aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} ure"
      },
      xHours: {
        one: "1 uur",
        other: "{{count}} ure"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dae"
      },
      aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weke"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weke"
      },
      aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maande"
      },
      xMonths: {
        one: "1 maand",
        other: "{{count}} maande"
      },
      aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
      },
      xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
      },
      overXYears: {
        one: "meer as 1 jaar",
        other: "meer as {{count}} jaar"
      },
      almostXYears: {
        one: "byna 1 jaar",
        other: "byna {{count}} jaar"
      }
    };
    formatDistance = function formatDistance2(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "oor " + result;
        } else {
          return result + " gelede";
        }
      }
      return result;
    };
    formatDistance_default2 = formatDistance;
  }
});

// node_modules/date-fns/esm/locale/af/_lib/formatLong/index.js
var dateFormats, timeFormats, dateTimeFormats, formatLong, formatLong_default;
var init_formatLong = __esm({
  "node_modules/date-fns/esm/locale/af/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "yyyy/MM/dd"
    };
    timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
    formatLong_default = formatLong;
  }
});

// node_modules/date-fns/esm/locale/af/_lib/formatRelative/index.js
var formatRelativeLocale, formatRelative, formatRelative_default2;
var init_formatRelative2 = __esm({
  "node_modules/date-fns/esm/locale/af/_lib/formatRelative/index.js"() {
    formatRelativeLocale = {
      lastWeek: "'verlede' eeee 'om' p",
      yesterday: "'gister om' p",
      today: "'vandag om' p",
      tomorrow: "'m√¥re om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    };
    formatRelative_default2 = formatRelative;
  }
});

// node_modules/date-fns/esm/locale/af/_lib/localize/index.js
var eraValues, quarterValues, monthValues, dayValues, dayPeriodValues, formattingDayPeriodValues, ordinalNumber, localize, localize_default2;
var init_localize2 = __esm({
  "node_modules/date-fns/esm/locale/af/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues = {
      narrow: ["vC", "nC"],
      abbreviated: ["vC", "nC"],
      wide: ["voor Christus", "na Christus"]
    };
    quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1ste kwartaal", "2de kwartaal", "3de kwartaal", "4de kwartaal"]
    };
    monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
      wide: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"]
    };
    dayValues = {
      narrow: ["S", "M", "D", "W", "D", "V", "S"],
      short: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
      abbreviated: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
      wide: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"]
    };
    dayPeriodValues = {
      narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      },
      abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      },
      wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      }
    };
    formattingDayPeriodValues = {
      narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      },
      abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      },
      wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      }
    };
    ordinalNumber = function ordinalNumber2(dirtyNumber) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 < 20) {
        switch (rem100) {
          case 1:
          case 8:
            return number + "ste";
          default:
            return number + "de";
        }
      }
      return number + "ste";
    };
    localize = {
      ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default2 = localize;
  }
});

// node_modules/date-fns/esm/locale/af/_lib/match/index.js
var matchOrdinalNumberPattern, parseOrdinalNumberPattern, matchEraPatterns, parseEraPatterns, matchQuarterPatterns, parseQuarterPatterns, matchMonthPatterns, parseMonthPatterns, matchDayPatterns, parseDayPatterns, matchDayPeriodPatterns, parseDayPeriodPatterns, match, match_default2;
var init_match2 = __esm({
  "node_modules/date-fns/esm/locale/af/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
    parseOrdinalNumberPattern = /\d+/i;
    matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?C\.?)/,
      wide: /^((voor|na) Christus)/
    };
    parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](st|d)e kwartaal/i
    };
    parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
      wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
    };
    parseMonthPatterns = {
      narrow: [/^J/i, /^F/i, /^M/i, /^A/i, /^M/i, /^J/i, /^J/i, /^A/i, /^S/i, /^O/i, /^N/i, /^D/i],
      any: [/^Jan/i, /^Feb/i, /^Mrt/i, /^Apr/i, /^Mei/i, /^Jun/i, /^Jul/i, /^Aug/i, /^Sep/i, /^Okt/i, /^Nov/i, /^Dec/i]
    };
    matchDayPatterns = {
      narrow: /^[smdwv]/i,
      short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
      abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
      wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
    };
    parseDayPatterns = {
      narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
      any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
    };
    matchDayPeriodPatterns = {
      any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
    };
    parseDayPeriodPatterns = {
      any: {
        am: /^vm/i,
        pm: /^nm/i,
        midnight: /^middernag/i,
        noon: /^middaguur/i,
        morning: /oggend/i,
        afternoon: /middag/i,
        evening: /laat middag/i,
        night: /aand/i
      }
    };
    match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function valueCallback2(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
    match_default2 = match;
  }
});

// node_modules/date-fns/esm/locale/af/index.js
var af_exports = {};
__export(af_exports, {
  default: () => af_default
});
var locale, af_default;
var init_af = __esm({
  "node_modules/date-fns/esm/locale/af/index.js"() {
    init_formatDistance2();
    init_formatLong();
    init_formatRelative2();
    init_localize2();
    init_match2();
    locale = {
      code: "af",
      formatDistance: formatDistance_default2,
      formatLong: formatLong_default,
      formatRelative: formatRelative_default2,
      localize: localize_default2,
      match: match_default2,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    af_default = locale;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/_lib/formatDistance/index.js
var formatDistanceLocale2, formatDistance3, formatDistance_default3;
var init_formatDistance3 = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/_lib/formatDistance/index.js"() {
    formatDistanceLocale2 = {
      lessThanXSeconds: {
        one: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜÿ™ŸäŸÜ",
        threeToTen: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä",
        other: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©"
      },
      xSeconds: {
        one: "ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ´ÿßŸÜÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿ´ŸàÿßŸÜŸä",
        other: "{{count}} ÿ´ÿßŸÜŸäÿ©"
      },
      halfAMinute: "ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©",
      lessThanXMinutes: {
        one: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©",
        two: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ",
        threeToTen: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ",
        other: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©"
      },
      xMinutes: {
        one: "ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿØŸÇŸäŸÇÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿØŸÇÿßÿ¶ŸÇ",
        other: "{{count}} ÿØŸÇŸäŸÇÿ©"
      },
      aboutXHours: {
        one: "ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xHours: {
        one: "ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ≥ÿßÿπÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿ≥ÿßÿπÿßÿ™",
        other: "{{count}} ÿ≥ÿßÿπÿ©"
      },
      xDays: {
        one: "ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ",
        two: "ŸäŸàŸÖŸäŸÜ",
        threeToTen: "{{count}} ÿ£ŸäÿßŸÖ",
        other: "{{count}} ŸäŸàŸÖ"
      },
      aboutXWeeks: {
        one: "ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xWeeks: {
        one: "ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ",
        two: "ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ",
        other: "{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ"
      },
      aboutXMonths: {
        one: "ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xMonths: {
        one: "ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ",
        two: "ÿ¥Ÿáÿ±ŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿ¥Ÿáÿ±",
        other: "{{count}} ÿ¥Ÿáÿ±"
      },
      aboutXYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ",
        two: "ÿπÿßŸÖŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ",
        other: "{{count}} ÿπÿßŸÖ"
      },
      overXYears: {
        one: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ",
        two: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ",
        threeToTen: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ",
        other: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ"
      },
      almostXYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      }
    };
    formatDistance3 = function formatDistance4(token, count, options) {
      options = options || {};
      var usageGroup = formatDistanceLocale2[token];
      var result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else if (count === 2) {
        result = usageGroup.two;
      } else if (count <= 10) {
        result = usageGroup.threeToTen.replace("{{count}}", String(count));
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "ŸÅŸä ÿÆŸÑÿßŸÑ " + result;
        } else {
          return "ŸÖŸÜÿ∞ " + result;
        }
      }
      return result;
    };
    formatDistance_default3 = formatDistance3;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/_lib/formatLong/index.js
var dateFormats2, timeFormats2, dateTimeFormats2, formatLong2, formatLong_default2;
var init_formatLong2 = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats2 = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    timeFormats2 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats2 = {
      full: "{{date}} 'ÿπŸÜÿØ' {{time}}",
      long: "{{date}} 'ÿπŸÜÿØ' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong2 = {
      date: buildFormatLongFn({
        formats: dateFormats2,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats2,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats2,
        defaultWidth: "full"
      })
    };
    formatLong_default2 = formatLong2;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/_lib/formatRelative/index.js
var formatRelativeLocale2, formatRelative3, formatRelative_default3;
var init_formatRelative3 = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/_lib/formatRelative/index.js"() {
    formatRelativeLocale2 = {
      lastWeek: "'ÿ£ÿÆÿ±' eeee 'ÿπŸÜÿØ' p",
      yesterday: "'ÿ£ŸÖÿ≥ ÿπŸÜÿØ' p",
      today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ' p",
      tomorrow: "'ÿ∫ÿØÿßŸã ÿπŸÜÿØ' p",
      nextWeek: "eeee 'ÿπŸÜÿØ' p",
      other: "P"
    };
    formatRelative3 = function formatRelative4(token, _date, _baseDate, _options) {
      return formatRelativeLocale2[token];
    };
    formatRelative_default3 = formatRelative3;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/_lib/localize/index.js
var eraValues2, quarterValues2, monthValues2, dayValues2, dayPeriodValues2, formattingDayPeriodValues2, ordinalNumber3, localize2, localize_default3;
var init_localize3 = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues2 = {
      narrow: ["ŸÇ", "ÿ®"],
      abbreviated: ["ŸÇ.ŸÖ.", "ÿ®.ŸÖ."],
      wide: ["ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ", "ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ"]
    };
    quarterValues2 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ÿ±1", "ÿ±2", "ÿ±3", "ÿ±4"],
      wide: ["ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ"]
    };
    monthValues2 = {
      narrow: ["ÿ¨", "ŸÅ", "ŸÖ", "ÿ£", "ŸÖ", "ÿ¨", "ÿ¨", "ÿ£", "ÿ≥", "ÿ£", "ŸÜ", "ÿØ"],
      abbreviated: ["ÿ¨ÿßŸÜŸÄ", "ŸÅŸäŸÅŸÄ", "ŸÖÿßÿ±ÿ≥", "ÿ£ŸÅÿ±ŸäŸÑ", "ŸÖÿßŸäŸÄ", "ÿ¨ŸàÿßŸÜŸÄ", "ÿ¨ŸàŸäŸÄ", "ÿ£Ÿàÿ™", "ÿ≥ÿ®ÿ™ŸÄ", "ÿ£ŸÉÿ™ŸÄ", "ŸÜŸàŸÅŸÄ", "ÿØŸäÿ≥ŸÄ"],
      wide: ["ÿ¨ÿßŸÜŸÅŸä", "ŸÅŸäŸÅÿ±Ÿä", "ŸÖÿßÿ±ÿ≥", "ÿ£ŸÅÿ±ŸäŸÑ", "ŸÖÿßŸä", "ÿ¨ŸàÿßŸÜ", "ÿ¨ŸàŸäŸÑŸäÿ©", "ÿ£Ÿàÿ™", "ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±", "ÿ£ŸÉÿ™Ÿàÿ®ÿ±", "ŸÜŸàŸÅŸÖÿ®ÿ±", "ÿØŸäÿ≥ŸÖÿ®ÿ±"]
    };
    dayValues2 = {
      narrow: ["ÿ≠", "ŸÜ", "ÿ´", "ÿ±", "ÿÆ", "ÿ¨", "ÿ≥"],
      short: ["ÿ£ÿ≠ÿØ", "ÿßÿ´ŸÜŸäŸÜ", "ÿ´ŸÑÿßÿ´ÿßÿ°", "ÿ£ÿ±ÿ®ÿπÿßÿ°", "ÿÆŸÖŸäÿ≥", "ÿ¨ŸÖÿπÿ©", "ÿ≥ÿ®ÿ™"],
      abbreviated: ["ÿ£ÿ≠ÿØ", "ÿßÿ´ŸÜŸÄ", "ÿ´ŸÑÿß", "ÿ£ÿ±ÿ®ŸÄ", "ÿÆŸÖŸäŸÄ", "ÿ¨ŸÖÿπÿ©", "ÿ≥ÿ®ÿ™"],
      wide: ["ÿßŸÑÿ£ÿ≠ÿØ", "ÿßŸÑÿßÿ´ŸÜŸäŸÜ", "ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°", "ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°", "ÿßŸÑÿÆŸÖŸäÿ≥", "ÿßŸÑÿ¨ŸÖÿπÿ©", "ÿßŸÑÿ≥ÿ®ÿ™"]
    };
    dayPeriodValues2 = {
      narrow: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      },
      abbreviated: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      },
      wide: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      }
    };
    formattingDayPeriodValues2 = {
      narrow: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      },
      abbreviated: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      },
      wide: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      }
    };
    ordinalNumber3 = function ordinalNumber4(dirtyNumber) {
      return String(dirtyNumber);
    };
    localize2 = {
      ordinalNumber: ordinalNumber3,
      era: buildLocalizeFn({
        values: eraValues2,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues2,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback2(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues2,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues2,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues2,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues2,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default3 = localize2;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/_lib/match/index.js
var matchOrdinalNumberPattern2, parseOrdinalNumberPattern2, matchEraPatterns2, parseEraPatterns2, matchQuarterPatterns2, parseQuarterPatterns2, matchMonthPatterns2, parseMonthPatterns2, matchDayPatterns2, parseDayPatterns2, matchDayPeriodPatterns2, parseDayPeriodPatterns2, match2, match_default3;
var init_match3 = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/_lib/match/index.js"() {
    init_buildMatchPatternFn();
    init_buildMatchFn();
    matchOrdinalNumberPattern2 = /^(\d+)(th|st|nd|rd)?/i;
    parseOrdinalNumberPattern2 = /\d+/i;
    matchEraPatterns2 = {
      narrow: /^(ŸÇ|ÿ®)/i,
      abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ŸÖ\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/i
    };
    parseEraPatterns2 = {
      any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
    };
    matchQuarterPatterns2 = {
      narrow: /^[1234]/i,
      abbreviated: /^ÿ±[1234]/i,
      wide: /^ÿßŸÑÿ±ÿ®ÿπ [1234]/i
    };
    parseQuarterPatterns2 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns2 = {
      narrow: /^[ÿ¨ŸÅŸÖÿ£ÿ≥ŸÜÿØ]/i,
      abbreviated: /^(ÿ¨ÿßŸÜ|ŸÅŸäŸÅ|ŸÖÿßÿ±|ÿ£ŸÅÿ±|ŸÖÿßŸä|ÿ¨Ÿàÿß|ÿ¨ŸàŸä|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™|ÿ£ŸÉÿ™|ŸÜŸàŸÅ|ÿØŸäÿ≥)/i,
      wide: /^(ÿ¨ÿßŸÜŸÅŸä|ŸÅŸäŸÅÿ±Ÿä|ŸÖÿßÿ±ÿ≥|ÿ£ŸÅÿ±ŸäŸÑ|ŸÖÿßŸä|ÿ¨ŸàÿßŸÜ|ÿ¨ŸàŸäŸÑŸäÿ©|ÿ£Ÿàÿ™|ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±|ÿ£ŸÉÿ™Ÿàÿ®ÿ±|ŸÜŸàŸÅŸÖÿ®ÿ±|ÿØŸäÿ≥ŸÖÿ®ÿ±)/i
    };
    parseMonthPatterns2 = {
      narrow: [/^ÿ¨/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^ÿ¨/i, /^ÿ¨/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
      any: [/^ÿ¨ÿßŸÜ/i, /^ŸÅŸäŸÅ/i, /^ŸÖÿßÿ±/i, /^ÿ£ŸÅÿ±/i, /^ŸÖÿßŸä/i, /^ÿ¨Ÿàÿß/i, /^ÿ¨ŸàŸä/i, /^ÿ£Ÿàÿ™/i, /^ÿ≥ÿ®ÿ™/i, /^ÿ£ŸÉÿ™/i, /^ŸÜŸàŸÅ/i, /^ÿØŸäÿ≥/i]
    };
    matchDayPatterns2 = {
      narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
      short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
      abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜ|ÿ´ŸÑÿß|ÿ£ÿ±ÿ®|ÿÆŸÖŸä|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
      wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
    };
    parseDayPatterns2 = {
      narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
      wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
      any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
    };
    matchDayPeriodPatterns2 = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    parseDayPeriodPatterns2 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    match2 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern2,
        parsePattern: parseOrdinalNumberPattern2,
        valueCallback: function valueCallback3(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns2,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns2,
        defaultParseWidth: "any",
        valueCallback: function valueCallback4(index) {
          return Number(index) + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns2,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns2,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns2,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns2,
        defaultParseWidth: "any"
      })
    };
    match_default3 = match2;
  }
});

// node_modules/date-fns/esm/locale/ar-DZ/index.js
var ar_DZ_exports = {};
__export(ar_DZ_exports, {
  default: () => ar_DZ_default
});
var locale2, ar_DZ_default;
var init_ar_DZ = __esm({
  "node_modules/date-fns/esm/locale/ar-DZ/index.js"() {
    init_formatDistance3();
    init_formatLong2();
    init_formatRelative3();
    init_localize3();
    init_match3();
    locale2 = {
      code: "ar-DZ",
      formatDistance: formatDistance_default3,
      formatLong: formatLong_default2,
      formatRelative: formatRelative_default3,
      localize: localize_default3,
      match: match_default3,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    ar_DZ_default = locale2;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/_lib/formatDistance/index.js
var formatDistanceLocale3, formatDistance5, formatDistance_default4;
var init_formatDistance4 = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/_lib/formatDistance/index.js"() {
    formatDistanceLocale3 = {
      lessThanXSeconds: {
        one: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿ´ÿßŸÜÿ™ŸäŸÜ",
        threeToTen: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ŸàÿßŸÜŸä",
        other: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿ´ÿßŸÜŸäÿ©"
      },
      xSeconds: {
        one: "ÿ´ÿßŸÜŸäÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ´ÿßŸÜÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿ´ŸàÿßŸÜŸä",
        other: "{{count}} ÿ´ÿßŸÜŸäÿ©"
      },
      halfAMinute: "ŸÜÿµŸÅ ÿØŸÇŸäŸÇÿ©",
      lessThanXMinutes: {
        one: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ©",
        two: "ÿ£ŸÇŸÑ ŸÖŸÜ ÿØŸÇŸäŸÇÿ™ŸäŸÜ",
        threeToTen: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇÿßÿ¶ŸÇ",
        other: "ÿ£ŸÇŸÑ ŸÖŸÜ {{count}} ÿØŸÇŸäŸÇÿ©"
      },
      xMinutes: {
        one: "ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿØŸÇŸäŸÇÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿØŸÇÿßÿ¶ŸÇ",
        other: "{{count}} ÿØŸÇŸäŸÇÿ©"
      },
      aboutXHours: {
        one: "ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ≥ÿßÿπÿ™ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ≥ÿßÿπÿßÿ™ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ≥ÿßÿπÿ© ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xHours: {
        one: "ÿ≥ÿßÿπÿ© Ÿàÿßÿ≠ÿØÿ©",
        two: "ÿ≥ÿßÿπÿ™ŸäŸÜ",
        threeToTen: "{{count}} ÿ≥ÿßÿπÿßÿ™",
        other: "{{count}} ÿ≥ÿßÿπÿ©"
      },
      xDays: {
        one: "ŸäŸàŸÖ Ÿàÿßÿ≠ÿØ",
        two: "ŸäŸàŸÖŸäŸÜ",
        threeToTen: "{{count}} ÿ£ŸäÿßŸÖ",
        other: "{{count}} ŸäŸàŸÖ"
      },
      aboutXWeeks: {
        one: "ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xWeeks: {
        one: "ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ",
        two: "ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿ≥ÿßÿ®Ÿäÿπ",
        other: "{{count}} ÿ£ÿ≥ÿ®Ÿàÿπ"
      },
      aboutXMonths: {
        one: "ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿ¥Ÿáÿ±ŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿ¥Ÿáÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xMonths: {
        one: "ÿ¥Ÿáÿ± Ÿàÿßÿ≠ÿØ",
        two: "ÿ¥Ÿáÿ±ŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿ¥Ÿáÿ±",
        other: "{{count}} ÿ¥Ÿáÿ±"
      },
      aboutXYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      },
      xYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ",
        two: "ÿπÿßŸÖŸäŸÜ",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ",
        other: "{{count}} ÿπÿßŸÖ"
      },
      overXYears: {
        one: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖ",
        two: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿπÿßŸÖŸäŸÜ",
        threeToTen: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿ£ÿπŸàÿßŸÖ",
        other: "ÿ£ŸÉÿ´ÿ± ŸÖŸÜ {{count}} ÿπÿßŸÖ"
      },
      almostXYears: {
        one: "ÿπÿßŸÖ Ÿàÿßÿ≠ÿØ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        two: "ÿπÿßŸÖŸäŸÜ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        threeToTen: "{{count}} ÿ£ÿπŸàÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã",
        other: "{{count}} ÿπÿßŸÖ ÿ™ŸÇÿ±Ÿäÿ®ÿßŸã"
      }
    };
    formatDistance5 = function formatDistance6(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale3[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2) {
        result = tokenValue.two;
      } else if (count <= 10) {
        result = tokenValue.threeToTen.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "ŸÅŸä ÿÆŸÑÿßŸÑ " + result;
        } else {
          return "ŸÖŸÜÿ∞ " + result;
        }
      }
      return result;
    };
    formatDistance_default4 = formatDistance5;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/_lib/formatLong/index.js
var dateFormats3, timeFormats3, dateTimeFormats3, formatLong3, formatLong_default3;
var init_formatLong3 = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats3 = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    timeFormats3 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats3 = {
      full: "{{date}} 'ÿπŸÜÿØ' {{time}}",
      long: "{{date}} 'ÿπŸÜÿØ' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong3 = {
      date: buildFormatLongFn({
        formats: dateFormats3,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats3,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats3,
        defaultWidth: "full"
      })
    };
    formatLong_default3 = formatLong3;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/_lib/formatRelative/index.js
var formatRelativeLocale3, formatRelative5, formatRelative_default4;
var init_formatRelative4 = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/_lib/formatRelative/index.js"() {
    formatRelativeLocale3 = {
      lastWeek: "'ÿ£ÿÆÿ±' eeee 'ÿπŸÜÿØ' p",
      yesterday: "'ÿ£ŸÖÿ≥ ÿπŸÜÿØ' p",
      today: "'ÿßŸÑŸäŸàŸÖ ÿπŸÜÿØ' p",
      tomorrow: "'ÿ∫ÿØÿßŸã ÿπŸÜÿØ' p",
      nextWeek: "eeee 'ÿπŸÜÿØ' p",
      other: "P"
    };
    formatRelative5 = function formatRelative6(token, _date, _baseDate, _options) {
      return formatRelativeLocale3[token];
    };
    formatRelative_default4 = formatRelative5;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/_lib/localize/index.js
var eraValues3, quarterValues3, monthValues3, dayValues3, dayPeriodValues3, formattingDayPeriodValues3, ordinalNumber5, localize3, localize_default4;
var init_localize4 = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues3 = {
      narrow: ["ŸÇ", "ÿ®"],
      abbreviated: ["ŸÇ.ŸÖ.", "ÿ®.ŸÖ."],
      wide: ["ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ", "ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ"]
    };
    quarterValues3 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ÿ±1", "ÿ±2", "ÿ±3", "ÿ±4"],
      wide: ["ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ£ŸàŸÑ", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÜŸä", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ´ÿßŸÑÿ´", "ÿßŸÑÿ±ÿ®ÿπ ÿßŸÑÿ±ÿßÿ®ÿπ"]
    };
    monthValues3 = {
      narrow: ["Ÿä", "ŸÅ", "ŸÖ", "ÿ£", "ŸÖ", "Ÿä", "Ÿä", "ÿ£", "ÿ≥", "ÿ£", "ŸÜ", "ÿØ"],
      abbreviated: ["ŸäŸÜÿß", "ŸÅÿ®ÿ±", "ŸÖÿßÿ±ÿ≥", "ÿ£ÿ®ÿ±ŸäŸÑ", "ŸÖÿßŸäŸà", "ŸäŸàŸÜŸÄ", "ŸäŸàŸÑŸÄ", "ÿ£ÿ∫ÿ≥ŸÄ", "ÿ≥ÿ®ÿ™ŸÄ", "ÿ£ŸÉÿ™ŸÄ", "ŸÜŸàŸÅŸÄ", "ÿØŸäÿ≥ŸÄ"],
      wide: ["ŸäŸÜÿßŸäÿ±", "ŸÅÿ®ÿ±ÿßŸäÿ±", "ŸÖÿßÿ±ÿ≥", "ÿ£ÿ®ÿ±ŸäŸÑ", "ŸÖÿßŸäŸà", "ŸäŸàŸÜŸäŸà", "ŸäŸàŸÑŸäŸà", "ÿ£ÿ∫ÿ≥ÿ∑ÿ≥", "ÿ≥ÿ®ÿ™ŸÖÿ®ÿ±", "ÿ£ŸÉÿ™Ÿàÿ®ÿ±", "ŸÜŸàŸÅŸÖÿ®ÿ±", "ÿØŸäÿ≥ŸÖÿ®ÿ±"]
    };
    dayValues3 = {
      narrow: ["ÿ≠", "ŸÜ", "ÿ´", "ÿ±", "ÿÆ", "ÿ¨", "ÿ≥"],
      short: ["ÿ£ÿ≠ÿØ", "ÿßÿ´ŸÜŸäŸÜ", "ÿ´ŸÑÿßÿ´ÿßÿ°", "ÿ£ÿ±ÿ®ÿπÿßÿ°", "ÿÆŸÖŸäÿ≥", "ÿ¨ŸÖÿπÿ©", "ÿ≥ÿ®ÿ™"],
      abbreviated: ["ÿ£ÿ≠ÿØ", "ÿßÿ´ŸÜŸÄ", "ÿ´ŸÑÿß", "ÿ£ÿ±ÿ®ŸÄ", "ÿÆŸÖŸäŸÄ", "ÿ¨ŸÖÿπÿ©", "ÿ≥ÿ®ÿ™"],
      wide: ["ÿßŸÑÿ£ÿ≠ÿØ", "ÿßŸÑÿßÿ´ŸÜŸäŸÜ", "ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°", "ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°", "ÿßŸÑÿÆŸÖŸäÿ≥", "ÿßŸÑÿ¨ŸÖÿπÿ©", "ÿßŸÑÿ≥ÿ®ÿ™"]
    };
    dayPeriodValues3 = {
      narrow: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      },
      abbreviated: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      },
      wide: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÖÿ≥ÿßÿ°ÿßŸã",
        night: "ŸÑŸäŸÑÿßŸã"
      }
    };
    formattingDayPeriodValues3 = {
      narrow: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      },
      abbreviated: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏Ÿáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      },
      wide: {
        am: "ÿµ",
        pm: "ŸÖ",
        midnight: "ŸÜÿµŸÅ ÿßŸÑŸÑŸäŸÑ",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿßÿ≠ÿßŸã",
        afternoon: "ÿ®ÿπÿØ ÿßŸÑÿ∏ŸÄŸáÿ±",
        evening: "ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ°",
        night: "ŸÅŸä ÿßŸÑŸÑŸäŸÑ"
      }
    };
    ordinalNumber5 = function ordinalNumber6(dirtyNumber) {
      return String(dirtyNumber);
    };
    localize3 = {
      ordinalNumber: ordinalNumber5,
      era: buildLocalizeFn({
        values: eraValues3,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues3,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback3(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues3,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues3,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues3,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues3,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default4 = localize3;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/_lib/match/index.js
var matchOrdinalNumberPattern3, parseOrdinalNumberPattern3, matchEraPatterns3, parseEraPatterns3, matchQuarterPatterns3, parseQuarterPatterns3, matchMonthPatterns3, parseMonthPatterns3, matchDayPatterns3, parseDayPatterns3, matchDayPeriodPatterns3, parseDayPeriodPatterns3, match3, match_default4;
var init_match4 = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern3 = /^(\d+)(th|st|nd|rd)?/i;
    parseOrdinalNumberPattern3 = /\d+/i;
    matchEraPatterns3 = {
      narrow: /^(ŸÇ|ÿ®)/i,
      abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ŸÖ\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ|ÿ®ÿπÿØ ÿßŸÑŸÖŸäŸÑÿßÿØ)/i
    };
    parseEraPatterns3 = {
      any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
    };
    matchQuarterPatterns3 = {
      narrow: /^[1234]/i,
      abbreviated: /^ÿ±[1234]/i,
      wide: /^ÿßŸÑÿ±ÿ®ÿπ [1234]/i
    };
    parseQuarterPatterns3 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns3 = {
      narrow: /^[ŸäŸÅŸÖÿ£ŸÖÿ≥ŸÜÿØ]/i,
      abbreviated: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ£ÿ∫|ÿ≥|ÿ£ŸÉ|ŸÜ|ÿØ)/i,
      wide: /^(ŸäŸÜ|ŸÅ|ŸÖÿßÿ±|ÿ£ÿ®|ŸÖÿßŸä|ŸäŸàŸÜ|ŸäŸàŸÑ|ÿ£ÿ∫|ÿ≥|ÿ£ŸÉ|ŸÜ|ÿØ)/i
    };
    parseMonthPatterns3 = {
      narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿ£/i, /^ŸÖ/i, /^Ÿä/i, /^Ÿä/i, /^ÿ£/i, /^ÿ≥/i, /^ÿ£/i, /^ŸÜ/i, /^ÿØ/i],
      any: [/^ŸäŸÜ/i, /^ŸÅ/i, /^ŸÖÿßÿ±/i, /^ÿ£ÿ®/i, /^ŸÖÿßŸä/i, /^ŸäŸàŸÜ/i, /^ŸäŸàŸÑ/i, /^ÿ£ÿ∫/i, /^ÿ≥/i, /^ÿ£ŸÉ/i, /^ŸÜ/i, /^ÿØ/i]
    };
    matchDayPatterns3 = {
      narrow: /^[ÿ≠ŸÜÿ´ÿ±ÿÆÿ¨ÿ≥]/i,
      short: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜŸäŸÜ|ÿ´ŸÑÿßÿ´ÿßÿ°|ÿ£ÿ±ÿ®ÿπÿßÿ°|ÿÆŸÖŸäÿ≥|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
      abbreviated: /^(ÿ£ÿ≠ÿØ|ÿßÿ´ŸÜ|ÿ´ŸÑÿß|ÿ£ÿ±ÿ®|ÿÆŸÖŸä|ÿ¨ŸÖÿπÿ©|ÿ≥ÿ®ÿ™)/i,
      wide: /^(ÿßŸÑÿ£ÿ≠ÿØ|ÿßŸÑÿßÿ´ŸÜŸäŸÜ|ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°|ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°|ÿßŸÑÿÆŸÖŸäÿ≥|ÿßŸÑÿ¨ŸÖÿπÿ©|ÿßŸÑÿ≥ÿ®ÿ™)/i
    };
    parseDayPatterns3 = {
      narrow: [/^ÿ≠/i, /^ŸÜ/i, /^ÿ´/i, /^ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i],
      wide: [/^ÿßŸÑÿ£ÿ≠ÿØ/i, /^ÿßŸÑÿßÿ´ŸÜŸäŸÜ/i, /^ÿßŸÑÿ´ŸÑÿßÿ´ÿßÿ°/i, /^ÿßŸÑÿ£ÿ±ÿ®ÿπÿßÿ°/i, /^ÿßŸÑÿÆŸÖŸäÿ≥/i, /^ÿßŸÑÿ¨ŸÖÿπÿ©/i, /^ÿßŸÑÿ≥ÿ®ÿ™/i],
      any: [/^ÿ£ÿ≠/i, /^ÿßÿ´/i, /^ÿ´/i, /^ÿ£ÿ±/i, /^ÿÆ/i, /^ÿ¨/i, /^ÿ≥/i]
    };
    matchDayPeriodPatterns3 = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    parseDayPeriodPatterns3 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    match3 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern3,
        parsePattern: parseOrdinalNumberPattern3,
        valueCallback: function valueCallback5(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns3,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns3,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns3,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns3,
        defaultParseWidth: "any",
        valueCallback: function valueCallback6(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns3,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns3,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns3,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns3,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns3,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns3,
        defaultParseWidth: "any"
      })
    };
    match_default4 = match3;
  }
});

// node_modules/date-fns/esm/locale/ar-SA/index.js
var ar_SA_exports = {};
__export(ar_SA_exports, {
  default: () => ar_SA_default
});
var locale3, ar_SA_default;
var init_ar_SA = __esm({
  "node_modules/date-fns/esm/locale/ar-SA/index.js"() {
    init_formatDistance4();
    init_formatLong3();
    init_formatRelative4();
    init_localize4();
    init_match4();
    locale3 = {
      code: "ar-SA",
      formatDistance: formatDistance_default4,
      formatLong: formatLong_default3,
      formatRelative: formatRelative_default4,
      localize: localize_default4,
      match: match_default4,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    ar_SA_default = locale3;
  }
});

// node_modules/date-fns/esm/locale/be/_lib/formatDistance/index.js
function declension(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function buildLocalizeTokenFn(scheme) {
  return function(count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension(scheme.future, count);
        } else {
          return "–ø—Ä–∞–∑ " + declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension(scheme.past, count);
        } else {
          return declension(scheme.regular, count) + " —Ç–∞–º—É";
        }
      }
    } else {
      return declension(scheme.regular, count);
    }
  };
}
var halfAMinute, formatDistanceLocale4, formatDistance7, formatDistance_default5;
var init_formatDistance5 = __esm({
  "node_modules/date-fns/esm/locale/be/_lib/formatDistance/index.js"() {
    halfAMinute = function halfAMinute2(_, options) {
      if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "–ø—Ä–∞–∑ –ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã";
        } else {
          return "–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É";
        }
      }
      return "–ø–∞—û—Ö–≤—ñ–ª—ñ–Ω—ã";
    };
    formatDistanceLocale4 = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: "–º–µ–Ω—à –∑–∞ —Å–µ–∫—É–Ω–¥—É",
          singularNominative: "–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "–º–µ–Ω—à –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥"
        },
        future: {
          one: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Å–µ–∫—É–Ω–¥—É",
          singularNominative: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥–∞",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥"
        },
        past: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—É —Ç–∞–º—É",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—ã —Ç–∞–º—É",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥ —Ç–∞–º—É"
        },
        future: {
          singularNominative: "–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "–ø—Ä–∞–∑ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      halfAMinute,
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: "–º–µ–Ω—à –∑–∞ —Ö–≤—ñ–ª—ñ–Ω—É",
          singularNominative: "–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É",
          singularGenitive: "–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã",
          pluralGenitive: "–º–µ–Ω—à –∑–∞ {{count}} —Ö–≤—ñ–ª—ñ–Ω"
        },
        future: {
          one: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ —Ö–≤—ñ–ª—ñ–Ω—É",
          singularNominative: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É",
          singularGenitive: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã",
          pluralGenitive: "–º–µ–Ω—à, —á—ã–º –ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω"
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} —Ö–≤—ñ–ª—ñ–Ω–∞",
          singularGenitive: "{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã",
          pluralGenitive: "{{count}} —Ö–≤—ñ–ª—ñ–Ω"
        },
        past: {
          singularNominative: "{{count}} —Ö–≤—ñ–ª—ñ–Ω—É —Ç–∞–º—É",
          singularGenitive: "{{count}} —Ö–≤—ñ–ª—ñ–Ω—ã —Ç–∞–º—É",
          pluralGenitive: "{{count}} —Ö–≤—ñ–ª—ñ–Ω —Ç–∞–º—É"
        },
        future: {
          singularNominative: "–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—É",
          singularGenitive: "–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω—ã",
          pluralGenitive: "–ø—Ä–∞–∑ {{count}} —Ö–≤—ñ–ª—ñ–Ω"
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω—ã",
          singularGenitive: "–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω",
          pluralGenitive: "–∫–∞–ª—è {{count}} –≥–∞–¥–∑—ñ–Ω"
        },
        future: {
          singularNominative: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É",
          singularGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã",
          pluralGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω"
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} –≥–∞–¥–∑—ñ–Ω–∞",
          singularGenitive: "{{count}} –≥–∞–¥–∑—ñ–Ω—ã",
          pluralGenitive: "{{count}} –≥–∞–¥–∑—ñ–Ω"
        },
        past: {
          singularNominative: "{{count}} –≥–∞–¥–∑—ñ–Ω—É —Ç–∞–º—É",
          singularGenitive: "{{count}} –≥–∞–¥–∑—ñ–Ω—ã —Ç–∞–º—É",
          pluralGenitive: "{{count}} –≥–∞–¥–∑—ñ–Ω —Ç–∞–º—É"
        },
        future: {
          singularNominative: "–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—É",
          singularGenitive: "–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω—ã",
          pluralGenitive: "–ø—Ä–∞–∑ {{count}} –≥–∞–¥–∑—ñ–Ω"
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} –¥–∑–µ–Ω—å",
          singularGenitive: "{{count}} –¥–Ω—ñ",
          pluralGenitive: "{{count}} –¥–∑—ë–Ω"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞",
          // TODO
          singularGenitive: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û",
          // TODO
          pluralGenitive: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û"
          // TODO
        },
        future: {
          singularNominative: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü",
          // TODO
          singularGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã",
          // TODO
          pluralGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û"
          // TODO
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} –º–µ—Å—è—Ü",
          singularGenitive: "{{count}} –º–µ—Å—è—Ü—ã",
          pluralGenitive: "{{count}} –º–µ—Å—è—Ü–∞—û"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞",
          singularGenitive: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û",
          pluralGenitive: "–∫–∞–ª—è {{count}} –º–µ—Å—è—Ü–∞—û"
        },
        future: {
          singularNominative: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü",
          singularGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü—ã",
          pluralGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –º–µ—Å—è—Ü–∞—û"
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} –º–µ—Å—è—Ü",
          singularGenitive: "{{count}} –º–µ—Å—è—Ü—ã",
          pluralGenitive: "{{count}} –º–µ—Å—è—Ü–∞—û"
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–∫–∞–ª—è {{count}} –≥–æ–¥–∞",
          singularGenitive: "–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û",
          pluralGenitive: "–∫–∞–ª—è {{count}} –≥–∞–¥–æ—û"
        },
        future: {
          singularNominative: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã",
          pluralGenitive: "–ø—Ä—ã–±–ª—ñ–∑–Ω–∞ –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û"
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} –≥–æ–¥",
          singularGenitive: "{{count}} –≥–∞–¥—ã",
          pluralGenitive: "{{count}} –≥–∞–¥–æ—û"
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–±–æ–ª—å—à –∑–∞ {{count}} –≥–æ–¥",
          singularGenitive: "–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥—ã",
          pluralGenitive: "–±–æ–ª—å—à –∑–∞ {{count}} –≥–∞–¥–æ—û"
        },
        future: {
          singularNominative: "–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã",
          pluralGenitive: "–±–æ–ª—å—à, —á—ã–º –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û"
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "–∞–º–∞–ª—å {{count}} –≥–æ–¥",
          singularGenitive: "–∞–º–∞–ª—å {{count}} –≥–∞–¥—ã",
          pluralGenitive: "–∞–º–∞–ª—å {{count}} –≥–∞–¥–æ—û"
        },
        future: {
          singularNominative: "–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥—ã",
          pluralGenitive: "–∞–º–∞–ª—å –ø—Ä–∞–∑ {{count}} –≥–∞–¥–æ—û"
        }
      })
    };
    formatDistance7 = function formatDistance8(token, count, options) {
      options = options || {};
      return formatDistanceLocale4[token](count, options);
    };
    formatDistance_default5 = formatDistance7;
  }
});

// node_modules/date-fns/esm/locale/be/_lib/formatLong/index.js
var dateFormats4, timeFormats4, dateTimeFormats4, formatLong4, formatLong_default4;
var init_formatLong4 = __esm({
  "node_modules/date-fns/esm/locale/be/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats4 = {
      full: "EEEE, d MMMM y '–≥.'",
      long: "d MMMM y '–≥.'",
      medium: "d MMM y '–≥.'",
      short: "dd.MM.y"
    };
    timeFormats4 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats4 = {
      any: "{{date}}, {{time}}"
    };
    formatLong4 = {
      date: buildFormatLongFn({
        formats: dateFormats4,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats4,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats4,
        defaultWidth: "any"
      })
    };
    formatLong_default4 = formatLong4;
  }
});

// node_modules/date-fns/esm/add/index.js
var init_add = __esm({
  "node_modules/date-fns/esm/add/index.js"() {
    init_typeof();
    init_addDays();
    init_addMonths();
    init_toDate();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/isSunday/index.js
var init_isSunday = __esm({
  "node_modules/date-fns/esm/isSunday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSaturday/index.js
var init_isSaturday = __esm({
  "node_modules/date-fns/esm/isSaturday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addBusinessDays/index.js
var init_addBusinessDays = __esm({
  "node_modules/date-fns/esm/addBusinessDays/index.js"() {
    init_isWeekend();
    init_toDate();
    init_toInteger();
    init_requiredArgs();
    init_isSunday();
    init_isSaturday();
  }
});

// node_modules/date-fns/esm/addHours/index.js
var init_addHours = __esm({
  "node_modules/date-fns/esm/addHours/index.js"() {
    init_toInteger();
    init_addMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfISOWeek/index.js
var init_startOfISOWeek = __esm({
  "node_modules/date-fns/esm/startOfISOWeek/index.js"() {
    init_startOfWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getISOWeekYear/index.js
var init_getISOWeekYear = __esm({
  "node_modules/date-fns/esm/getISOWeekYear/index.js"() {
    init_toDate();
    init_startOfISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfISOWeekYear/index.js
var init_startOfISOWeekYear = __esm({
  "node_modules/date-fns/esm/startOfISOWeekYear/index.js"() {
    init_getISOWeekYear();
    init_startOfISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setISOWeekYear/index.js
var init_setISOWeekYear = __esm({
  "node_modules/date-fns/esm/setISOWeekYear/index.js"() {
    init_toInteger();
    init_toDate();
    init_startOfISOWeekYear();
    init_differenceInCalendarDays();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addISOWeekYears/index.js
var init_addISOWeekYears = __esm({
  "node_modules/date-fns/esm/addISOWeekYears/index.js"() {
    init_toInteger();
    init_getISOWeekYear();
    init_setISOWeekYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addMinutes/index.js
var init_addMinutes = __esm({
  "node_modules/date-fns/esm/addMinutes/index.js"() {
    init_toInteger();
    init_addMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addQuarters/index.js
var init_addQuarters = __esm({
  "node_modules/date-fns/esm/addQuarters/index.js"() {
    init_toInteger();
    init_addMonths();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addSeconds/index.js
var init_addSeconds = __esm({
  "node_modules/date-fns/esm/addSeconds/index.js"() {
    init_toInteger();
    init_addMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/addWeeks/index.js
var init_addWeeks = __esm({
  "node_modules/date-fns/esm/addWeeks/index.js"() {
    init_toInteger();
    init_addDays();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/areIntervalsOverlapping/index.js
var init_areIntervalsOverlapping = __esm({
  "node_modules/date-fns/esm/areIntervalsOverlapping/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/clamp/index.js
var init_clamp = __esm({
  "node_modules/date-fns/esm/clamp/index.js"() {
    init_max();
    init_min();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/closestIndexTo/index.js
var init_closestIndexTo = __esm({
  "node_modules/date-fns/esm/closestIndexTo/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/closestTo/index.js
var init_closestTo = __esm({
  "node_modules/date-fns/esm/closestTo/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/compareAsc/index.js
var init_compareAsc = __esm({
  "node_modules/date-fns/esm/compareAsc/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/compareDesc/index.js
var init_compareDesc = __esm({
  "node_modules/date-fns/esm/compareDesc/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/daysToWeeks/index.js
var init_daysToWeeks = __esm({
  "node_modules/date-fns/esm/daysToWeeks/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/differenceInBusinessDays/index.js
var init_differenceInBusinessDays = __esm({
  "node_modules/date-fns/esm/differenceInBusinessDays/index.js"() {
    init_addDays();
    init_differenceInCalendarDays();
    init_isSameDay();
    init_isValid();
    init_isWeekend();
    init_toDate();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/differenceInCalendarISOWeekYears/index.js
var init_differenceInCalendarISOWeekYears = __esm({
  "node_modules/date-fns/esm/differenceInCalendarISOWeekYears/index.js"() {
    init_getISOWeekYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js
var init_differenceInCalendarISOWeeks = __esm({
  "node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js"() {
    init_getTimezoneOffsetInMilliseconds();
    init_startOfISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getQuarter/index.js
var init_getQuarter = __esm({
  "node_modules/date-fns/esm/getQuarter/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInCalendarQuarters/index.js
var init_differenceInCalendarQuarters = __esm({
  "node_modules/date-fns/esm/differenceInCalendarQuarters/index.js"() {
    init_getQuarter();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInCalendarWeeks/index.js
var init_differenceInCalendarWeeks = __esm({
  "node_modules/date-fns/esm/differenceInCalendarWeeks/index.js"() {
    init_startOfWeek();
    init_getTimezoneOffsetInMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
var init_differenceInCalendarYears = __esm({
  "node_modules/date-fns/esm/differenceInCalendarYears/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInMilliseconds/index.js
var init_differenceInMilliseconds = __esm({
  "node_modules/date-fns/esm/differenceInMilliseconds/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/_lib/roundingMethods/index.js
var init_roundingMethods = __esm({
  "node_modules/date-fns/esm/_lib/roundingMethods/index.js"() {
  }
});

// node_modules/date-fns/esm/differenceInHours/index.js
var init_differenceInHours = __esm({
  "node_modules/date-fns/esm/differenceInHours/index.js"() {
    init_constants();
    init_differenceInMilliseconds();
    init_requiredArgs();
    init_roundingMethods();
  }
});

// node_modules/date-fns/esm/subISOWeekYears/index.js
var init_subISOWeekYears = __esm({
  "node_modules/date-fns/esm/subISOWeekYears/index.js"() {
    init_addISOWeekYears();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/differenceInISOWeekYears/index.js
var init_differenceInISOWeekYears = __esm({
  "node_modules/date-fns/esm/differenceInISOWeekYears/index.js"() {
    init_toDate();
    init_differenceInCalendarISOWeekYears();
    init_compareAsc();
    init_subISOWeekYears();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInMinutes/index.js
var init_differenceInMinutes = __esm({
  "node_modules/date-fns/esm/differenceInMinutes/index.js"() {
    init_constants();
    init_differenceInMilliseconds();
    init_requiredArgs();
    init_roundingMethods();
  }
});

// node_modules/date-fns/esm/isLastDayOfMonth/index.js
var init_isLastDayOfMonth = __esm({
  "node_modules/date-fns/esm/isLastDayOfMonth/index.js"() {
    init_toDate();
    init_endOfDay();
    init_endOfMonth();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/differenceInMonths/index.js
var init_differenceInMonths = __esm({
  "node_modules/date-fns/esm/differenceInMonths/index.js"() {
    init_toDate();
    init_differenceInCalendarMonths();
    init_compareAsc();
    init_requiredArgs();
    init_isLastDayOfMonth();
  }
});

// node_modules/date-fns/esm/differenceInQuarters/index.js
var init_differenceInQuarters = __esm({
  "node_modules/date-fns/esm/differenceInQuarters/index.js"() {
    init_differenceInMonths();
    init_requiredArgs();
    init_roundingMethods();
  }
});

// node_modules/date-fns/esm/differenceInSeconds/index.js
var init_differenceInSeconds = __esm({
  "node_modules/date-fns/esm/differenceInSeconds/index.js"() {
    init_differenceInMilliseconds();
    init_requiredArgs();
    init_roundingMethods();
  }
});

// node_modules/date-fns/esm/differenceInWeeks/index.js
var init_differenceInWeeks = __esm({
  "node_modules/date-fns/esm/differenceInWeeks/index.js"() {
    init_differenceInDays();
    init_requiredArgs();
    init_roundingMethods();
  }
});

// node_modules/date-fns/esm/differenceInYears/index.js
var init_differenceInYears = __esm({
  "node_modules/date-fns/esm/differenceInYears/index.js"() {
    init_toDate();
    init_differenceInCalendarYears();
    init_compareAsc();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachHourOfInterval/index.js
var init_eachHourOfInterval = __esm({
  "node_modules/date-fns/esm/eachHourOfInterval/index.js"() {
    init_addHours();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfMinute/index.js
var init_startOfMinute = __esm({
  "node_modules/date-fns/esm/startOfMinute/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachMinuteOfInterval/index.js
var init_eachMinuteOfInterval = __esm({
  "node_modules/date-fns/esm/eachMinuteOfInterval/index.js"() {
    init_addMinutes();
    init_toDate();
    init_startOfMinute();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachMonthOfInterval/index.js
var init_eachMonthOfInterval = __esm({
  "node_modules/date-fns/esm/eachMonthOfInterval/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfQuarter/index.js
var init_startOfQuarter = __esm({
  "node_modules/date-fns/esm/startOfQuarter/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachQuarterOfInterval/index.js
var init_eachQuarterOfInterval = __esm({
  "node_modules/date-fns/esm/eachQuarterOfInterval/index.js"() {
    init_addQuarters();
    init_startOfQuarter();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachWeekOfInterval/index.js
var init_eachWeekOfInterval = __esm({
  "node_modules/date-fns/esm/eachWeekOfInterval/index.js"() {
    init_addWeeks();
    init_startOfWeek();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachWeekendOfInterval/index.js
var init_eachWeekendOfInterval = __esm({
  "node_modules/date-fns/esm/eachWeekendOfInterval/index.js"() {
    init_eachDayOfInterval();
    init_isSunday();
    init_isWeekend();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachWeekendOfMonth/index.js
var init_eachWeekendOfMonth = __esm({
  "node_modules/date-fns/esm/eachWeekendOfMonth/index.js"() {
    init_eachWeekendOfInterval();
    init_startOfMonth();
    init_endOfMonth();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfYear/index.js
var init_endOfYear = __esm({
  "node_modules/date-fns/esm/endOfYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfYear/index.js
var init_startOfYear = __esm({
  "node_modules/date-fns/esm/startOfYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachWeekendOfYear/index.js
var init_eachWeekendOfYear = __esm({
  "node_modules/date-fns/esm/eachWeekendOfYear/index.js"() {
    init_eachWeekendOfInterval();
    init_endOfYear();
    init_startOfYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/eachYearOfInterval/index.js
var init_eachYearOfInterval = __esm({
  "node_modules/date-fns/esm/eachYearOfInterval/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfDecade/index.js
var init_endOfDecade = __esm({
  "node_modules/date-fns/esm/endOfDecade/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfHour/index.js
var init_endOfHour = __esm({
  "node_modules/date-fns/esm/endOfHour/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfISOWeek/index.js
var init_endOfISOWeek = __esm({
  "node_modules/date-fns/esm/endOfISOWeek/index.js"() {
    init_endOfWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfISOWeekYear/index.js
var init_endOfISOWeekYear = __esm({
  "node_modules/date-fns/esm/endOfISOWeekYear/index.js"() {
    init_getISOWeekYear();
    init_startOfISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfMinute/index.js
var init_endOfMinute = __esm({
  "node_modules/date-fns/esm/endOfMinute/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfQuarter/index.js
var init_endOfQuarter = __esm({
  "node_modules/date-fns/esm/endOfQuarter/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfSecond/index.js
var init_endOfSecond = __esm({
  "node_modules/date-fns/esm/endOfSecond/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/endOfToday/index.js
var init_endOfToday = __esm({
  "node_modules/date-fns/esm/endOfToday/index.js"() {
    init_endOfDay();
  }
});

// node_modules/date-fns/esm/endOfTomorrow/index.js
var init_endOfTomorrow = __esm({
  "node_modules/date-fns/esm/endOfTomorrow/index.js"() {
  }
});

// node_modules/date-fns/esm/endOfYesterday/index.js
var init_endOfYesterday = __esm({
  "node_modules/date-fns/esm/endOfYesterday/index.js"() {
  }
});

// node_modules/date-fns/esm/_lib/cloneObject/index.js
var init_cloneObject = __esm({
  "node_modules/date-fns/esm/_lib/cloneObject/index.js"() {
    init_assign();
  }
});

// node_modules/date-fns/esm/formatDistance/index.js
var init_formatDistance6 = __esm({
  "node_modules/date-fns/esm/formatDistance/index.js"() {
    init_defaultOptions();
    init_compareAsc();
    init_differenceInMonths();
    init_differenceInSeconds();
    init_defaultLocale();
    init_toDate();
    init_cloneObject();
    init_assign();
    init_getTimezoneOffsetInMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE, MINUTES_IN_DAY, MINUTES_IN_MONTH, MINUTES_IN_YEAR;
var init_formatDistanceStrict = __esm({
  "node_modules/date-fns/esm/formatDistanceStrict/index.js"() {
    init_defaultOptions();
    init_getTimezoneOffsetInMilliseconds();
    init_compareAsc();
    init_toDate();
    init_cloneObject();
    init_assign();
    init_defaultLocale();
    init_requiredArgs();
    MILLISECONDS_IN_MINUTE = 1e3 * 60;
    MINUTES_IN_DAY = 60 * 24;
    MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
    MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;
  }
});

// node_modules/date-fns/esm/formatDistanceToNow/index.js
var init_formatDistanceToNow = __esm({
  "node_modules/date-fns/esm/formatDistanceToNow/index.js"() {
    init_formatDistance6();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/formatDistanceToNowStrict/index.js
var init_formatDistanceToNowStrict = __esm({
  "node_modules/date-fns/esm/formatDistanceToNowStrict/index.js"() {
    init_formatDistanceStrict();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/formatDuration/index.js
var init_formatDuration = __esm({
  "node_modules/date-fns/esm/formatDuration/index.js"() {
    init_defaultOptions();
    init_defaultLocale();
  }
});

// node_modules/date-fns/esm/formatISO/index.js
var init_formatISO = __esm({
  "node_modules/date-fns/esm/formatISO/index.js"() {
    init_toDate();
    init_addLeadingZeros();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/formatISO9075/index.js
var init_formatISO9075 = __esm({
  "node_modules/date-fns/esm/formatISO9075/index.js"() {
    init_toDate();
    init_isValid();
    init_addLeadingZeros();
  }
});

// node_modules/date-fns/esm/formatISODuration/index.js
var init_formatISODuration = __esm({
  "node_modules/date-fns/esm/formatISODuration/index.js"() {
    init_typeof();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/formatRFC3339/index.js
var init_formatRFC3339 = __esm({
  "node_modules/date-fns/esm/formatRFC3339/index.js"() {
    init_toDate();
    init_isValid();
    init_addLeadingZeros();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/formatRFC7231/index.js
var init_formatRFC7231 = __esm({
  "node_modules/date-fns/esm/formatRFC7231/index.js"() {
    init_toDate();
    init_isValid();
    init_addLeadingZeros();
  }
});

// node_modules/date-fns/esm/formatRelative/index.js
var init_formatRelative5 = __esm({
  "node_modules/date-fns/esm/formatRelative/index.js"() {
    init_defaultOptions();
    init_differenceInCalendarDays();
    init_format();
    init_defaultLocale();
    init_subMilliseconds();
    init_toDate();
    init_getTimezoneOffsetInMilliseconds();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/fromUnixTime/index.js
var init_fromUnixTime = __esm({
  "node_modules/date-fns/esm/fromUnixTime/index.js"() {
    init_toDate();
    init_toInteger();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDate/index.js
var init_getDate = __esm({
  "node_modules/date-fns/esm/getDate/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDay/index.js
var init_getDay = __esm({
  "node_modules/date-fns/esm/getDay/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDayOfYear/index.js
var init_getDayOfYear = __esm({
  "node_modules/date-fns/esm/getDayOfYear/index.js"() {
    init_toDate();
    init_startOfYear();
    init_differenceInCalendarDays();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isLeapYear/index.js
var init_isLeapYear = __esm({
  "node_modules/date-fns/esm/isLeapYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDaysInYear/index.js
var init_getDaysInYear = __esm({
  "node_modules/date-fns/esm/getDaysInYear/index.js"() {
    init_toDate();
    init_isLeapYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDecade/index.js
var init_getDecade = __esm({
  "node_modules/date-fns/esm/getDecade/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getDefaultOptions/index.js
var init_getDefaultOptions = __esm({
  "node_modules/date-fns/esm/getDefaultOptions/index.js"() {
    init_defaultOptions();
    init_assign();
  }
});

// node_modules/date-fns/esm/getHours/index.js
var init_getHours = __esm({
  "node_modules/date-fns/esm/getHours/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getISODay/index.js
var init_getISODay = __esm({
  "node_modules/date-fns/esm/getISODay/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getISOWeek/index.js
var init_getISOWeek = __esm({
  "node_modules/date-fns/esm/getISOWeek/index.js"() {
    init_toDate();
    init_startOfISOWeek();
    init_startOfISOWeekYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getISOWeeksInYear/index.js
var init_getISOWeeksInYear = __esm({
  "node_modules/date-fns/esm/getISOWeeksInYear/index.js"() {
    init_startOfISOWeekYear();
    init_addWeeks();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getMilliseconds/index.js
var init_getMilliseconds = __esm({
  "node_modules/date-fns/esm/getMilliseconds/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getMinutes/index.js
var init_getMinutes = __esm({
  "node_modules/date-fns/esm/getMinutes/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getMonth/index.js
var init_getMonth = __esm({
  "node_modules/date-fns/esm/getMonth/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY;
var init_getOverlappingDaysInIntervals = __esm({
  "node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js"() {
    init_toDate();
    init_requiredArgs();
    MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1e3;
  }
});

// node_modules/date-fns/esm/getSeconds/index.js
var init_getSeconds = __esm({
  "node_modules/date-fns/esm/getSeconds/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getTime/index.js
var init_getTime = __esm({
  "node_modules/date-fns/esm/getTime/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getUnixTime/index.js
var init_getUnixTime = __esm({
  "node_modules/date-fns/esm/getUnixTime/index.js"() {
    init_getTime();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getWeekYear/index.js
var init_getWeekYear = __esm({
  "node_modules/date-fns/esm/getWeekYear/index.js"() {
    init_startOfWeek();
    init_toDate();
    init_toInteger();
    init_requiredArgs();
    init_defaultOptions();
  }
});

// node_modules/date-fns/esm/startOfWeekYear/index.js
var init_startOfWeekYear = __esm({
  "node_modules/date-fns/esm/startOfWeekYear/index.js"() {
    init_getWeekYear();
    init_startOfWeek();
    init_toInteger();
    init_requiredArgs();
    init_defaultOptions();
  }
});

// node_modules/date-fns/esm/getWeek/index.js
var init_getWeek = __esm({
  "node_modules/date-fns/esm/getWeek/index.js"() {
    init_startOfWeek();
    init_startOfWeekYear();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getWeekOfMonth/index.js
var init_getWeekOfMonth = __esm({
  "node_modules/date-fns/esm/getWeekOfMonth/index.js"() {
    init_defaultOptions();
    init_getDate();
    init_getDay();
    init_startOfMonth();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/lastDayOfMonth/index.js
var init_lastDayOfMonth = __esm({
  "node_modules/date-fns/esm/lastDayOfMonth/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getWeeksInMonth/index.js
var init_getWeeksInMonth = __esm({
  "node_modules/date-fns/esm/getWeeksInMonth/index.js"() {
    init_differenceInCalendarWeeks();
    init_lastDayOfMonth();
    init_startOfMonth();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/getYear/index.js
var init_getYear = __esm({
  "node_modules/date-fns/esm/getYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/hoursToMilliseconds/index.js
var init_hoursToMilliseconds = __esm({
  "node_modules/date-fns/esm/hoursToMilliseconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/hoursToMinutes/index.js
var init_hoursToMinutes = __esm({
  "node_modules/date-fns/esm/hoursToMinutes/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/hoursToSeconds/index.js
var init_hoursToSeconds = __esm({
  "node_modules/date-fns/esm/hoursToSeconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/intervalToDuration/index.js
var init_intervalToDuration = __esm({
  "node_modules/date-fns/esm/intervalToDuration/index.js"() {
    init_compareAsc();
    init_add();
    init_differenceInDays();
    init_differenceInHours();
    init_differenceInMinutes();
    init_differenceInMonths();
    init_differenceInSeconds();
    init_differenceInYears();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/intlFormat/index.js
var init_intlFormat = __esm({
  "node_modules/date-fns/esm/intlFormat/index.js"() {
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/intlFormatDistance/index.js
var init_intlFormatDistance = __esm({
  "node_modules/date-fns/esm/intlFormatDistance/index.js"() {
    init_constants();
    init_differenceInCalendarDays();
    init_differenceInCalendarMonths();
    init_differenceInCalendarQuarters();
    init_differenceInCalendarWeeks();
    init_differenceInCalendarYears();
    init_differenceInHours();
    init_differenceInMinutes();
    init_differenceInSeconds();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isExists/index.js
var init_isExists = __esm({
  "node_modules/date-fns/esm/isExists/index.js"() {
  }
});

// node_modules/date-fns/esm/isFirstDayOfMonth/index.js
var init_isFirstDayOfMonth = __esm({
  "node_modules/date-fns/esm/isFirstDayOfMonth/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isFriday/index.js
var init_isFriday = __esm({
  "node_modules/date-fns/esm/isFriday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isFuture/index.js
var init_isFuture = __esm({
  "node_modules/date-fns/esm/isFuture/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isMatch/index.js
var init_isMatch = __esm({
  "node_modules/date-fns/esm/isMatch/index.js"() {
    init_parse();
    init_isValid();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isMonday/index.js
var init_isMonday = __esm({
  "node_modules/date-fns/esm/isMonday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isPast/index.js
var init_isPast = __esm({
  "node_modules/date-fns/esm/isPast/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfHour/index.js
var init_startOfHour = __esm({
  "node_modules/date-fns/esm/startOfHour/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameHour/index.js
var init_isSameHour = __esm({
  "node_modules/date-fns/esm/isSameHour/index.js"() {
    init_startOfHour();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameWeek/index.js
var init_isSameWeek = __esm({
  "node_modules/date-fns/esm/isSameWeek/index.js"() {
    init_startOfWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameISOWeek/index.js
var init_isSameISOWeek = __esm({
  "node_modules/date-fns/esm/isSameISOWeek/index.js"() {
    init_isSameWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameISOWeekYear/index.js
var init_isSameISOWeekYear = __esm({
  "node_modules/date-fns/esm/isSameISOWeekYear/index.js"() {
    init_startOfISOWeekYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameMinute/index.js
var init_isSameMinute = __esm({
  "node_modules/date-fns/esm/isSameMinute/index.js"() {
    init_startOfMinute();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameQuarter/index.js
var init_isSameQuarter = __esm({
  "node_modules/date-fns/esm/isSameQuarter/index.js"() {
    init_startOfQuarter();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfSecond/index.js
var init_startOfSecond = __esm({
  "node_modules/date-fns/esm/startOfSecond/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameSecond/index.js
var init_isSameSecond = __esm({
  "node_modules/date-fns/esm/isSameSecond/index.js"() {
    init_startOfSecond();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isSameYear/index.js
var init_isSameYear = __esm({
  "node_modules/date-fns/esm/isSameYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisHour/index.js
var init_isThisHour = __esm({
  "node_modules/date-fns/esm/isThisHour/index.js"() {
    init_isSameHour();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisISOWeek/index.js
var init_isThisISOWeek = __esm({
  "node_modules/date-fns/esm/isThisISOWeek/index.js"() {
    init_isSameISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisMinute/index.js
var init_isThisMinute = __esm({
  "node_modules/date-fns/esm/isThisMinute/index.js"() {
    init_isSameMinute();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisMonth/index.js
var init_isThisMonth = __esm({
  "node_modules/date-fns/esm/isThisMonth/index.js"() {
    init_isSameMonth();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisQuarter/index.js
var init_isThisQuarter = __esm({
  "node_modules/date-fns/esm/isThisQuarter/index.js"() {
    init_isSameQuarter();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisSecond/index.js
var init_isThisSecond = __esm({
  "node_modules/date-fns/esm/isThisSecond/index.js"() {
    init_isSameSecond();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisWeek/index.js
var init_isThisWeek = __esm({
  "node_modules/date-fns/esm/isThisWeek/index.js"() {
    init_isSameWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThisYear/index.js
var init_isThisYear = __esm({
  "node_modules/date-fns/esm/isThisYear/index.js"() {
    init_isSameYear();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isThursday/index.js
var init_isThursday = __esm({
  "node_modules/date-fns/esm/isThursday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isToday/index.js
var init_isToday = __esm({
  "node_modules/date-fns/esm/isToday/index.js"() {
    init_isSameDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isTomorrow/index.js
var init_isTomorrow = __esm({
  "node_modules/date-fns/esm/isTomorrow/index.js"() {
    init_addDays();
    init_isSameDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isTuesday/index.js
var init_isTuesday = __esm({
  "node_modules/date-fns/esm/isTuesday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/isWednesday/index.js
var init_isWednesday = __esm({
  "node_modules/date-fns/esm/isWednesday/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/subDays/index.js
var init_subDays = __esm({
  "node_modules/date-fns/esm/subDays/index.js"() {
    init_addDays();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/isYesterday/index.js
var init_isYesterday = __esm({
  "node_modules/date-fns/esm/isYesterday/index.js"() {
    init_isSameDay();
    init_subDays();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lastDayOfDecade/index.js
var init_lastDayOfDecade = __esm({
  "node_modules/date-fns/esm/lastDayOfDecade/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lastDayOfWeek/index.js
var init_lastDayOfWeek = __esm({
  "node_modules/date-fns/esm/lastDayOfWeek/index.js"() {
    init_toDate();
    init_toInteger();
    init_requiredArgs();
    init_defaultOptions();
  }
});

// node_modules/date-fns/esm/lastDayOfISOWeek/index.js
var init_lastDayOfISOWeek = __esm({
  "node_modules/date-fns/esm/lastDayOfISOWeek/index.js"() {
    init_lastDayOfWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lastDayOfISOWeekYear/index.js
var init_lastDayOfISOWeekYear = __esm({
  "node_modules/date-fns/esm/lastDayOfISOWeekYear/index.js"() {
    init_getISOWeekYear();
    init_startOfISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lastDayOfQuarter/index.js
var init_lastDayOfQuarter = __esm({
  "node_modules/date-fns/esm/lastDayOfQuarter/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lastDayOfYear/index.js
var init_lastDayOfYear = __esm({
  "node_modules/date-fns/esm/lastDayOfYear/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/lightFormat/index.js
var init_lightFormat = __esm({
  "node_modules/date-fns/esm/lightFormat/index.js"() {
    init_toDate();
    init_lightFormatters();
    init_getTimezoneOffsetInMilliseconds();
    init_isValid();
    init_subMilliseconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/milliseconds/index.js
var init_milliseconds = __esm({
  "node_modules/date-fns/esm/milliseconds/index.js"() {
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/millisecondsToHours/index.js
var init_millisecondsToHours = __esm({
  "node_modules/date-fns/esm/millisecondsToHours/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/millisecondsToMinutes/index.js
var init_millisecondsToMinutes = __esm({
  "node_modules/date-fns/esm/millisecondsToMinutes/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/millisecondsToSeconds/index.js
var init_millisecondsToSeconds = __esm({
  "node_modules/date-fns/esm/millisecondsToSeconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/minutesToHours/index.js
var init_minutesToHours = __esm({
  "node_modules/date-fns/esm/minutesToHours/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/minutesToMilliseconds/index.js
var init_minutesToMilliseconds = __esm({
  "node_modules/date-fns/esm/minutesToMilliseconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/minutesToSeconds/index.js
var init_minutesToSeconds = __esm({
  "node_modules/date-fns/esm/minutesToSeconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/monthsToQuarters/index.js
var init_monthsToQuarters = __esm({
  "node_modules/date-fns/esm/monthsToQuarters/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/monthsToYears/index.js
var init_monthsToYears = __esm({
  "node_modules/date-fns/esm/monthsToYears/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/nextDay/index.js
var init_nextDay = __esm({
  "node_modules/date-fns/esm/nextDay/index.js"() {
    init_addDays();
    init_getDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextFriday/index.js
var init_nextFriday = __esm({
  "node_modules/date-fns/esm/nextFriday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextMonday/index.js
var init_nextMonday = __esm({
  "node_modules/date-fns/esm/nextMonday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextSaturday/index.js
var init_nextSaturday = __esm({
  "node_modules/date-fns/esm/nextSaturday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextSunday/index.js
var init_nextSunday = __esm({
  "node_modules/date-fns/esm/nextSunday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextThursday/index.js
var init_nextThursday = __esm({
  "node_modules/date-fns/esm/nextThursday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextTuesday/index.js
var init_nextTuesday = __esm({
  "node_modules/date-fns/esm/nextTuesday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/nextWednesday/index.js
var init_nextWednesday = __esm({
  "node_modules/date-fns/esm/nextWednesday/index.js"() {
    init_nextDay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/parseISO/index.js
var init_parseISO = __esm({
  "node_modules/date-fns/esm/parseISO/index.js"() {
    init_constants();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/parseJSON/index.js
var init_parseJSON = __esm({
  "node_modules/date-fns/esm/parseJSON/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/previousDay/index.js
var init_previousDay = __esm({
  "node_modules/date-fns/esm/previousDay/index.js"() {
    init_requiredArgs();
    init_getDay();
    init_subDays();
  }
});

// node_modules/date-fns/esm/previousFriday/index.js
var init_previousFriday = __esm({
  "node_modules/date-fns/esm/previousFriday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousMonday/index.js
var init_previousMonday = __esm({
  "node_modules/date-fns/esm/previousMonday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousSaturday/index.js
var init_previousSaturday = __esm({
  "node_modules/date-fns/esm/previousSaturday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousSunday/index.js
var init_previousSunday = __esm({
  "node_modules/date-fns/esm/previousSunday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousThursday/index.js
var init_previousThursday = __esm({
  "node_modules/date-fns/esm/previousThursday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousTuesday/index.js
var init_previousTuesday = __esm({
  "node_modules/date-fns/esm/previousTuesday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/previousWednesday/index.js
var init_previousWednesday = __esm({
  "node_modules/date-fns/esm/previousWednesday/index.js"() {
    init_requiredArgs();
    init_previousDay();
  }
});

// node_modules/date-fns/esm/quartersToMonths/index.js
var init_quartersToMonths = __esm({
  "node_modules/date-fns/esm/quartersToMonths/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/quartersToYears/index.js
var init_quartersToYears = __esm({
  "node_modules/date-fns/esm/quartersToYears/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/roundToNearestMinutes/index.js
var init_roundToNearestMinutes = __esm({
  "node_modules/date-fns/esm/roundToNearestMinutes/index.js"() {
    init_toDate();
    init_roundingMethods();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/secondsToHours/index.js
var init_secondsToHours = __esm({
  "node_modules/date-fns/esm/secondsToHours/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/secondsToMilliseconds/index.js
var init_secondsToMilliseconds = __esm({
  "node_modules/date-fns/esm/secondsToMilliseconds/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/secondsToMinutes/index.js
var init_secondsToMinutes = __esm({
  "node_modules/date-fns/esm/secondsToMinutes/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/set/index.js
var init_set = __esm({
  "node_modules/date-fns/esm/set/index.js"() {
    init_typeof();
    init_toDate();
    init_setMonth();
    init_toInteger();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setDate/index.js
var init_setDate = __esm({
  "node_modules/date-fns/esm/setDate/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setDay/index.js
var init_setDay = __esm({
  "node_modules/date-fns/esm/setDay/index.js"() {
    init_addDays();
    init_toDate();
    init_toInteger();
    init_requiredArgs();
    init_defaultOptions();
  }
});

// node_modules/date-fns/esm/setDayOfYear/index.js
var init_setDayOfYear = __esm({
  "node_modules/date-fns/esm/setDayOfYear/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setDefaultOptions/index.js
var init_setDefaultOptions = __esm({
  "node_modules/date-fns/esm/setDefaultOptions/index.js"() {
    init_defaultOptions();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setHours/index.js
var init_setHours = __esm({
  "node_modules/date-fns/esm/setHours/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setISODay/index.js
var init_setISODay = __esm({
  "node_modules/date-fns/esm/setISODay/index.js"() {
    init_toInteger();
    init_toDate();
    init_addDays();
    init_getISODay();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setISOWeek/index.js
var init_setISOWeek = __esm({
  "node_modules/date-fns/esm/setISOWeek/index.js"() {
    init_toInteger();
    init_toDate();
    init_getISOWeek();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setMilliseconds/index.js
var init_setMilliseconds = __esm({
  "node_modules/date-fns/esm/setMilliseconds/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setMinutes/index.js
var init_setMinutes = __esm({
  "node_modules/date-fns/esm/setMinutes/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setQuarter/index.js
var init_setQuarter = __esm({
  "node_modules/date-fns/esm/setQuarter/index.js"() {
    init_toInteger();
    init_toDate();
    init_setMonth();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setSeconds/index.js
var init_setSeconds = __esm({
  "node_modules/date-fns/esm/setSeconds/index.js"() {
    init_toInteger();
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/setWeek/index.js
var init_setWeek = __esm({
  "node_modules/date-fns/esm/setWeek/index.js"() {
    init_getWeek();
    init_toDate();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/setWeekYear/index.js
var init_setWeekYear = __esm({
  "node_modules/date-fns/esm/setWeekYear/index.js"() {
    init_differenceInCalendarDays();
    init_startOfWeekYear();
    init_toDate();
    init_toInteger();
    init_requiredArgs();
    init_defaultOptions();
  }
});

// node_modules/date-fns/esm/startOfDecade/index.js
var init_startOfDecade = __esm({
  "node_modules/date-fns/esm/startOfDecade/index.js"() {
    init_toDate();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/startOfToday/index.js
var init_startOfToday = __esm({
  "node_modules/date-fns/esm/startOfToday/index.js"() {
    init_startOfDay();
  }
});

// node_modules/date-fns/esm/startOfTomorrow/index.js
var init_startOfTomorrow = __esm({
  "node_modules/date-fns/esm/startOfTomorrow/index.js"() {
  }
});

// node_modules/date-fns/esm/startOfYesterday/index.js
var init_startOfYesterday = __esm({
  "node_modules/date-fns/esm/startOfYesterday/index.js"() {
  }
});

// node_modules/date-fns/esm/sub/index.js
var init_sub = __esm({
  "node_modules/date-fns/esm/sub/index.js"() {
    init_typeof();
    init_subDays();
    init_subMonths();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/subBusinessDays/index.js
var init_subBusinessDays = __esm({
  "node_modules/date-fns/esm/subBusinessDays/index.js"() {
    init_addBusinessDays();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/subHours/index.js
var init_subHours = __esm({
  "node_modules/date-fns/esm/subHours/index.js"() {
    init_addHours();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/subMinutes/index.js
var init_subMinutes = __esm({
  "node_modules/date-fns/esm/subMinutes/index.js"() {
    init_addMinutes();
    init_requiredArgs();
    init_toInteger();
  }
});

// node_modules/date-fns/esm/subQuarters/index.js
var init_subQuarters = __esm({
  "node_modules/date-fns/esm/subQuarters/index.js"() {
    init_toInteger();
    init_addQuarters();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/subSeconds/index.js
var init_subSeconds = __esm({
  "node_modules/date-fns/esm/subSeconds/index.js"() {
    init_toInteger();
    init_addSeconds();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/subWeeks/index.js
var init_subWeeks = __esm({
  "node_modules/date-fns/esm/subWeeks/index.js"() {
    init_toInteger();
    init_addWeeks();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/subYears/index.js
var init_subYears = __esm({
  "node_modules/date-fns/esm/subYears/index.js"() {
    init_toInteger();
    init_addYears();
    init_requiredArgs();
  }
});

// node_modules/date-fns/esm/weeksToDays/index.js
var init_weeksToDays = __esm({
  "node_modules/date-fns/esm/weeksToDays/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/yearsToMonths/index.js
var init_yearsToMonths = __esm({
  "node_modules/date-fns/esm/yearsToMonths/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/yearsToQuarters/index.js
var init_yearsToQuarters = __esm({
  "node_modules/date-fns/esm/yearsToQuarters/index.js"() {
    init_requiredArgs();
    init_constants();
  }
});

// node_modules/date-fns/esm/index.js
var init_esm = __esm({
  "node_modules/date-fns/esm/index.js"() {
    init_add();
    init_addBusinessDays();
    init_addDays();
    init_addHours();
    init_addISOWeekYears();
    init_addMilliseconds();
    init_addMinutes();
    init_addMonths();
    init_addQuarters();
    init_addSeconds();
    init_addWeeks();
    init_addYears();
    init_areIntervalsOverlapping();
    init_clamp();
    init_closestIndexTo();
    init_closestTo();
    init_compareAsc();
    init_compareDesc();
    init_daysToWeeks();
    init_differenceInBusinessDays();
    init_differenceInCalendarDays();
    init_differenceInCalendarISOWeekYears();
    init_differenceInCalendarISOWeeks();
    init_differenceInCalendarMonths();
    init_differenceInCalendarQuarters();
    init_differenceInCalendarWeeks();
    init_differenceInCalendarYears();
    init_differenceInDays();
    init_differenceInHours();
    init_differenceInISOWeekYears();
    init_differenceInMilliseconds();
    init_differenceInMinutes();
    init_differenceInMonths();
    init_differenceInQuarters();
    init_differenceInSeconds();
    init_differenceInWeeks();
    init_differenceInYears();
    init_eachDayOfInterval();
    init_eachHourOfInterval();
    init_eachMinuteOfInterval();
    init_eachMonthOfInterval();
    init_eachQuarterOfInterval();
    init_eachWeekOfInterval();
    init_eachWeekendOfInterval();
    init_eachWeekendOfMonth();
    init_eachWeekendOfYear();
    init_eachYearOfInterval();
    init_endOfDay();
    init_endOfDecade();
    init_endOfHour();
    init_endOfISOWeek();
    init_endOfISOWeekYear();
    init_endOfMinute();
    init_endOfMonth();
    init_endOfQuarter();
    init_endOfSecond();
    init_endOfToday();
    init_endOfTomorrow();
    init_endOfWeek();
    init_endOfYear();
    init_endOfYesterday();
    init_format();
    init_formatDistance6();
    init_formatDistanceStrict();
    init_formatDistanceToNow();
    init_formatDistanceToNowStrict();
    init_formatDuration();
    init_formatISO();
    init_formatISO9075();
    init_formatISODuration();
    init_formatRFC3339();
    init_formatRFC7231();
    init_formatRelative5();
    init_fromUnixTime();
    init_getDate();
    init_getDay();
    init_getDayOfYear();
    init_getDaysInMonth();
    init_getDaysInYear();
    init_getDecade();
    init_getDefaultOptions();
    init_getHours();
    init_getISODay();
    init_getISOWeek();
    init_getISOWeekYear();
    init_getISOWeeksInYear();
    init_getMilliseconds();
    init_getMinutes();
    init_getMonth();
    init_getOverlappingDaysInIntervals();
    init_getQuarter();
    init_getSeconds();
    init_getTime();
    init_getUnixTime();
    init_getWeek();
    init_getWeekOfMonth();
    init_getWeekYear();
    init_getWeeksInMonth();
    init_getYear();
    init_hoursToMilliseconds();
    init_hoursToMinutes();
    init_hoursToSeconds();
    init_intervalToDuration();
    init_intlFormat();
    init_intlFormatDistance();
    init_isAfter();
    init_isBefore();
    init_isDate();
    init_isEqual();
    init_isExists();
    init_isFirstDayOfMonth();
    init_isFriday();
    init_isFuture();
    init_isLastDayOfMonth();
    init_isLeapYear();
    init_isMatch();
    init_isMonday();
    init_isPast();
    init_isSameDay();
    init_isSameHour();
    init_isSameISOWeek();
    init_isSameISOWeekYear();
    init_isSameMinute();
    init_isSameMonth();
    init_isSameQuarter();
    init_isSameSecond();
    init_isSameWeek();
    init_isSameYear();
    init_isSaturday();
    init_isSunday();
    init_isThisHour();
    init_isThisISOWeek();
    init_isThisMinute();
    init_isThisMonth();
    init_isThisQuarter();
    init_isThisSecond();
    init_isThisWeek();
    init_isThisYear();
    init_isThursday();
    init_isToday();
    init_isTomorrow();
    init_isTuesday();
    init_isValid();
    init_isWednesday();
    init_isWeekend();
    init_isWithinInterval();
    init_isYesterday();
    init_lastDayOfDecade();
    init_lastDayOfISOWeek();
    init_lastDayOfISOWeekYear();
    init_lastDayOfMonth();
    init_lastDayOfQuarter();
    init_lastDayOfWeek();
    init_lastDayOfYear();
    init_lightFormat();
    init_max();
    init_milliseconds();
    init_millisecondsToHours();
    init_millisecondsToMinutes();
    init_millisecondsToSeconds();
    init_min();
    init_minutesToHours();
    init_minutesToMilliseconds();
    init_minutesToSeconds();
    init_monthsToQuarters();
    init_monthsToYears();
    init_nextDay();
    init_nextFriday();
    init_nextMonday();
    init_nextSaturday();
    init_nextSunday();
    init_nextThursday();
    init_nextTuesday();
    init_nextWednesday();
    init_parse();
    init_parseISO();
    init_parseJSON();
    init_previousDay();
    init_previousFriday();
    init_previousMonday();
    init_previousSaturday();
    init_previousSunday();
    init_previousThursday();
    init_previousTuesday();
    init_previousWednesday();
    init_quartersToMonths();
    init_quartersToYears();
    init_roundToNearestMinutes();
    init_secondsToHours();
    init_secondsToMilliseconds();
    init_secondsToMinutes();
    init_set();
    init_setDate();
    init_setDay();
    init_setDayOfYear();
    init_setDefaultOptions();
    init_setHours();
    init_setISODay();
    init_setISOWeek();
    init_setISOWeekYear();
    init_setMilliseconds();
    init_setMinutes();
    init_setMonth();
    init_setQuarter();
    init_setSeconds();
    init_setWeek();
    init_setWeekYear();
    init_setYear();
    init_startOfDay();
    init_startOfDecade();
    init_startOfHour();
    init_startOfISOWeek();
    init_startOfISOWeekYear();
    init_startOfMinute();
    init_startOfMonth();
    init_startOfQuarter();
    init_startOfSecond();
    init_startOfToday();
    init_startOfTomorrow();
    init_startOfWeek();
    init_startOfWeekYear();
    init_startOfYear();
    init_startOfYesterday();
    init_sub();
    init_subBusinessDays();
    init_subDays();
    init_subHours();
    init_subISOWeekYears();
    init_subMilliseconds();
    init_subMinutes();
    init_subMonths();
    init_subQuarters();
    init_subSeconds();
    init_subWeeks();
    init_subYears();
    init_toDate();
    init_weeksToDays();
    init_yearsToMonths();
    init_yearsToQuarters();
    init_constants();
  }
});

// node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js
function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);
  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}
var init_isSameUTCWeek = __esm({
  "node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js"() {
    init_requiredArgs();
    init_startOfUTCWeek();
  }
});

// node_modules/date-fns/esm/locale/be/_lib/formatRelative/index.js
function lastWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –º—ñ–Ω—É–ª—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –º—ñ–Ω—É–ª—ã " + weekday + " –∞' p";
  }
}
function thisWeek(day) {
  var weekday = accusativeWeekdays[day];
  return "'—É " + weekday + " –∞' p";
}
function nextWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—É—é " + weekday + " –∞' p";
    case 1:
    case 2:
    case 4:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—ã " + weekday + " –∞' p";
  }
}
var accusativeWeekdays, lastWeekFormat, nextWeekFormat, formatRelativeLocale4, formatRelative8, formatRelative_default5;
var init_formatRelative6 = __esm({
  "node_modules/date-fns/esm/locale/be/_lib/formatRelative/index.js"() {
    init_esm();
    init_isSameUTCWeek();
    accusativeWeekdays = ["–Ω—è–¥–∑–µ–ª—é", "–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫", "–∞—û—Ç–æ—Ä–∞–∫", "—Å–µ—Ä–∞–¥—É", "—á–∞—Ü–≤–µ—Ä", "–ø—è—Ç–Ω—ñ—Ü—É", "—Å—É–±–æ—Ç—É"];
    lastWeekFormat = function lastWeekFormat2(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return lastWeek(day);
      }
    };
    nextWeekFormat = function nextWeekFormat2(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return nextWeek(day);
      }
    };
    formatRelativeLocale4 = {
      lastWeek: lastWeekFormat,
      yesterday: "'—É—á–æ—Ä–∞ –∞' p",
      today: "'—Å—ë–Ω–Ω—è –∞' p",
      tomorrow: "'–∑–∞—û—Ç—Ä–∞ –∞' p",
      nextWeek: nextWeekFormat,
      other: "P"
    };
    formatRelative8 = function formatRelative9(token, date, baseDate, options) {
      var format2 = formatRelativeLocale4[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default5 = formatRelative8;
  }
});

// node_modules/date-fns/esm/locale/be/_lib/localize/index.js
var eraValues4, quarterValues4, monthValues4, formattingMonthValues, dayValues4, dayPeriodValues4, formattingDayPeriodValues4, ordinalNumber7, localize4, localize_default5;
var init_localize5 = __esm({
  "node_modules/date-fns/esm/locale/be/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues4 = {
      narrow: ["–¥–∞ –Ω.—ç.", "–Ω.—ç."],
      abbreviated: ["–¥–∞ –Ω. —ç.", "–Ω. —ç."],
      wide: ["–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã", "–Ω–∞—à–∞–π —ç—Ä—ã"]
    };
    quarterValues4 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-—ã –∫–≤.", "2-—ñ –∫–≤.", "3-—ñ –∫–≤.", "4-—ã –∫–≤."],
      wide: ["1-—ã –∫–≤–∞—Ä—Ç–∞–ª", "2-—ñ –∫–≤–∞—Ä—Ç–∞–ª", "3-—ñ –∫–≤–∞—Ä—Ç–∞–ª", "4-—ã –∫–≤–∞—Ä—Ç–∞–ª"]
    };
    monthValues4 = {
      narrow: ["–°", "–õ", "–°", "–ö", "–ú", "–ß", "–õ", "–ñ", "–í", "–ö", "–õ", "–°"],
      abbreviated: ["—Å—Ç—É–¥–∑.", "–ª—é—Ç.", "—Å–∞–∫.", "–∫—Ä–∞—Å.", "–º–∞–π", "—á—ç—Ä–≤.", "–ª—ñ–ø.", "–∂–Ω.", "–≤–µ—Ä.", "–∫–∞—Å—Ç—Ä.", "–ª—ñ—Å—Ç.", "—Å–Ω–µ–∂."],
      wide: ["—Å—Ç—É–¥–∑–µ–Ω—å", "–ª—é—Ç—ã", "—Å–∞–∫–∞–≤—ñ–∫", "–∫—Ä–∞—Å–∞–≤—ñ–∫", "–º–∞–π", "—á—ç—Ä–≤–µ–Ω—å", "–ª—ñ–ø–µ–Ω—å", "–∂–Ω—ñ–≤–µ–Ω—å", "–≤–µ—Ä–∞—Å–µ–Ω—å", "–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫", "–ª—ñ—Å—Ç–∞–ø–∞–¥", "—Å–Ω–µ–∂–∞–Ω—å"]
    };
    formattingMonthValues = {
      narrow: ["–°", "–õ", "–°", "–ö", "–ú", "–ß", "–õ", "–ñ", "–í", "–ö", "–õ", "–°"],
      abbreviated: ["—Å—Ç—É–¥–∑.", "–ª—é—Ç.", "—Å–∞–∫.", "–∫—Ä–∞—Å.", "–º–∞—è", "—á—ç—Ä–≤.", "–ª—ñ–ø.", "–∂–Ω.", "–≤–µ—Ä.", "–∫–∞—Å—Ç—Ä.", "–ª—ñ—Å—Ç.", "—Å–Ω–µ–∂."],
      wide: ["—Å—Ç—É–¥–∑–µ–Ω—è", "–ª—é—Ç–∞–≥–∞", "—Å–∞–∫–∞–≤—ñ–∫–∞", "–∫—Ä–∞—Å–∞–≤—ñ–∫–∞", "–º–∞—è", "—á—ç—Ä–≤–µ–Ω—è", "–ª—ñ–ø–µ–Ω—è", "–∂–Ω—ñ—û–Ω—è", "–≤–µ—Ä–∞—Å–Ω—è", "–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞", "–ª—ñ—Å—Ç–∞–ø–∞–¥–∞", "—Å–Ω–µ–∂–Ω—è"]
    };
    dayValues4 = {
      narrow: ["–ù", "–ü", "–ê", "–°", "–ß", "–ü", "–°"],
      short: ["–Ω–¥", "–ø–Ω", "–∞—û", "—Å—Ä", "—á—Ü", "–ø—Ç", "—Å–±"],
      abbreviated: ["–Ω—è–¥–∑", "–ø–∞–Ω", "–∞—û—Ç", "—Å–µ—Ä", "—á–∞—Ü", "–ø—è—Ç", "—Å—É–±"],
      wide: ["–Ω—è–¥–∑–µ–ª—è", "–ø–∞–Ω—è–¥–∑–µ–ª–∞–∫", "–∞—û—Ç–æ—Ä–∞–∫", "—Å–µ—Ä–∞–¥–∞", "—á–∞—Ü–≤–µ—Ä", "–ø—è—Ç–Ω—ñ—Ü–∞", "—Å—É–±–æ—Ç–∞"]
    };
    dayPeriodValues4 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω.",
        noon: "–ø–æ—û–¥.",
        morning: "—Ä–∞–Ω.",
        afternoon: "–¥–∑–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω.",
        noon: "–ø–æ—û–¥.",
        morning: "—Ä–∞–Ω.",
        afternoon: "–¥–∑–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω–∞—á",
        noon: "–ø–æ—û–¥–∑–µ–Ω—å",
        morning: "—Ä–∞–Ω—ñ—Ü–∞",
        afternoon: "–¥–∑–µ–Ω—å",
        evening: "–≤–µ—á–∞—Ä",
        night: "–Ω–æ—á"
      }
    };
    formattingDayPeriodValues4 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω.",
        noon: "–ø–æ—û–¥.",
        morning: "—Ä–∞–Ω.",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—ã"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω.",
        noon: "–ø–æ—û–¥.",
        morning: "—Ä–∞–Ω.",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—ã"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ—û–Ω–∞—á",
        noon: "–ø–æ—û–¥–∑–µ–Ω—å",
        morning: "—Ä–∞–Ω—ñ—Ü—ã",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á–∞—Ä–∞",
        night: "–Ω–æ—á—ã"
      }
    };
    ordinalNumber7 = function ordinalNumber8(dirtyNumber, options) {
      var unit = String(options === null || options === void 0 ? void 0 : options.unit);
      var number = Number(dirtyNumber);
      var suffix;
      if (unit === "date") {
        suffix = "-–≥–∞";
      } else if (unit === "hour" || unit === "minute" || unit === "second") {
        suffix = "-—è";
      } else {
        suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-—ñ" : "-—ã";
      }
      return number + suffix;
    };
    localize4 = {
      ordinalNumber: ordinalNumber7,
      era: buildLocalizeFn({
        values: eraValues4,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues4,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback4(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues4,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues4,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues4,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues4,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default5 = localize4;
  }
});

// node_modules/date-fns/esm/locale/be/_lib/match/index.js
var matchOrdinalNumberPattern4, parseOrdinalNumberPattern4, matchEraPatterns4, parseEraPatterns4, matchQuarterPatterns4, parseQuarterPatterns4, matchMonthPatterns4, parseMonthPatterns4, matchDayPatterns4, parseDayPatterns4, matchDayPeriodPatterns4, parseDayPeriodPatterns4, match4, match_default5;
var init_match5 = __esm({
  "node_modules/date-fns/esm/locale/be/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern4 = /^(\d+)(-?(–µ|—è|–≥–∞|—ñ|—ã|–∞–µ|–∞—è|—è—è|—à—ã|–≥—ñ|—Ü—ñ|—Ç—ã|–º—ã))?/i;
    parseOrdinalNumberPattern4 = /\d+/i;
    matchEraPatterns4 = {
      narrow: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
      abbreviated: /^((–¥–∞ )?–Ω\.?\s?—ç\.?)/i,
      wide: /^(–¥–∞ –Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞–π —ç—Ä—ã|–Ω–∞—à–∞ —ç—Ä–∞)/i
    };
    parseEraPatterns4 = {
      any: [/^–¥/i, /^–Ω/i]
    };
    matchQuarterPatterns4 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[—ã—ñ]?)? –∫–≤.?/i,
      wide: /^[1234](-?[—ã—ñ]?)? –∫–≤–∞—Ä—Ç–∞–ª/i
    };
    parseQuarterPatterns4 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns4 = {
      narrow: /^[—Å–ª–∫–º—á–∂–≤]/i,
      abbreviated: /^(—Å—Ç—É–¥–∑|–ª—é—Ç|—Å–∞–∫|–∫—Ä–∞—Å|–º–∞[–π—è]|—á—ç—Ä–≤|–ª—ñ–ø|–∂–Ω|–≤–µ—Ä|–∫–∞—Å—Ç—Ä|–ª—ñ—Å—Ç|—Å–Ω–µ–∂)\.?/i,
      wide: /^(—Å—Ç—É–¥–∑–µ–Ω[—å—è]|–ª—é—Ç(—ã|–∞–≥–∞)|—Å–∞–∫–∞–≤—ñ–∫–∞?|–∫—Ä–∞—Å–∞–≤—ñ–∫–∞?|–º–∞[–π—è]|—á—ç—Ä–≤–µ–Ω[—å—è]|–ª—ñ–ø–µ–Ω[—å—è]|–∂–Ω—ñ(–≤–µ–Ω—å|—û–Ω—è)|–≤–µ—Ä–∞—Å(–µ–Ω—å|–Ω—è)|–∫–∞—Å—Ç—Ä—ã—á–Ω—ñ–∫–∞?|–ª—ñ—Å—Ç–∞–ø–∞–¥–∞?|—Å–Ω–µ–∂(–∞–Ω—å|–Ω—è))/i
    };
    parseMonthPatterns4 = {
      narrow: [/^—Å/i, /^–ª/i, /^—Å/i, /^–∫/i, /^–º/i, /^—á/i, /^–ª/i, /^–∂/i, /^–≤/i, /^–∫/i, /^–ª/i, /^—Å/i],
      any: [/^—Å—Ç/i, /^–ª—é/i, /^—Å–∞/i, /^–∫—Ä/i, /^–º–∞/i, /^—á/i, /^–ª—ñ–ø/i, /^–∂/i, /^–≤/i, /^–∫–∞/i, /^–ª—ñ—Å/i, /^—Å–Ω/i]
    };
    matchDayPatterns4 = {
      narrow: /^[–Ω–ø–∞—Å—á]/i,
      short: /^(–Ω–¥|–Ω—è|–ø–Ω|–ø–∞|–∞—û|–∞—Ç|—Å—Ä|—Å–µ|—á—Ü|—á–∞|–ø—Ç|–ø—è|—Å–±|—Å—É)\.?/i,
      abbreviated: /^(–Ω—è–¥–∑?|–Ω–¥–∑|–ø–Ω–¥|–ø–∞–Ω|–∞—û—Ç|—Å—Ä–¥|—Å–µ—Ä|—á—Ü–≤|—á–∞—Ü|–ø—Ç–Ω|–ø—è—Ç|—Å—É–±).?/i,
      wide: /^(–Ω—è–¥–∑–µ–ª[—è—ñ]|–ø–∞–Ω—è–¥–∑–µ–ª(–∞–∫|–∫–∞)|–∞—û—Ç–æ—Ä(–∞–∫|–∫–∞)|—Å–µ—Ä–∞–¥[–∞—ã]|—á–∞—Ü–≤(–µ—Ä|—è—Ä–≥–∞)|–ø—è—Ç–Ω—ñ—Ü[–∞—ã]|—Å—É–±–æ—Ç[–∞—ã])/i
    };
    parseDayPatterns4 = {
      narrow: [/^–Ω/i, /^–ø/i, /^–∞/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
      any: [/^–Ω/i, /^–ø[–∞–Ω]/i, /^–∞/i, /^—Å[–µ—Ä]/i, /^—á/i, /^–ø[—è—Ç]/i, /^—Å[—É–±]/i]
    };
    matchDayPeriodPatterns4 = {
      narrow: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
      abbreviated: /^([–¥–ø]–ø|–ø–æ—û–Ω\.?|–ø–æ—û–¥\.?|—Ä–∞–Ω\.?|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á—ã?)/i,
      wide: /^([–¥–ø]–ø|–ø–æ—û–Ω–∞—á|–ø–æ—û–¥–∑–µ–Ω—å|—Ä–∞–Ω—ñ—Ü[–∞—ã]|–¥–∑–µ–Ω—å|–¥–Ω—è|–≤–µ—á–∞—Ä–∞?|–Ω–æ—á—ã?)/i
    };
    parseDayPeriodPatterns4 = {
      any: {
        am: /^–¥–ø/i,
        pm: /^–ø–ø/i,
        midnight: /^–ø–æ—û–Ω/i,
        noon: /^–ø–æ—û–¥/i,
        morning: /^—Ä/i,
        afternoon: /^–¥[–∑–Ω]/i,
        evening: /^–≤/i,
        night: /^–Ω/i
      }
    };
    match4 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern4,
        parsePattern: parseOrdinalNumberPattern4,
        valueCallback: function valueCallback7(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns4,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns4,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns4,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns4,
        defaultParseWidth: "any",
        valueCallback: function valueCallback8(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns4,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns4,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns4,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns4,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns4,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns4,
        defaultParseWidth: "any"
      })
    };
    match_default5 = match4;
  }
});

// node_modules/date-fns/esm/locale/be/index.js
var be_exports = {};
__export(be_exports, {
  default: () => be_default
});
var locale4, be_default;
var init_be = __esm({
  "node_modules/date-fns/esm/locale/be/index.js"() {
    init_formatDistance5();
    init_formatLong4();
    init_formatRelative6();
    init_localize5();
    init_match5();
    locale4 = {
      code: "be",
      formatDistance: formatDistance_default5,
      formatLong: formatLong_default4,
      formatRelative: formatRelative_default5,
      localize: localize_default5,
      match: match_default5,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    be_default = locale4;
  }
});

// node_modules/date-fns/esm/locale/bg/_lib/formatDistance/index.js
var formatDistanceLocale5, formatDistance10, formatDistance_default6;
var init_formatDistance7 = __esm({
  "node_modules/date-fns/esm/locale/bg/_lib/formatDistance/index.js"() {
    formatDistanceLocale5 = {
      lessThanXSeconds: {
        one: "–ø–æ-–º–∞–ª–∫–æ –æ—Ç —Å–µ–∫—É–Ω–¥–∞",
        other: "–ø–æ-–º–∞–ª–∫–æ –æ—Ç {{count}} —Å–µ–∫—É–Ω–¥–∏"
      },
      xSeconds: {
        one: "1 —Å–µ–∫—É–Ω–¥–∞",
        other: "{{count}} —Å–µ–∫—É–Ω–¥–∏"
      },
      halfAMinute: "–ø–æ–ª–æ–≤–∏–Ω –º–∏–Ω—É—Ç–∞",
      lessThanXMinutes: {
        one: "–ø–æ-–º–∞–ª–∫–æ –æ—Ç –º–∏–Ω—É—Ç–∞",
        other: "–ø–æ-–º–∞–ª–∫–æ –æ—Ç {{count}} –º–∏–Ω—É—Ç–∏"
      },
      xMinutes: {
        one: "1 –º–∏–Ω—É—Ç–∞",
        other: "{{count}} –º–∏–Ω—É—Ç–∏"
      },
      aboutXHours: {
        one: "–æ–∫–æ–ª–æ —á–∞—Å",
        other: "–æ–∫–æ–ª–æ {{count}} —á–∞—Å–∞"
      },
      xHours: {
        one: "1 —á–∞—Å",
        other: "{{count}} —á–∞—Å–∞"
      },
      xDays: {
        one: "1 –¥–µ–Ω",
        other: "{{count}} –¥–Ω–∏"
      },
      aboutXWeeks: {
        one: "–æ–∫–æ–ª–æ —Å–µ–¥–º–∏—Ü–∞",
        other: "–æ–∫–æ–ª–æ {{count}} —Å–µ–¥–º–∏—Ü–∏"
      },
      xWeeks: {
        one: "1 —Å–µ–¥–º–∏—Ü–∞",
        other: "{{count}} —Å–µ–¥–º–∏—Ü–∏"
      },
      aboutXMonths: {
        one: "–æ–∫–æ–ª–æ –º–µ—Å–µ—Ü",
        other: "–æ–∫–æ–ª–æ {{count}} –º–µ—Å–µ—Ü–∞"
      },
      xMonths: {
        one: "1 –º–µ—Å–µ—Ü",
        other: "{{count}} –º–µ—Å–µ—Ü–∞"
      },
      aboutXYears: {
        one: "–æ–∫–æ–ª–æ –≥–æ–¥–∏–Ω–∞",
        other: "–æ–∫–æ–ª–æ {{count}} –≥–æ–¥–∏–Ω–∏"
      },
      xYears: {
        one: "1 –≥–æ–¥–∏–Ω–∞",
        other: "{{count}} –≥–æ–¥–∏–Ω–∏"
      },
      overXYears: {
        one: "–Ω–∞–¥ –≥–æ–¥–∏–Ω–∞",
        other: "–Ω–∞–¥ {{count}} –≥–æ–¥–∏–Ω–∏"
      },
      almostXYears: {
        one: "–ø–æ—á—Ç–∏ –≥–æ–¥–∏–Ω–∞",
        other: "–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥–∏–Ω–∏"
      }
    };
    formatDistance10 = function formatDistance11(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale5[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "—Å–ª–µ–¥ " + result;
        } else {
          return "–ø—Ä–µ–¥–∏ " + result;
        }
      }
      return result;
    };
    formatDistance_default6 = formatDistance10;
  }
});

// node_modules/date-fns/esm/locale/bg/_lib/formatLong/index.js
var dateFormats5, timeFormats5, dateTimeFormats5, formatLong5, formatLong_default5;
var init_formatLong5 = __esm({
  "node_modules/date-fns/esm/locale/bg/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats5 = {
      full: "EEEE, dd MMMM yyyy",
      long: "dd MMMM yyyy",
      medium: "dd MMM yyyy",
      short: "dd/MM/yyyy"
    };
    timeFormats5 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats5 = {
      any: "{{date}} {{time}}"
    };
    formatLong5 = {
      date: buildFormatLongFn({
        formats: dateFormats5,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats5,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats5,
        defaultWidth: "any"
      })
    };
    formatLong_default5 = formatLong5;
  }
});

// node_modules/date-fns/esm/locale/bg/_lib/formatRelative/index.js
function lastWeek2(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'–º–∏–Ω–∞–ª–∞—Ç–∞ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'–º–∏–Ω–∞–ª–∏—è " + weekday + " –≤' p";
  }
}
function thisWeek2(day) {
  var weekday = weekdays[day];
  if (day === 2) {
    return "'–≤—ä–≤ " + weekday + " –≤' p";
  } else {
    return "'–≤ " + weekday + " –≤' p";
  }
}
function nextWeek2(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'—Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'—Å–ª–µ–¥–≤–∞—â–∏—è " + weekday + " –≤' p";
  }
}
var weekdays, lastWeekFormatToken, nextWeekFormatToken, formatRelativeLocale5, formatRelative10, formatRelative_default6;
var init_formatRelative7 = __esm({
  "node_modules/date-fns/esm/locale/bg/_lib/formatRelative/index.js"() {
    init_toDate();
    init_isSameUTCWeek();
    weekdays = ["–Ω–µ–¥–µ–ª—è", "–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä—è–¥–∞", "—á–µ—Ç–≤—ä—Ä—Ç—ä–∫", "–ø–µ—Ç—ä–∫", "—Å—ä–±–æ—Ç–∞"];
    lastWeekFormatToken = function lastWeekFormatToken2(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek2(day);
      } else {
        return lastWeek2(day);
      }
    };
    nextWeekFormatToken = function nextWeekFormatToken2(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek2(day);
      } else {
        return nextWeek2(day);
      }
    };
    formatRelativeLocale5 = {
      lastWeek: lastWeekFormatToken,
      yesterday: "'–≤—á–µ—Ä–∞ –≤' p",
      today: "'–¥–Ω–µ—Å –≤' p",
      tomorrow: "'—É—Ç—Ä–µ –≤' p",
      nextWeek: nextWeekFormatToken,
      other: "P"
    };
    formatRelative10 = function formatRelative11(token, date, baseDate, options) {
      var format2 = formatRelativeLocale5[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default6 = formatRelative10;
  }
});

// node_modules/date-fns/esm/locale/bg/_lib/localize/index.js
function isFeminine(unit) {
  return unit === "year" || unit === "week" || unit === "minute" || unit === "second";
}
function isNeuter(unit) {
  return unit === "quarter";
}
function numberWithSuffix(number, unit, masculine, feminine, neuter) {
  var suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
  return number + "-" + suffix;
}
var eraValues5, quarterValues5, monthValues5, dayValues5, dayPeriodValues5, ordinalNumber9, localize5, localize_default6;
var init_localize6 = __esm({
  "node_modules/date-fns/esm/locale/bg/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues5 = {
      narrow: ["–ø—Ä.–Ω.–µ.", "–Ω.–µ."],
      abbreviated: ["–ø—Ä–µ–¥–∏ –Ω. –µ.", "–Ω. –µ."],
      wide: ["–ø—Ä–µ–¥–∏ –Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞", "–Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞"]
    };
    quarterValues5 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-–≤–æ —Ç—Ä–∏–º–µ—Å.", "2-—Ä–æ —Ç—Ä–∏–º–µ—Å.", "3-—Ç–æ —Ç—Ä–∏–º–µ—Å.", "4-—Ç–æ —Ç—Ä–∏–º–µ—Å."],
      wide: ["1-–≤–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ", "2-—Ä–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ", "3-—Ç–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ", "4-—Ç–æ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ"]
    };
    monthValues5 = {
      abbreviated: ["—è–Ω—É", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "—é–Ω–∏", "—é–ª–∏", "–∞–≤–≥", "—Å–µ–ø", "–æ–∫—Ç", "–Ω–æ–µ", "–¥–µ–∫"],
      wide: ["—è–Ω—É–∞—Ä–∏", "—Ñ–µ–≤—Ä—É–∞—Ä–∏", "–º–∞—Ä—Ç", "–∞–ø—Ä–∏–ª", "–º–∞–π", "—é–Ω–∏", "—é–ª–∏", "–∞–≤–≥—É—Å—Ç", "—Å–µ–ø—Ç–µ–º–≤—Ä–∏", "–æ–∫—Ç–æ–º–≤—Ä–∏", "–Ω–æ–µ–º–≤—Ä–∏", "–¥–µ–∫–µ–º–≤—Ä–∏"]
    };
    dayValues5 = {
      narrow: ["–ù", "–ü", "–í", "–°", "–ß", "–ü", "–°"],
      short: ["–Ω–¥", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"],
      abbreviated: ["–Ω–µ–¥", "–ø–æ–Ω", "–≤—Ç–æ", "—Å—Ä—è", "—á–µ—Ç", "–ø–µ—Ç", "—Å—ä–±"],
      wide: ["–Ω–µ–¥–µ–ª—è", "–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä—è–¥–∞", "—á–µ—Ç–≤—ä—Ä—Ç—ä–∫", "–ø–µ—Ç—ä–∫", "—Å—ä–±–æ—Ç–∞"]
    };
    dayPeriodValues5 = {
      wide: {
        am: "–ø—Ä–µ–¥–∏ –æ–±—è–¥",
        pm: "—Å–ª–µ–¥ –æ–±—è–¥",
        midnight: "–≤ –ø–æ–ª—É–Ω–æ—â",
        noon: "–Ω–∞ –æ–±—è–¥",
        morning: "—Å—É—Ç—Ä–∏–Ω—Ç–∞",
        afternoon: "—Å–ª–µ–¥–æ–±–µ–¥",
        evening: "–≤–µ—á–µ—Ä—Ç–∞",
        night: "–ø—Ä–µ–∑ –Ω–æ—â—Ç–∞"
      }
    };
    ordinalNumber9 = function ordinalNumber10(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      if (number === 0) {
        return numberWithSuffix(0, unit, "–µ–≤", "–µ–≤–∞", "–µ–≤–æ");
      } else if (number % 1e3 === 0) {
        return numberWithSuffix(number, unit, "–µ–Ω", "–Ω–∞", "–Ω–æ");
      } else if (number % 100 === 0) {
        return numberWithSuffix(number, unit, "—Ç–µ–Ω", "—Ç–Ω–∞", "—Ç–Ω–æ");
      }
      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return numberWithSuffix(number, unit, "–≤–∏", "–≤–∞", "–≤–æ");
          case 2:
            return numberWithSuffix(number, unit, "—Ä–∏", "—Ä–∞", "—Ä–æ");
          case 7:
          case 8:
            return numberWithSuffix(number, unit, "–º–∏", "–º–∞", "–º–æ");
        }
      }
      return numberWithSuffix(number, unit, "—Ç–∏", "—Ç–∞", "—Ç–æ");
    };
    localize5 = {
      ordinalNumber: ordinalNumber9,
      era: buildLocalizeFn({
        values: eraValues5,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues5,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback5(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues5,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues5,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues5,
        defaultWidth: "wide"
      })
    };
    localize_default6 = localize5;
  }
});

// node_modules/date-fns/esm/locale/bg/_lib/match/index.js
var matchOrdinalNumberPattern5, parseOrdinalNumberPattern5, matchEraPatterns5, parseEraPatterns5, matchQuarterPatterns5, parseQuarterPatterns5, matchDayPatterns5, parseDayPatterns5, matchMonthPatterns5, parseMonthPatterns5, matchDayPeriodPatterns5, parseDayPeriodPatterns5, match5, match_default6;
var init_match6 = __esm({
  "node_modules/date-fns/esm/locale/bg/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern5 = /^(\d+)(-?[–≤—Ä–º—Ç][–∞–∏]|-?—Ç?(–µ–Ω|–Ω–∞)|-?(–µ–≤|–µ–≤–∞))?/i;
    parseOrdinalNumberPattern5 = /\d+/i;
    matchEraPatterns5 = {
      narrow: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
      abbreviated: /^((–ø—Ä)?–Ω\.?\s?–µ\.?)/i,
      wide: /^(–ø—Ä–µ–¥–∏ –Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞|–Ω–æ–≤–∞—Ç–∞ –µ—Ä–∞|–Ω–æ–≤–∞ –µ—Ä–∞)/i
    };
    parseEraPatterns5 = {
      any: [/^–ø/i, /^–Ω/i]
    };
    matchQuarterPatterns5 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[–≤—Ä—Ç]?o?)? —Ç—Ä–∏–º–µ—Å.?/i,
      wide: /^[1234](-?[–≤—Ä—Ç]?–æ?)? —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ/i
    };
    parseQuarterPatterns5 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchDayPatterns5 = {
      narrow: /^[–Ω–ø–≤—Å—á]/i,
      short: /^(–Ω–¥|–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)/i,
      abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|–≤—Ç–æ|—Å—Ä—è|—á–µ—Ç|–ø–µ—Ç|—Å—ä–±)/i,
      wide: /^(–Ω–µ–¥–µ–ª—è|–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä—è–¥–∞|—á–µ—Ç–≤—ä—Ä—Ç—ä–∫|–ø–µ—Ç—ä–∫|—Å—ä–±–æ—Ç–∞)/i
    };
    parseDayPatterns5 = {
      narrow: [/^–Ω/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
      any: [/^–Ω[–µ–¥]/i, /^–ø[–æ–Ω]/i, /^–≤—Ç/i, /^—Å—Ä/i, /^—á[–µ—Ç]/i, /^–ø[–µ—Ç]/i, /^—Å[—ä–±]/i]
    };
    matchMonthPatterns5 = {
      abbreviated: /^(—è–Ω—É|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥|—Å–µ–ø|–æ–∫—Ç|–Ω–æ–µ|–¥–µ–∫)/i,
      wide: /^(—è–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)/i
    };
    parseMonthPatterns5 = {
      any: [/^—è/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞–π/i, /^—é–Ω/i, /^—é–ª/i, /^–∞–≤/i, /^—Å–µ/i, /^–æ–∫—Ç/i, /^–Ω–æ/i, /^–¥–µ/i]
    };
    matchDayPeriodPatterns5 = {
      any: /^(–ø—Ä–µ–¥–∏ –æ|—Å–ª–µ–¥ –æ|–≤ –ø–æ|–Ω–∞ –æ|–ø—Ä–µ–∑|–≤–µ—á|—Å—É—Ç|—Å–ª–µ–¥–æ)/i
    };
    parseDayPeriodPatterns5 = {
      any: {
        am: /^–ø—Ä–µ–¥–∏ –æ/i,
        pm: /^—Å–ª–µ–¥ –æ/i,
        midnight: /^–≤ –ø–æ–ª/i,
        noon: /^–Ω–∞ –æ–±/i,
        morning: /^—Å—É—Ç/i,
        afternoon: /^—Å–ª–µ–¥–æ/i,
        evening: /^–≤–µ—á/i,
        night: /^–ø—Ä–µ–∑ –Ω/i
      }
    };
    match5 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern5,
        parsePattern: parseOrdinalNumberPattern5,
        valueCallback: function valueCallback9(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns5,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns5,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns5,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns5,
        defaultParseWidth: "any",
        valueCallback: function valueCallback10(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns5,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns5,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns5,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns5,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns5,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns5,
        defaultParseWidth: "any"
      })
    };
    match_default6 = match5;
  }
});

// node_modules/date-fns/esm/locale/bg/index.js
var bg_exports = {};
__export(bg_exports, {
  default: () => bg_default
});
var locale5, bg_default;
var init_bg = __esm({
  "node_modules/date-fns/esm/locale/bg/index.js"() {
    init_formatDistance7();
    init_formatLong5();
    init_formatRelative7();
    init_localize6();
    init_match6();
    locale5 = {
      code: "bg",
      formatDistance: formatDistance_default6,
      formatLong: formatLong_default5,
      formatRelative: formatRelative_default6,
      localize: localize_default6,
      match: match_default6,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    bg_default = locale5;
  }
});

// node_modules/date-fns/esm/locale/bn/_lib/localize/index.js
function dateOrdinalNumber(number, localeNumber) {
  if (number > 18 && number <= 31) {
    return localeNumber + "‡¶∂‡ßá";
  } else {
    switch (number) {
      case 1:
        return localeNumber + "‡¶≤‡¶æ";
      case 2:
      case 3:
        return localeNumber + "‡¶∞‡¶æ";
      case 4:
        return localeNumber + "‡¶†‡¶æ";
      default:
        return localeNumber + "‡¶á";
    }
  }
}
function numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function(match58) {
    return numberValues.locale[match58];
  });
}
var numberValues, eraValues6, quarterValues6, monthValues6, dayValues6, dayPeriodValues6, formattingDayPeriodValues5, ordinalNumber11, localize6, localize_default7;
var init_localize7 = __esm({
  "node_modules/date-fns/esm/locale/bn/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    numberValues = {
      locale: {
        "1": "‡ßß",
        "2": "‡ß®",
        "3": "‡ß©",
        "4": "‡ß™",
        "5": "‡ß´",
        "6": "‡ß¨",
        "7": "‡ß≠",
        "8": "‡ßÆ",
        "9": "‡ßØ",
        "0": "‡ß¶"
      },
      number: {
        "‡ßß": "1",
        "‡ß®": "2",
        "‡ß©": "3",
        "‡ß™": "4",
        "‡ß´": "5",
        "‡ß¨": "6",
        "‡ß≠": "7",
        "‡ßÆ": "8",
        "‡ßØ": "9",
        "‡ß¶": "0"
      }
    };
    eraValues6 = {
      narrow: ["‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É", "‡¶ñ‡ßç‡¶∞‡¶ø‡¶É"],
      abbreviated: ["‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨", "‡¶ñ‡ßç‡¶∞‡¶ø‡¶É"],
      wide: ["‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨", "‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶"]
    };
    quarterValues6 = {
      narrow: ["‡ßß", "‡ß®", "‡ß©", "‡ß™"],
      abbreviated: ["‡ßß‡¶§‡ßç‡¶∞‡ßà", "‡ß®‡¶§‡ßç‡¶∞‡ßà", "‡ß©‡¶§‡ßç‡¶∞‡ßà", "‡ß™‡¶§‡ßç‡¶∞‡ßà"],
      wide: ["‡ßß‡¶Æ ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï", "‡ß®‡ßü ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï", "‡ß©‡ßü ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï", "‡ß™‡¶∞‡ßç‡¶• ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï"]
    };
    monthValues6 = {
      narrow: ["‡¶ú‡¶æ‡¶®‡ßÅ", "‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ", "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö", "‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤", "‡¶Æ‡ßá", "‡¶ú‡ßÅ‡¶®", "‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á", "‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü", "‡¶∏‡ßá‡¶™‡ßç‡¶ü", "‡¶Ö‡¶ï‡ßç‡¶ü‡ßã", "‡¶®‡¶≠‡ßá", "‡¶°‡¶ø‡¶∏‡ßá"],
      abbreviated: ["‡¶ú‡¶æ‡¶®‡ßÅ", "‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ", "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö", "‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤", "‡¶Æ‡ßá", "‡¶ú‡ßÅ‡¶®", "‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á", "‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü", "‡¶∏‡ßá‡¶™‡ßç‡¶ü", "‡¶Ö‡¶ï‡ßç‡¶ü‡ßã", "‡¶®‡¶≠‡ßá", "‡¶°‡¶ø‡¶∏‡ßá"],
      wide: ["‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø", "‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø", "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö", "‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤", "‡¶Æ‡ßá", "‡¶ú‡ßÅ‡¶®", "‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á", "‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü", "‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞", "‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞", "‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞", "‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞"]
    };
    dayValues6 = {
      narrow: ["‡¶∞", "‡¶∏‡ßã", "‡¶Æ", "‡¶¨‡ßÅ", "‡¶¨‡ßÉ", "‡¶∂‡ßÅ", "‡¶∂"],
      short: ["‡¶∞‡¶¨‡¶ø", "‡¶∏‡ßã‡¶Æ", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤", "‡¶¨‡ßÅ‡¶ß", "‡¶¨‡ßÉ‡¶π", "‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞", "‡¶∂‡¶®‡¶ø"],
      abbreviated: ["‡¶∞‡¶¨‡¶ø", "‡¶∏‡ßã‡¶Æ", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤", "‡¶¨‡ßÅ‡¶ß", "‡¶¨‡ßÉ‡¶π", "‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞", "‡¶∂‡¶®‡¶ø"],
      wide: ["‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞", "‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞", "‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞", "‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ", "‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞", "‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞"]
    };
    dayPeriodValues6 = {
      narrow: {
        am: "‡¶™‡ßÇ",
        pm: "‡¶Ö‡¶™",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      },
      abbreviated: {
        am: "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®",
        pm: "‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      },
      wide: {
        am: "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®",
        pm: "‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      }
    };
    formattingDayPeriodValues5 = {
      narrow: {
        am: "‡¶™‡ßÇ",
        pm: "‡¶Ö‡¶™",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      },
      abbreviated: {
        am: "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®",
        pm: "‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      },
      wide: {
        am: "‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®",
        pm: "‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®",
        midnight: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§",
        noon: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®",
        morning: "‡¶∏‡¶ï‡¶æ‡¶≤",
        afternoon: "‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤",
        evening: "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ",
        night: "‡¶∞‡¶æ‡¶§"
      }
    };
    ordinalNumber11 = function ordinalNumber12(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var localeNumber = numberToLocale(number);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      if (unit === "date") {
        return dateOrdinalNumber(number, localeNumber);
      }
      if (number > 10 || number === 0)
        return localeNumber + "‡¶§‡¶Æ";
      var rem10 = number % 10;
      switch (rem10) {
        case 2:
        case 3:
          return localeNumber + "‡ßü";
        case 4:
          return localeNumber + "‡¶∞‡ßç‡¶•";
        case 6:
          return localeNumber + "‡¶∑‡ßç‡¶†";
        default:
          return localeNumber + "‡¶Æ";
      }
    };
    localize6 = {
      ordinalNumber: ordinalNumber11,
      era: buildLocalizeFn({
        values: eraValues6,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues6,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback6(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues6,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues6,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues6,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues5,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default7 = localize6;
  }
});

// node_modules/date-fns/esm/locale/bn/_lib/formatDistance/index.js
var formatDistanceLocale6, formatDistance12, formatDistance_default7;
var init_formatDistance8 = __esm({
  "node_modules/date-fns/esm/locale/bn/_lib/formatDistance/index.js"() {
    init_localize7();
    formatDistanceLocale6 = {
      lessThanXSeconds: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°"
      },
      xSeconds: {
        one: "‡ßß ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°",
        other: "{{count}} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°"
      },
      halfAMinute: "‡¶Ü‡¶ß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
      lessThanXMinutes: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü"
      },
      xMinutes: {
        one: "‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
        other: "{{count}} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü"
      },
      aboutXHours: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ"
      },
      xHours: {
        one: "‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ",
        other: "{{count}} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ"
      },
      xDays: {
        one: "‡ßß ‡¶¶‡¶ø‡¶®",
        other: "{{count}} ‡¶¶‡¶ø‡¶®"
      },
      aboutXWeeks: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π"
      },
      xWeeks: {
        one: "‡ßß ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π",
        other: "{{count}} ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π"
      },
      aboutXMonths: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶Æ‡¶æ‡¶∏",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶Æ‡¶æ‡¶∏"
      },
      xMonths: {
        one: "‡ßß ‡¶Æ‡¶æ‡¶∏",
        other: "{{count}} ‡¶Æ‡¶æ‡¶∏"
      },
      aboutXYears: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶¨‡¶õ‡¶∞",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶¨‡¶õ‡¶∞"
      },
      xYears: {
        one: "‡ßß ‡¶¨‡¶õ‡¶∞",
        other: "{{count}} ‡¶¨‡¶õ‡¶∞"
      },
      overXYears: {
        one: "‡ßß ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø",
        other: "{{count}} ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø"
      },
      almostXYears: {
        one: "‡¶™‡ßç‡¶∞‡¶æ‡ßü ‡ßß ‡¶¨‡¶õ‡¶∞",
        other: "‡¶™‡ßç‡¶∞‡¶æ‡ßü {{count}} ‡¶¨‡¶õ‡¶∞"
      }
    };
    formatDistance12 = function formatDistance13(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale6[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", numberToLocale(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá";
        } else {
          return result + " ‡¶Ü‡¶ó‡ßá";
        }
      }
      return result;
    };
    formatDistance_default7 = formatDistance12;
  }
});

// node_modules/date-fns/esm/locale/bn/_lib/formatLong/index.js
var dateFormats6, timeFormats6, dateTimeFormats6, formatLong6, formatLong_default6;
var init_formatLong6 = __esm({
  "node_modules/date-fns/esm/locale/bn/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats6 = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    timeFormats6 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats6 = {
      full: "{{date}} {{time}} '‡¶∏‡¶Æ‡ßü'",
      long: "{{date}} {{time}} '‡¶∏‡¶Æ‡ßü'",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong6 = {
      date: buildFormatLongFn({
        formats: dateFormats6,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats6,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats6,
        defaultWidth: "full"
      })
    };
    formatLong_default6 = formatLong6;
  }
});

// node_modules/date-fns/esm/locale/bn/_lib/formatRelative/index.js
var formatRelativeLocale6, formatRelative12, formatRelative_default7;
var init_formatRelative8 = __esm({
  "node_modules/date-fns/esm/locale/bn/_lib/formatRelative/index.js"() {
    formatRelativeLocale6 = {
      lastWeek: "'‡¶ó‡¶§' eeee '‡¶∏‡¶Æ‡ßü' p",
      yesterday: "'‡¶ó‡¶§‡¶ï‡¶æ‡¶≤' '‡¶∏‡¶Æ‡ßü' p",
      today: "'‡¶Ü‡¶ú' '‡¶∏‡¶Æ‡ßü' p",
      tomorrow: "'‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤' '‡¶∏‡¶Æ‡ßü' p",
      nextWeek: "eeee '‡¶∏‡¶Æ‡ßü' p",
      other: "P"
    };
    formatRelative12 = function formatRelative13(token, _date, _baseDate, _options) {
      return formatRelativeLocale6[token];
    };
    formatRelative_default7 = formatRelative12;
  }
});

// node_modules/date-fns/esm/locale/bn/_lib/match/index.js
var matchOrdinalNumberPattern6, parseOrdinalNumberPattern6, matchEraPatterns6, parseEraPatterns6, matchQuarterPatterns6, parseQuarterPatterns6, matchMonthPatterns6, parseMonthPatterns6, matchDayPatterns6, parseDayPatterns6, matchDayPeriodPatterns6, parseDayPeriodPatterns6, match6, match_default7;
var init_match7 = __esm({
  "node_modules/date-fns/esm/locale/bn/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern6 = /^(\d+)(‡¶Æ|‡ßü|‡¶∞‡ßç‡¶•|‡¶∑‡ßç‡¶†|‡¶∂‡ßá|‡¶á|‡¶§‡¶Æ)?/i;
    parseOrdinalNumberPattern6 = /\d+/i;
    matchEraPatterns6 = {
      narrow: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É|‡¶ñ‡ßç‡¶∞‡¶ø‡¶É)/i,
      abbreviated: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨|‡¶ñ‡ßç‡¶∞‡¶ø‡¶É)/i,
      wide: /^(‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨|‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶)/i
    };
    parseEraPatterns6 = {
      narrow: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶É/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É/i],
      abbreviated: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É‡¶™‡ßÇ‡¶∞‡ßç‡¶¨/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶É/i],
      wide: [/^‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶™‡ßÇ‡¶∞‡ßç‡¶¨/i, /^‡¶ñ‡ßç‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶¨‡ßç‡¶¶/i]
    };
    matchQuarterPatterns6 = {
      narrow: /^[‡ßß‡ß®‡ß©‡ß™]/i,
      abbreviated: /^[‡ßß‡ß®‡ß©‡ß™]‡¶§‡ßç‡¶∞‡ßà/i,
      wide: /^[‡ßß‡ß®‡ß©‡ß™](‡¶Æ|‡ßü|‡¶∞‡ßç‡¶•)? ‡¶§‡ßç‡¶∞‡ßà‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï/i
    };
    parseQuarterPatterns6 = {
      any: [/‡ßß/i, /‡ß®/i, /‡ß©/i, /‡ß™/i]
    };
    matchMonthPatterns6 = {
      narrow: /^(‡¶ú‡¶æ‡¶®‡ßÅ|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã|‡¶®‡¶≠‡ßá|‡¶°‡¶ø‡¶∏‡ßá)/i,
      abbreviated: /^(‡¶ú‡¶æ‡¶®‡ßÅ|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã|‡¶®‡¶≠‡ßá|‡¶°‡¶ø‡¶∏‡ßá)/i,
      wide: /^(‡¶ú‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø|‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡ßü‡¶æ‡¶∞‡¶ø|‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö|‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤|‡¶Æ‡ßá|‡¶ú‡ßÅ‡¶®|‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á|‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü|‡¶∏‡ßá‡¶™‡ßç‡¶ü‡ßá‡¶Æ‡ßç‡¶¨‡¶∞|‡¶Ö‡¶ï‡ßç‡¶ü‡ßã‡¶¨‡¶∞|‡¶®‡¶≠‡ßá‡¶Æ‡ßç‡¶¨‡¶∞|‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞)/i
    };
    parseMonthPatterns6 = {
      any: [/^‡¶ú‡¶æ‡¶®‡ßÅ/i, /^‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ/i, /^‡¶Æ‡¶æ‡¶∞‡ßç‡¶ö/i, /^‡¶è‡¶™‡ßç‡¶∞‡¶ø‡¶≤/i, /^‡¶Æ‡ßá/i, /^‡¶ú‡ßÅ‡¶®/i, /^‡¶ú‡ßÅ‡¶≤‡¶æ‡¶á/i, /^‡¶Ü‡¶ó‡¶∏‡ßç‡¶ü/i, /^‡¶∏‡ßá‡¶™‡ßç‡¶ü/i, /^‡¶Ö‡¶ï‡ßç‡¶ü‡ßã/i, /^‡¶®‡¶≠‡ßá/i, /^‡¶°‡¶ø‡¶∏‡ßá/i]
    };
    matchDayPatterns6 = {
      narrow: /^(‡¶∞|‡¶∏‡ßã|‡¶Æ|‡¶¨‡ßÅ|‡¶¨‡ßÉ|‡¶∂‡ßÅ|‡¶∂)+/i,
      short: /^(‡¶∞‡¶¨‡¶ø|‡¶∏‡ßã‡¶Æ|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤|‡¶¨‡ßÅ‡¶ß|‡¶¨‡ßÉ‡¶π|‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞|‡¶∂‡¶®‡¶ø)+/i,
      abbreviated: /^(‡¶∞‡¶¨‡¶ø|‡¶∏‡ßã‡¶Æ|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤|‡¶¨‡ßÅ‡¶ß|‡¶¨‡ßÉ‡¶π|‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞|‡¶∂‡¶®‡¶ø)+/i,
      wide: /^(‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞|‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞|‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞|‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞|‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ |‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞|‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞)+/i
    };
    parseDayPatterns6 = {
      narrow: [/^‡¶∞/i, /^‡¶∏‡ßã/i, /^‡¶Æ/i, /^‡¶¨‡ßÅ/i, /^‡¶¨‡ßÉ/i, /^‡¶∂‡ßÅ/i, /^‡¶∂/i],
      short: [/^‡¶∞‡¶¨‡¶ø/i, /^‡¶∏‡ßã‡¶Æ/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤/i, /^‡¶¨‡ßÅ‡¶ß/i, /^‡¶¨‡ßÉ‡¶π/i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞/i, /^‡¶∂‡¶®‡¶ø/i],
      abbreviated: [/^‡¶∞‡¶¨‡¶ø/i, /^‡¶∏‡ßã‡¶Æ/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤/i, /^‡¶¨‡ßÅ‡¶ß/i, /^‡¶¨‡ßÉ‡¶π/i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞/i, /^‡¶∂‡¶®‡¶ø/i],
      wide: [/^‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞/i, /^‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞/i, /^‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞/i, /^‡¶¨‡ßÅ‡¶ß‡¶¨‡¶æ‡¶∞/i, /^‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ /i, /^‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞/i, /^‡¶∂‡¶®‡¶ø‡¶¨‡¶æ‡¶∞/i]
    };
    matchDayPeriodPatterns6 = {
      narrow: /^(‡¶™‡ßÇ|‡¶Ö‡¶™|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i,
      abbreviated: /^(‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®|‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i,
      wide: /^(‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶π‡ßç‡¶®|‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶®|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§|‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®|‡¶∏‡¶ï‡¶æ‡¶≤|‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤|‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ|‡¶∞‡¶æ‡¶§)/i
    };
    parseDayPeriodPatterns6 = {
      any: {
        am: /^‡¶™‡ßÇ/i,
        pm: /^‡¶Ö‡¶™/i,
        midnight: /^‡¶Æ‡¶ß‡ßç‡¶Ø‡¶∞‡¶æ‡¶§/i,
        noon: /^‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®/i,
        morning: /‡¶∏‡¶ï‡¶æ‡¶≤/i,
        afternoon: /‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤/i,
        evening: /‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ/i,
        night: /‡¶∞‡¶æ‡¶§/i
      }
    };
    match6 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern6,
        parsePattern: parseOrdinalNumberPattern6,
        valueCallback: function valueCallback11(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns6,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns6,
        defaultParseWidth: "wide"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns6,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns6,
        defaultParseWidth: "any",
        valueCallback: function valueCallback12(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns6,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns6,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns6,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns6,
        defaultParseWidth: "wide"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns6,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns6,
        defaultParseWidth: "any"
      })
    };
    match_default7 = match6;
  }
});

// node_modules/date-fns/esm/locale/bn/index.js
var bn_exports = {};
__export(bn_exports, {
  default: () => bn_default
});
var locale6, bn_default;
var init_bn = __esm({
  "node_modules/date-fns/esm/locale/bn/index.js"() {
    init_formatDistance8();
    init_formatLong6();
    init_formatRelative8();
    init_localize7();
    init_match7();
    locale6 = {
      code: "bn",
      formatDistance: formatDistance_default7,
      formatLong: formatLong_default6,
      formatRelative: formatRelative_default7,
      localize: localize_default7,
      match: match_default7,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    bn_default = locale6;
  }
});

// node_modules/date-fns/esm/locale/ca/_lib/formatDistance/index.js
var formatDistanceLocale7, formatDistance14, formatDistance_default8;
var init_formatDistance9 = __esm({
  "node_modules/date-fns/esm/locale/ca/_lib/formatDistance/index.js"() {
    formatDistanceLocale7 = {
      lessThanXSeconds: {
        one: "menys d'un segon",
        eleven: "menys d'onze segons",
        other: "menys de {{count}} segons"
      },
      xSeconds: {
        one: "1 segon",
        other: "{{count}} segons"
      },
      halfAMinute: "mig minut",
      lessThanXMinutes: {
        one: "menys d'un minut",
        eleven: "menys d'onze minuts",
        other: "menys de {{count}} minuts"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minuts"
      },
      aboutXHours: {
        one: "aproximadament una hora",
        other: "aproximadament {{count}} hores"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} hores"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dies"
      },
      aboutXWeeks: {
        one: "aproximadament una setmana",
        other: "aproximadament {{count}} setmanes"
      },
      xWeeks: {
        one: "1 setmana",
        other: "{{count}} setmanes"
      },
      aboutXMonths: {
        one: "aproximadament un mes",
        other: "aproximadament {{count}} mesos"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} mesos"
      },
      aboutXYears: {
        one: "aproximadament un any",
        other: "aproximadament {{count}} anys"
      },
      xYears: {
        one: "1 any",
        other: "{{count}} anys"
      },
      overXYears: {
        one: "m√©s d'un any",
        eleven: "m√©s d'onze anys",
        other: "m√©s de {{count}} anys"
      },
      almostXYears: {
        one: "gaireb√© un any",
        other: "gaireb√© {{count}} anys"
      }
    };
    formatDistance14 = function formatDistance15(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale7[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 11 && tokenValue.eleven) {
        result = tokenValue.eleven;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "fa " + result;
        }
      }
      return result;
    };
    formatDistance_default8 = formatDistance14;
  }
});

// node_modules/date-fns/esm/locale/ca/_lib/formatLong/index.js
var dateFormats7, timeFormats7, dateTimeFormats7, formatLong7, formatLong_default7;
var init_formatLong7 = __esm({
  "node_modules/date-fns/esm/locale/ca/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats7 = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    timeFormats7 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats7 = {
      full: "{{date}} 'a les' {{time}}",
      long: "{{date}} 'a les' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong7 = {
      date: buildFormatLongFn({
        formats: dateFormats7,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats7,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats7,
        defaultWidth: "full"
      })
    };
    formatLong_default7 = formatLong7;
  }
});

// node_modules/date-fns/esm/locale/ca/_lib/formatRelative/index.js
var formatRelativeLocale7, formatRelativeLocalePlural, formatRelative14, formatRelative_default8;
var init_formatRelative9 = __esm({
  "node_modules/date-fns/esm/locale/ca/_lib/formatRelative/index.js"() {
    formatRelativeLocale7 = {
      lastWeek: "'el' eeee 'passat a la' LT",
      yesterday: "'ahir a la' p",
      today: "'avui a la' p",
      tomorrow: "'dem√† a la' p",
      nextWeek: "eeee 'a la' p",
      other: "P"
    };
    formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'passat a les' p",
      yesterday: "'ahir a les' p",
      today: "'avui a les' p",
      tomorrow: "'dem√† a les' p",
      nextWeek: "eeee 'a les' p",
      other: "P"
    };
    formatRelative14 = function formatRelative15(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }
      return formatRelativeLocale7[token];
    };
    formatRelative_default8 = formatRelative14;
  }
});

// node_modules/date-fns/esm/locale/ca/_lib/localize/index.js
var eraValues7, quarterValues7, monthValues7, dayValues7, dayPeriodValues7, formattingDayPeriodValues6, ordinalNumber13, localize7, localize_default8;
var init_localize8 = __esm({
  "node_modules/date-fns/esm/locale/ca/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues7 = {
      narrow: ["aC", "dC"],
      abbreviated: ["a. de C.", "d. de C."],
      wide: ["abans de Crist", "despr√©s de Crist"]
    };
    quarterValues7 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1r trimestre", "2n trimestre", "3r trimestre", "4t trimestre"]
    };
    monthValues7 = {
      narrow: ["GN", "FB", "M√á", "AB", "MG", "JN", "JL", "AG", "ST", "OC", "NV", "DS"],
      /**
       * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formaci√≥ d'abreviatures.
       * S'escriu la primera s√≠l¬∑laba i les consonants de la s√≠l¬∑laba seg√ºent anteriors a la primera vocal.
       * Els mesos de mar√ß, maig i juny no s'abreugen perqu√® s√≥n paraules d'una sola s√≠l¬∑laba.
       */
      abbreviated: ["gen.", "febr.", "mar√ß", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des."],
      wide: ["gener", "febrer", "mar√ß", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"]
    };
    dayValues7 = {
      narrow: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      short: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      abbreviated: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      wide: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"]
    };
    dayPeriodValues7 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat√≠",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat√≠",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      },
      wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat√≠",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      }
    };
    formattingDayPeriodValues6 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat√≠",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat√≠",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      },
      wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat√≠",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      }
    };
    ordinalNumber13 = function ordinalNumber14(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "r";
          case 2:
            return number + "n";
          case 3:
            return number + "r";
          case 4:
            return number + "t";
        }
      }
      return number + "√®";
    };
    localize7 = {
      ordinalNumber: ordinalNumber13,
      era: buildLocalizeFn({
        values: eraValues7,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues7,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback7(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues7,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues7,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues7,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues6,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default8 = localize7;
  }
});

// node_modules/date-fns/esm/locale/ca/_lib/match/index.js
var matchOrdinalNumberPattern7, parseOrdinalNumberPattern7, matchEraPatterns7, parseEraPatterns7, matchQuarterPatterns7, parseQuarterPatterns7, matchMonthPatterns7, parseMonthPatterns7, matchDayPatterns7, parseDayPatterns7, matchDayPeriodPatterns7, parseDayPeriodPatterns7, match7, match_default8;
var init_match8 = __esm({
  "node_modules/date-fns/esm/locale/ca/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern7 = /^(\d+)(√®|r|n|r|t)?/i;
    parseOrdinalNumberPattern7 = /\d+/i;
    matchEraPatterns7 = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a. de C.|d. de C.)/i,
      wide: /^(abans de Crist|despr[e√©]s de Crist)/i
    };
    parseEraPatterns7 = {
      narrow: [/^aC/i, /^dC/i],
      abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
      wide: [/^(abans de Crist)/i, /^(despr[e√©]s de Crist)/i]
    };
    matchQuarterPatterns7 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](√®|r|n|r|t)? trimestre/i
    };
    parseQuarterPatterns7 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns7 = {
      narrow: /^(GN|FB|M√á|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
      abbreviated: /^(gen.|febr.|mar√ß|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
      wide: /^(gener|febrer|mar√ß|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
    };
    parseMonthPatterns7 = {
      narrow: [/^GN/i, /^FB/i, /^M√á/i, /^AB/i, /^MG/i, /^JN/i, /^JL/i, /^AG/i, /^ST/i, /^OC/i, /^NV/i, /^DS/i],
      abbreviated: [/^gen./i, /^febr./i, /^mar√ß/i, /^abr./i, /^maig/i, /^juny/i, /^jul./i, /^ag./i, /^set./i, /^oct./i, /^nov./i, /^des./i],
      wide: [/^gener/i, /^febrer/i, /^mar√ß/i, /^abril/i, /^maig/i, /^juny/i, /^juliol/i, /^agost/i, /^setembre/i, /^octubre/i, /^novembre/i, /^desembre/i]
    };
    matchDayPatterns7 = {
      narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
    };
    parseDayPatterns7 = {
      narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      wide: [/^diumenge/i, /^dilluns/i, /^dimarts/i, /^dimecres/i, /^dijous/i, /^divendres/i, /^disssabte/i]
    };
    matchDayPeriodPatterns7 = {
      narrow: /^(a|p|mn|md|(del|de la) (mat√≠|tarda|vespre|nit))/i,
      abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (mat√≠|tarda|vespre|nit))/i,
      wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (mat√≠|tarda|vespre|nit))/i
    };
    parseDayPeriodPatterns7 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mitjanit/i,
        noon: /^migdia/i,
        morning: /mat√≠/i,
        afternoon: /tarda/i,
        evening: /vespre/i,
        night: /nit/i
      }
    };
    match7 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern7,
        parsePattern: parseOrdinalNumberPattern7,
        valueCallback: function valueCallback13(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns7,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns7,
        defaultParseWidth: "wide"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns7,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns7,
        defaultParseWidth: "any",
        valueCallback: function valueCallback14(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns7,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns7,
        defaultParseWidth: "wide"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns7,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns7,
        defaultParseWidth: "wide"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns7,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns7,
        defaultParseWidth: "any"
      })
    };
    match_default8 = match7;
  }
});

// node_modules/date-fns/esm/locale/ca/index.js
var ca_exports = {};
__export(ca_exports, {
  default: () => ca_default
});
var locale7, ca_default;
var init_ca = __esm({
  "node_modules/date-fns/esm/locale/ca/index.js"() {
    init_formatDistance9();
    init_formatLong7();
    init_formatRelative9();
    init_localize8();
    init_match8();
    locale7 = {
      code: "ca",
      formatDistance: formatDistance_default8,
      formatLong: formatLong_default7,
      formatRelative: formatRelative_default8,
      localize: localize_default8,
      match: match_default8,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    ca_default = locale7;
  }
});

// node_modules/date-fns/esm/locale/cs/_lib/formatDistance/index.js
var formatDistanceLocale8, formatDistance16, formatDistance_default9;
var init_formatDistance10 = __esm({
  "node_modules/date-fns/esm/locale/cs/_lib/formatDistance/index.js"() {
    formatDistanceLocale8 = {
      lessThanXSeconds: {
        one: {
          regular: "m√©nƒõ ne≈æ sekunda",
          past: "p≈ôed m√©nƒõ ne≈æ sekundou",
          future: "za m√©nƒõ ne≈æ sekundu"
        },
        few: {
          regular: "m√©nƒõ ne≈æ {{count}} sekundy",
          past: "p≈ôed m√©nƒõ ne≈æ {{count}} sekundami",
          future: "za m√©nƒõ ne≈æ {{count}} sekundy"
        },
        many: {
          regular: "m√©nƒõ ne≈æ {{count}} sekund",
          past: "p≈ôed m√©nƒõ ne≈æ {{count}} sekundami",
          future: "za m√©nƒõ ne≈æ {{count}} sekund"
        }
      },
      xSeconds: {
        one: {
          regular: "sekunda",
          past: "p≈ôed sekundou",
          future: "za sekundu"
        },
        few: {
          regular: "{{count}} sekundy",
          past: "p≈ôed {{count}} sekundami",
          future: "za {{count}} sekundy"
        },
        many: {
          regular: "{{count}} sekund",
          past: "p≈ôed {{count}} sekundami",
          future: "za {{count}} sekund"
        }
      },
      halfAMinute: {
        type: "other",
        other: {
          regular: "p≈Øl minuty",
          past: "p≈ôed p≈Øl minutou",
          future: "za p≈Øl minuty"
        }
      },
      lessThanXMinutes: {
        one: {
          regular: "m√©nƒõ ne≈æ minuta",
          past: "p≈ôed m√©nƒõ ne≈æ minutou",
          future: "za m√©nƒõ ne≈æ minutu"
        },
        few: {
          regular: "m√©nƒõ ne≈æ {{count}} minuty",
          past: "p≈ôed m√©nƒõ ne≈æ {{count}} minutami",
          future: "za m√©nƒõ ne≈æ {{count}} minuty"
        },
        many: {
          regular: "m√©nƒõ ne≈æ {{count}} minut",
          past: "p≈ôed m√©nƒõ ne≈æ {{count}} minutami",
          future: "za m√©nƒõ ne≈æ {{count}} minut"
        }
      },
      xMinutes: {
        one: {
          regular: "minuta",
          past: "p≈ôed minutou",
          future: "za minutu"
        },
        few: {
          regular: "{{count}} minuty",
          past: "p≈ôed {{count}} minutami",
          future: "za {{count}} minuty"
        },
        many: {
          regular: "{{count}} minut",
          past: "p≈ôed {{count}} minutami",
          future: "za {{count}} minut"
        }
      },
      aboutXHours: {
        one: {
          regular: "p≈ôibli≈ænƒõ hodina",
          past: "p≈ôibli≈ænƒõ p≈ôed hodinou",
          future: "p≈ôibli≈ænƒõ za hodinu"
        },
        few: {
          regular: "p≈ôibli≈ænƒõ {{count}} hodiny",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} hodinami",
          future: "p≈ôibli≈ænƒõ za {{count}} hodiny"
        },
        many: {
          regular: "p≈ôibli≈ænƒõ {{count}} hodin",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} hodinami",
          future: "p≈ôibli≈ænƒõ za {{count}} hodin"
        }
      },
      xHours: {
        one: {
          regular: "hodina",
          past: "p≈ôed hodinou",
          future: "za hodinu"
        },
        few: {
          regular: "{{count}} hodiny",
          past: "p≈ôed {{count}} hodinami",
          future: "za {{count}} hodiny"
        },
        many: {
          regular: "{{count}} hodin",
          past: "p≈ôed {{count}} hodinami",
          future: "za {{count}} hodin"
        }
      },
      xDays: {
        one: {
          regular: "den",
          past: "p≈ôed dnem",
          future: "za den"
        },
        few: {
          regular: "{{count}} dny",
          past: "p≈ôed {{count}} dny",
          future: "za {{count}} dny"
        },
        many: {
          regular: "{{count}} dn√≠",
          past: "p≈ôed {{count}} dny",
          future: "za {{count}} dn√≠"
        }
      },
      aboutXWeeks: {
        one: {
          regular: "p≈ôibli≈ænƒõ t√Ωden",
          past: "p≈ôibli≈ænƒõ p≈ôed t√Ωdnem",
          future: "p≈ôibli≈ænƒõ za t√Ωden"
        },
        few: {
          regular: "p≈ôibli≈ænƒõ {{count}} t√Ωdny",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} t√Ωdny",
          future: "p≈ôibli≈ænƒõ za {{count}} t√Ωdny"
        },
        many: {
          regular: "p≈ôibli≈ænƒõ {{count}} t√Ωdn≈Ø",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} t√Ωdny",
          future: "p≈ôibli≈ænƒõ za {{count}} t√Ωdn≈Ø"
        }
      },
      xWeeks: {
        one: {
          regular: "t√Ωden",
          past: "p≈ôed t√Ωdnem",
          future: "za t√Ωden"
        },
        few: {
          regular: "{{count}} t√Ωdny",
          past: "p≈ôed {{count}} t√Ωdny",
          future: "za {{count}} t√Ωdny"
        },
        many: {
          regular: "{{count}} t√Ωdn≈Ø",
          past: "p≈ôed {{count}} t√Ωdny",
          future: "za {{count}} t√Ωdn≈Ø"
        }
      },
      aboutXMonths: {
        one: {
          regular: "p≈ôibli≈ænƒõ mƒõs√≠c",
          past: "p≈ôibli≈ænƒõ p≈ôed mƒõs√≠cem",
          future: "p≈ôibli≈ænƒõ za mƒõs√≠c"
        },
        few: {
          regular: "p≈ôibli≈ænƒõ {{count}} mƒõs√≠ce",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} mƒõs√≠ci",
          future: "p≈ôibli≈ænƒõ za {{count}} mƒõs√≠ce"
        },
        many: {
          regular: "p≈ôibli≈ænƒõ {{count}} mƒõs√≠c≈Ø",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} mƒõs√≠ci",
          future: "p≈ôibli≈ænƒõ za {{count}} mƒõs√≠c≈Ø"
        }
      },
      xMonths: {
        one: {
          regular: "mƒõs√≠c",
          past: "p≈ôed mƒõs√≠cem",
          future: "za mƒõs√≠c"
        },
        few: {
          regular: "{{count}} mƒõs√≠ce",
          past: "p≈ôed {{count}} mƒõs√≠ci",
          future: "za {{count}} mƒõs√≠ce"
        },
        many: {
          regular: "{{count}} mƒõs√≠c≈Ø",
          past: "p≈ôed {{count}} mƒõs√≠ci",
          future: "za {{count}} mƒõs√≠c≈Ø"
        }
      },
      aboutXYears: {
        one: {
          regular: "p≈ôibli≈ænƒõ rok",
          past: "p≈ôibli≈ænƒõ p≈ôed rokem",
          future: "p≈ôibli≈ænƒõ za rok"
        },
        few: {
          regular: "p≈ôibli≈ænƒõ {{count}} roky",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} roky",
          future: "p≈ôibli≈ænƒõ za {{count}} roky"
        },
        many: {
          regular: "p≈ôibli≈ænƒõ {{count}} rok≈Ø",
          past: "p≈ôibli≈ænƒõ p≈ôed {{count}} roky",
          future: "p≈ôibli≈ænƒõ za {{count}} rok≈Ø"
        }
      },
      xYears: {
        one: {
          regular: "rok",
          past: "p≈ôed rokem",
          future: "za rok"
        },
        few: {
          regular: "{{count}} roky",
          past: "p≈ôed {{count}} roky",
          future: "za {{count}} roky"
        },
        many: {
          regular: "{{count}} rok≈Ø",
          past: "p≈ôed {{count}} roky",
          future: "za {{count}} rok≈Ø"
        }
      },
      overXYears: {
        one: {
          regular: "v√≠ce ne≈æ rok",
          past: "p≈ôed v√≠ce ne≈æ rokem",
          future: "za v√≠ce ne≈æ rok"
        },
        few: {
          regular: "v√≠ce ne≈æ {{count}} roky",
          past: "p≈ôed v√≠ce ne≈æ {{count}} roky",
          future: "za v√≠ce ne≈æ {{count}} roky"
        },
        many: {
          regular: "v√≠ce ne≈æ {{count}} rok≈Ø",
          past: "p≈ôed v√≠ce ne≈æ {{count}} roky",
          future: "za v√≠ce ne≈æ {{count}} rok≈Ø"
        }
      },
      almostXYears: {
        one: {
          regular: "skoro rok",
          past: "skoro p≈ôed rokem",
          future: "skoro za rok"
        },
        few: {
          regular: "skoro {{count}} roky",
          past: "skoro p≈ôed {{count}} roky",
          future: "skoro za {{count}} roky"
        },
        many: {
          regular: "skoro {{count}} rok≈Ø",
          past: "skoro p≈ôed {{count}} roky",
          future: "skoro za {{count}} rok≈Ø"
        }
      }
    };
    formatDistance16 = function formatDistance17(token, count, options) {
      var pluralResult;
      var tokenValue = formatDistanceLocale8[token];
      if (tokenValue.type === "other") {
        pluralResult = tokenValue.other;
      } else if (count === 1) {
        pluralResult = tokenValue.one;
      } else if (count > 1 && count < 5) {
        pluralResult = tokenValue.few;
      } else {
        pluralResult = tokenValue.many;
      }
      var suffixExist = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
      var comparison = options === null || options === void 0 ? void 0 : options.comparison;
      var timeResult;
      if (suffixExist && comparison === -1) {
        timeResult = pluralResult.past;
      } else if (suffixExist && comparison === 1) {
        timeResult = pluralResult.future;
      } else {
        timeResult = pluralResult.regular;
      }
      return timeResult.replace("{{count}}", String(count));
    };
    formatDistance_default9 = formatDistance16;
  }
});

// node_modules/date-fns/esm/locale/cs/_lib/formatLong/index.js
var dateFormats8, timeFormats8, dateTimeFormats8, formatLong8, formatLong_default8;
var init_formatLong8 = __esm({
  "node_modules/date-fns/esm/locale/cs/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats8 = {
      full: "EEEE, d. MMMM yyyy",
      long: "d. MMMM yyyy",
      medium: "d. M. yyyy",
      short: "dd.MM.yyyy"
    };
    timeFormats8 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats8 = {
      full: "{{date}} 'v' {{time}}",
      long: "{{date}} 'v' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong8 = {
      date: buildFormatLongFn({
        formats: dateFormats8,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats8,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats8,
        defaultWidth: "full"
      })
    };
    formatLong_default8 = formatLong8;
  }
});

// node_modules/date-fns/esm/locale/cs/_lib/formatRelative/index.js
var accusativeWeekdays2, formatRelativeLocale8, formatRelative16, formatRelative_default9;
var init_formatRelative10 = __esm({
  "node_modules/date-fns/esm/locale/cs/_lib/formatRelative/index.js"() {
    accusativeWeekdays2 = ["nedƒõli", "pondƒõl√≠", "√∫ter√Ω", "st≈ôedu", "ƒçtvrtek", "p√°tek", "sobotu"];
    formatRelativeLocale8 = {
      lastWeek: "'posledn√≠' eeee 've' p",
      yesterday: "'vƒçera v' p",
      today: "'dnes v' p",
      tomorrow: "'z√≠tra v' p",
      nextWeek: function nextWeek3(date) {
        var day = date.getUTCDay();
        return "'v " + accusativeWeekdays2[day] + " o' p";
      },
      other: "P"
    };
    formatRelative16 = function formatRelative17(token, date) {
      var format2 = formatRelativeLocale8[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default9 = formatRelative16;
  }
});

// node_modules/date-fns/esm/locale/cs/_lib/localize/index.js
var eraValues8, quarterValues8, monthValues8, formattingMonthValues2, dayValues8, dayPeriodValues8, formattingDayPeriodValues7, ordinalNumber15, localize8, localize_default9;
var init_localize9 = __esm({
  "node_modules/date-fns/esm/locale/cs/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues8 = {
      narrow: ["p≈ô. n. l.", "n. l."],
      abbreviated: ["p≈ô. n. l.", "n. l."],
      wide: ["p≈ôed na≈°√≠m letopoƒçtem", "na≈°eho letopoƒçtu"]
    };
    quarterValues8 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. ƒçtvrtlet√≠", "2. ƒçtvrtlet√≠", "3. ƒçtvrtlet√≠", "4. ƒçtvrtlet√≠"],
      wide: ["1. ƒçtvrtlet√≠", "2. ƒçtvrtlet√≠", "3. ƒçtvrtlet√≠", "4. ƒçtvrtlet√≠"]
    };
    monthValues8 = {
      narrow: ["L", "√ö", "B", "D", "K", "ƒå", "ƒå", "S", "Z", "≈ò", "L", "P"],
      abbreviated: ["led", "√∫no", "b≈ôe", "dub", "kvƒõ", "ƒçvn", "ƒçvc", "srp", "z√°≈ô", "≈ô√≠j", "lis", "pro"],
      wide: ["leden", "√∫nor", "b≈ôezen", "duben", "kvƒõten", "ƒçerven", "ƒçervenec", "srpen", "z√°≈ô√≠", "≈ô√≠jen", "listopad", "prosinec"]
    };
    formattingMonthValues2 = {
      narrow: ["L", "√ö", "B", "D", "K", "ƒå", "ƒå", "S", "Z", "≈ò", "L", "P"],
      abbreviated: ["led", "√∫no", "b≈ôe", "dub", "kvƒõ", "ƒçvn", "ƒçvc", "srp", "z√°≈ô", "≈ô√≠j", "lis", "pro"],
      wide: ["ledna", "√∫nora", "b≈ôezna", "dubna", "kvƒõtna", "ƒçervna", "ƒçervence", "srpna", "z√°≈ô√≠", "≈ô√≠jna", "listopadu", "prosince"]
    };
    dayValues8 = {
      narrow: ["ne", "po", "√∫t", "st", "ƒçt", "p√°", "so"],
      short: ["ne", "po", "√∫t", "st", "ƒçt", "p√°", "so"],
      abbreviated: ["ned", "pon", "√∫te", "st≈ô", "ƒçtv", "p√°t", "sob"],
      wide: ["nedƒõle", "pondƒõl√≠", "√∫ter√Ω", "st≈ôeda", "ƒçtvrtek", "p√°tek", "sobota"]
    };
    dayPeriodValues8 = {
      narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      },
      abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      },
      wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      }
    };
    formattingDayPeriodValues7 = {
      narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      },
      abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      },
      wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "p≈Ølnoc",
        noon: "poledne",
        morning: "r√°no",
        afternoon: "odpoledne",
        evening: "veƒçer",
        night: "noc"
      }
    };
    ordinalNumber15 = function ordinalNumber16(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize8 = {
      ordinalNumber: ordinalNumber15,
      era: buildLocalizeFn({
        values: eraValues8,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues8,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback8(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues8,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues2,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues8,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues8,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues7,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default9 = localize8;
  }
});

// node_modules/date-fns/esm/locale/cs/_lib/match/index.js
var matchOrdinalNumberPattern8, parseOrdinalNumberPattern8, matchEraPatterns8, parseEraPatterns8, matchQuarterPatterns8, parseQuarterPatterns8, matchMonthPatterns8, parseMonthPatterns8, matchDayPatterns8, parseDayPatterns8, matchDayPeriodPatterns8, parseDayPeriodPatterns8, match8, match_default9;
var init_match9 = __esm({
  "node_modules/date-fns/esm/locale/cs/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern8 = /^(\d+)\.?/i;
    parseOrdinalNumberPattern8 = /\d+/i;
    matchEraPatterns8 = {
      narrow: /^(p[≈ôr](\.|ed) Kr\.|p[≈ôr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(p[≈ôr](\.|ed) Kr\.|p[≈ôr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(p[≈ôr](\.|ed) Kristem|p[≈ôr](\.|ed) na[≈°s][√≠i]m letopo[ƒçc]tem|po Kristu|na[≈°s]eho letopo[ƒçc]tu)/i
    };
    parseEraPatterns8 = {
      any: [/^p[≈ôr]/i, /^(po|n)/i]
    };
    matchQuarterPatterns8 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\. [ƒçc]tvrtlet[√≠i]/i,
      wide: /^[1234]\. [ƒçc]tvrtlet[√≠i]/i
    };
    parseQuarterPatterns8 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns8 = {
      narrow: /^[l√∫ubdkƒçcsz≈ôrlp]/i,
      abbreviated: /^(led|[√∫u]no|b[≈ôr]e|dub|kv[ƒõe]|[ƒçc]vn|[ƒçc]vc|srp|z[√°a][≈ôr]|[≈ôr][√≠i]j|lis|pro)/i,
      wide: /^(leden|ledna|[√∫u]nora?|b[≈ôr]ezen|b[≈ôr]ezna|duben|dubna|kv[ƒõe]ten|kv[ƒõe]tna|[ƒçc]erven(ec|ce)?|[ƒçc]ervna|srpen|srpna|z[√°a][≈ôr][√≠i]|[≈ôr][√≠i]jen|[≈ôr][√≠i]jna|listopad(a|u)?|prosinec|prosince)/i
    };
    parseMonthPatterns8 = {
      narrow: [/^l/i, /^[√∫u]/i, /^b/i, /^d/i, /^k/i, /^[ƒçc]/i, /^[ƒçc]/i, /^s/i, /^z/i, /^[≈ôr]/i, /^l/i, /^p/i],
      any: [/^led/i, /^[√∫u]n/i, /^b[≈ôr]e/i, /^dub/i, /^kv[ƒõe]/i, /^[ƒçc]vn|[ƒçc]erven(?!\w)|[ƒçc]ervna/i, /^[ƒçc]vc|[ƒçc]erven(ec|ce)/i, /^srp/i, /^z[√°a][≈ôr]/i, /^[≈ôr][√≠i]j/i, /^lis/i, /^pro/i]
    };
    matchDayPatterns8 = {
      narrow: /^[npu√∫sƒçps]/i,
      short: /^(ne|po|[√∫u]t|st|[ƒçc]t|p[√°a]|so)/i,
      abbreviated: /^(ned|pon|[√∫u]te|st[r≈ô]|[ƒçc]tv|p[√°a]t|sob)/i,
      wide: /^(ned[ƒõe]le|pond[ƒõe]l[√≠i]|[√∫u]ter[√Ωy]|st[≈ôr]eda|[ƒçc]tvrtek|p[√°a]tek|sobota)/i
    };
    parseDayPatterns8 = {
      narrow: [/^n/i, /^p/i, /^[√∫u]/i, /^s/i, /^[ƒçc]/i, /^p/i, /^s/i],
      any: [/^ne/i, /^po/i, /^[√∫u]t/i, /^st/i, /^[ƒçc]t/i, /^p[√°a]/i, /^so/i]
    };
    matchDayPeriodPatterns8 = {
      any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[≈Øu]lnoc|poledne|r[√°a]no|odpoledne|ve[ƒçc]er|(v )?noci?/i
    };
    parseDayPeriodPatterns8 = {
      any: {
        am: /^dop/i,
        pm: /^odp/i,
        midnight: /^p[≈Øu]lnoc/i,
        noon: /^poledne/i,
        morning: /r[√°a]no/i,
        afternoon: /odpoledne/i,
        evening: /ve[ƒçc]er/i,
        night: /noc/i
      }
    };
    match8 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern8,
        parsePattern: parseOrdinalNumberPattern8,
        valueCallback: function valueCallback15(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns8,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns8,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns8,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns8,
        defaultParseWidth: "any",
        valueCallback: function valueCallback16(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns8,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns8,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns8,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns8,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns8,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns8,
        defaultParseWidth: "any"
      })
    };
    match_default9 = match8;
  }
});

// node_modules/date-fns/esm/locale/cs/index.js
var cs_exports = {};
__export(cs_exports, {
  default: () => cs_default
});
var locale8, cs_default;
var init_cs = __esm({
  "node_modules/date-fns/esm/locale/cs/index.js"() {
    init_formatDistance10();
    init_formatLong8();
    init_formatRelative10();
    init_localize9();
    init_match9();
    locale8 = {
      code: "cs",
      formatDistance: formatDistance_default9,
      formatLong: formatLong_default8,
      formatRelative: formatRelative_default9,
      localize: localize_default9,
      match: match_default9,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    cs_default = locale8;
  }
});

// node_modules/date-fns/esm/locale/cy/_lib/formatDistance/index.js
var formatDistanceLocale9, formatDistance18, formatDistance_default10;
var init_formatDistance11 = __esm({
  "node_modules/date-fns/esm/locale/cy/_lib/formatDistance/index.js"() {
    formatDistanceLocale9 = {
      lessThanXSeconds: {
        one: "llai na eiliad",
        other: "llai na {{count}} eiliad"
      },
      xSeconds: {
        one: "1 eiliad",
        other: "{{count}} eiliad"
      },
      halfAMinute: "hanner munud",
      lessThanXMinutes: {
        one: "llai na munud",
        two: "llai na 2 funud",
        other: "llai na {{count}} munud"
      },
      xMinutes: {
        one: "1 munud",
        two: "2 funud",
        other: "{{count}} munud"
      },
      aboutXHours: {
        one: "tua 1 awr",
        other: "tua {{count}} awr"
      },
      xHours: {
        one: "1 awr",
        other: "{{count}} awr"
      },
      xDays: {
        one: "1 diwrnod",
        two: "2 ddiwrnod",
        other: "{{count}} diwrnod"
      },
      aboutXWeeks: {
        one: "tua 1 wythnos",
        two: "tua pythefnos",
        other: "tua {{count}} wythnos"
      },
      xWeeks: {
        one: "1 wythnos",
        two: "pythefnos",
        other: "{{count}} wythnos"
      },
      aboutXMonths: {
        one: "tua 1 mis",
        two: "tua 2 fis",
        other: "tua {{count}} mis"
      },
      xMonths: {
        one: "1 mis",
        two: "2 fis",
        other: "{{count}} mis"
      },
      aboutXYears: {
        one: "tua 1 flwyddyn",
        two: "tua 2 flynedd",
        other: "tua {{count}} mlynedd"
      },
      xYears: {
        one: "1 flwyddyn",
        two: "2 flynedd",
        other: "{{count}} mlynedd"
      },
      overXYears: {
        one: "dros 1 flwyddyn",
        two: "dros 2 flynedd",
        other: "dros {{count}} mlynedd"
      },
      almostXYears: {
        one: "bron 1 flwyddyn",
        two: "bron 2 flynedd",
        other: "bron {{count}} mlynedd"
      }
    };
    formatDistance18 = function formatDistance19(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale9[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2 && !!tokenValue.two) {
        result = tokenValue.two;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "mewn " + result;
        } else {
          return result + " yn √¥l";
        }
      }
      return result;
    };
    formatDistance_default10 = formatDistance18;
  }
});

// node_modules/date-fns/esm/locale/cy/_lib/formatLong/index.js
var dateFormats9, timeFormats9, dateTimeFormats9, formatLong9, formatLong_default9;
var init_formatLong9 = __esm({
  "node_modules/date-fns/esm/locale/cy/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats9 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    timeFormats9 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats9 = {
      full: "{{date}} 'am' {{time}}",
      long: "{{date}} 'am' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong9 = {
      date: buildFormatLongFn({
        formats: dateFormats9,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats9,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats9,
        defaultWidth: "full"
      })
    };
    formatLong_default9 = formatLong9;
  }
});

// node_modules/date-fns/esm/locale/cy/_lib/formatRelative/index.js
var formatRelativeLocale9, formatRelative18, formatRelative_default10;
var init_formatRelative11 = __esm({
  "node_modules/date-fns/esm/locale/cy/_lib/formatRelative/index.js"() {
    formatRelativeLocale9 = {
      lastWeek: "eeee 'diwethaf am' p",
      yesterday: "'ddoe am' p",
      today: "'heddiw am' p",
      tomorrow: "'yfory am' p",
      nextWeek: "eeee 'am' p",
      other: "P"
    };
    formatRelative18 = function formatRelative19(token, _date, _baseDate, _options) {
      return formatRelativeLocale9[token];
    };
    formatRelative_default10 = formatRelative18;
  }
});

// node_modules/date-fns/esm/locale/cy/_lib/localize/index.js
var eraValues9, quarterValues9, monthValues9, dayValues9, dayPeriodValues9, formattingDayPeriodValues8, ordinalNumber17, localize9, localize_default10;
var init_localize10 = __esm({
  "node_modules/date-fns/esm/locale/cy/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues9 = {
      narrow: ["C", "O"],
      abbreviated: ["CC", "OC"],
      wide: ["Cyn Crist", "Ar √¥l Crist"]
    };
    quarterValues9 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Ch1", "Ch2", "Ch3", "Ch4"],
      wide: ["Chwarter 1af", "2ail chwarter", "3ydd chwarter", "4ydd chwarter"]
    };
    monthValues9 = {
      narrow: ["I", "Ch", "Ma", "E", "Mi", "Me", "G", "A", "Md", "H", "T", "Rh"],
      abbreviated: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag"],
      wide: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"]
    };
    dayValues9 = {
      narrow: ["S", "Ll", "M", "M", "I", "G", "S"],
      short: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
      abbreviated: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
      wide: ["dydd Sul", "dydd Llun", "dydd Mawrth", "dydd Mercher", "dydd Iau", "dydd Gwener", "dydd Sadwrn"]
    };
    dayPeriodValues9 = {
      narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      },
      abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      },
      wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      }
    };
    formattingDayPeriodValues8 = {
      narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      },
      abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      },
      wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      }
    };
    ordinalNumber17 = function ordinalNumber18(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      if (number < 20) {
        switch (number) {
          case 0:
            return number + "fed";
          case 1:
            return number + "af";
          case 2:
            return number + "ail";
          case 3:
          case 4:
            return number + "ydd";
          case 5:
          case 6:
            return number + "ed";
          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 15:
          case 18:
            return number + "fed";
          case 11:
          case 13:
          case 14:
          case 16:
          case 17:
          case 19:
            return number + "eg";
        }
      } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
        return number + "fed";
      }
      return number + "ain";
    };
    localize9 = {
      ordinalNumber: ordinalNumber17,
      era: buildLocalizeFn({
        values: eraValues9,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues9,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback9(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues9,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues9,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues9,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues8,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default10 = localize9;
  }
});

// node_modules/date-fns/esm/locale/cy/_lib/match/index.js
var matchOrdinalNumberPattern9, parseOrdinalNumberPattern9, matchEraPatterns9, parseEraPatterns9, matchQuarterPatterns9, parseQuarterPatterns9, matchMonthPatterns9, parseMonthPatterns9, matchDayPatterns9, parseDayPatterns9, matchDayPeriodPatterns9, parseDayPeriodPatterns9, match9, match_default10;
var init_match10 = __esm({
  "node_modules/date-fns/esm/locale/cy/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern9 = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
    parseOrdinalNumberPattern9 = /\d+/i;
    matchEraPatterns9 = {
      narrow: /^(c|o)/i,
      abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
      wide: /^(cyn christ|ar √¥l crist|ar ol crist)/i
    };
    parseEraPatterns9 = {
      wide: [/^c/i, /^(ar √¥l crist|ar ol crist)/i],
      any: [/^c/i, /^o/i]
    };
    matchQuarterPatterns9 = {
      narrow: /^[1234]/i,
      abbreviated: /^ch[1234]/i,
      wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
    };
    parseQuarterPatterns9 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns9 = {
      narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
      abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
      wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
    };
    parseMonthPatterns9 = {
      narrow: [/^i/i, /^ch/i, /^m/i, /^e/i, /^m/i, /^m/i, /^g/i, /^a/i, /^m/i, /^h/i, /^t/i, /^rh/i],
      any: [/^io/i, /^ch/i, /^maw/i, /^e/i, /^mai/i, /^meh/i, /^g/i, /^a/i, /^med/i, /^h/i, /^t/i, /^rh/i]
    };
    matchDayPatterns9 = {
      narrow: /^(s|ll|m|i|g)/i,
      short: /^(su|ll|ma|me|ia|gw|sa)/i,
      abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
      wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
    };
    parseDayPatterns9 = {
      narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
      wide: [/^dydd su/i, /^dydd ll/i, /^dydd ma/i, /^dydd me/i, /^dydd i/i, /^dydd g/i, /^dydd sa/i],
      any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
    };
    matchDayPeriodPatterns9 = {
      narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
      any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
    };
    parseDayPeriodPatterns9 = {
      any: {
        am: /^b|(y\.?\s?b\.?)/i,
        pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
        midnight: /^hn|hanner nos/i,
        noon: /^hd|hanner dydd/i,
        morning: /bore/i,
        afternoon: /prynhawn/i,
        evening: /^gyda'r nos$/i,
        night: /blah/i
      }
    };
    match9 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern9,
        parsePattern: parseOrdinalNumberPattern9,
        valueCallback: function valueCallback17(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns9,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns9,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns9,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns9,
        defaultParseWidth: "any",
        valueCallback: function valueCallback18(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns9,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns9,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns9,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns9,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns9,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns9,
        defaultParseWidth: "any"
      })
    };
    match_default10 = match9;
  }
});

// node_modules/date-fns/esm/locale/cy/index.js
var cy_exports = {};
__export(cy_exports, {
  default: () => cy_default
});
var locale9, cy_default;
var init_cy = __esm({
  "node_modules/date-fns/esm/locale/cy/index.js"() {
    init_formatDistance11();
    init_formatLong9();
    init_formatRelative11();
    init_localize10();
    init_match10();
    locale9 = {
      code: "cy",
      formatDistance: formatDistance_default10,
      formatLong: formatLong_default9,
      formatRelative: formatRelative_default10,
      localize: localize_default10,
      match: match_default10,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    cy_default = locale9;
  }
});

// node_modules/date-fns/esm/locale/da/_lib/formatDistance/index.js
var formatDistanceLocale10, formatDistance20, formatDistance_default11;
var init_formatDistance12 = __esm({
  "node_modules/date-fns/esm/locale/da/_lib/formatDistance/index.js"() {
    formatDistanceLocale10 = {
      lessThanXSeconds: {
        one: "mindre end √©t sekund",
        other: "mindre end {{count}} sekunder"
      },
      xSeconds: {
        one: "1 sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "√©t halvt minut",
      lessThanXMinutes: {
        one: "mindre end √©t minut",
        other: "mindre end {{count}} minutter"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minutter"
      },
      aboutXHours: {
        one: "cirka 1 time",
        other: "cirka {{count}} timer"
      },
      xHours: {
        one: "1 time",
        other: "{{count}} timer"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dage"
      },
      aboutXWeeks: {
        one: "cirka 1 uge",
        other: "cirka {{count}} uger"
      },
      xWeeks: {
        one: "1 uge",
        other: "{{count}} uger"
      },
      aboutXMonths: {
        one: "cirka 1 m√•ned",
        other: "cirka {{count}} m√•neder"
      },
      xMonths: {
        one: "1 m√•ned",
        other: "{{count}} m√•neder"
      },
      aboutXYears: {
        one: "cirka 1 √•r",
        other: "cirka {{count}} √•r"
      },
      xYears: {
        one: "1 √•r",
        other: "{{count}} √•r"
      },
      overXYears: {
        one: "over 1 √•r",
        other: "over {{count}} √•r"
      },
      almostXYears: {
        one: "n√¶sten 1 √•r",
        other: "n√¶sten {{count}} √•r"
      }
    };
    formatDistance20 = function formatDistance21(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale10[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " siden";
        }
      }
      return result;
    };
    formatDistance_default11 = formatDistance20;
  }
});

// node_modules/date-fns/esm/locale/da/_lib/formatLong/index.js
var dateFormats10, timeFormats10, dateTimeFormats10, formatLong10, formatLong_default10;
var init_formatLong10 = __esm({
  "node_modules/date-fns/esm/locale/da/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats10 = {
      full: "EEEE 'den' d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd/MM/y"
    };
    timeFormats10 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats10 = {
      full: "{{date}} 'kl'. {{time}}",
      long: "{{date}} 'kl'. {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong10 = {
      date: buildFormatLongFn({
        formats: dateFormats10,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats10,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats10,
        defaultWidth: "full"
      })
    };
    formatLong_default10 = formatLong10;
  }
});

// node_modules/date-fns/esm/locale/da/_lib/formatRelative/index.js
var formatRelativeLocale10, formatRelative20, formatRelative_default11;
var init_formatRelative12 = __esm({
  "node_modules/date-fns/esm/locale/da/_lib/formatRelative/index.js"() {
    formatRelativeLocale10 = {
      lastWeek: "'sidste' eeee 'kl.' p",
      yesterday: "'i g√•r kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "'p√•' eeee 'kl.' p",
      other: "P"
    };
    formatRelative20 = function formatRelative21(token, _date, _baseDate, _options) {
      return formatRelativeLocale10[token];
    };
    formatRelative_default11 = formatRelative20;
  }
});

// node_modules/date-fns/esm/locale/da/_lib/localize/index.js
var eraValues10, quarterValues10, monthValues10, dayValues10, dayPeriodValues10, formattingDayPeriodValues9, ordinalNumber19, localize10, localize_default11;
var init_localize11 = __esm({
  "node_modules/date-fns/esm/locale/da/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues10 = {
      narrow: ["fvt", "vt"],
      abbreviated: ["f.v.t.", "v.t."],
      wide: ["f√∏r vesterlandsk tidsregning", "vesterlandsk tidsregning"]
    };
    quarterValues10 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. kvt.", "2. kvt.", "3. kvt.", "4. kvt."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues10 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."],
      wide: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"]
    };
    dayValues10 = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["s√∏", "ma", "ti", "on", "to", "fr", "l√∏"],
      abbreviated: ["s√∏n.", "man.", "tir.", "ons.", "tor.", "fre.", "l√∏r."],
      wide: ["s√∏ndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "l√∏rdag"]
    };
    dayPeriodValues10 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      }
    };
    formattingDayPeriodValues9 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      }
    };
    ordinalNumber19 = function ordinalNumber20(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize10 = {
      ordinalNumber: ordinalNumber19,
      era: buildLocalizeFn({
        values: eraValues10,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues10,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback10(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues10,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues10,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues10,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues9,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default11 = localize10;
  }
});

// node_modules/date-fns/esm/locale/da/_lib/match/index.js
var matchOrdinalNumberPattern10, parseOrdinalNumberPattern10, matchEraPatterns10, parseEraPatterns10, matchQuarterPatterns10, parseQuarterPatterns10, matchMonthPatterns10, parseMonthPatterns10, matchDayPatterns10, parseDayPatterns10, matchDayPeriodPatterns10, parseDayPeriodPatterns10, match10, match_default11;
var init_match11 = __esm({
  "node_modules/date-fns/esm/locale/da/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern10 = /^(\d+)(\.)?/i;
    parseOrdinalNumberPattern10 = /\d+/i;
    matchEraPatterns10 = {
      narrow: /^(fKr|fvt|eKr|vt)/i,
      abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
      wide: /^(f.Kr.|f√∏r vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
    };
    parseEraPatterns10 = {
      any: [/^f/i, /^(v|e)/i]
    };
    matchQuarterPatterns10 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]. kvt\./i,
      wide: /^[1234]\.? kvartal/i
    };
    parseQuarterPatterns10 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns10 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
    };
    parseMonthPatterns10 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns10 = {
      narrow: /^[smtofl]/i,
      short: /^(s√∏n.|man.|tir.|ons.|tor.|fre.|l√∏r.)/i,
      abbreviated: /^(s√∏n|man|tir|ons|tor|fre|l√∏r)/i,
      wide: /^(s√∏ndag|mandag|tirsdag|onsdag|torsdag|fredag|l√∏rdag)/i
    };
    parseDayPatterns10 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    matchDayPeriodPatterns10 = {
      narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
      any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
    };
    parseDayPeriodPatterns10 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /midnat/i,
        noon: /middag/i,
        morning: /morgen/i,
        afternoon: /eftermiddag/i,
        evening: /aften/i,
        night: /nat/i
      }
    };
    match10 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern10,
        parsePattern: parseOrdinalNumberPattern10,
        valueCallback: function valueCallback19(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns10,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns10,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns10,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns10,
        defaultParseWidth: "any",
        valueCallback: function valueCallback20(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns10,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns10,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns10,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns10,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns10,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns10,
        defaultParseWidth: "any"
      })
    };
    match_default11 = match10;
  }
});

// node_modules/date-fns/esm/locale/da/index.js
var da_exports = {};
__export(da_exports, {
  default: () => da_default
});
var locale10, da_default;
var init_da = __esm({
  "node_modules/date-fns/esm/locale/da/index.js"() {
    init_formatDistance12();
    init_formatLong10();
    init_formatRelative12();
    init_localize11();
    init_match11();
    locale10 = {
      code: "da",
      formatDistance: formatDistance_default11,
      formatLong: formatLong_default10,
      formatRelative: formatRelative_default11,
      localize: localize_default11,
      match: match_default11,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    da_default = locale10;
  }
});

// node_modules/date-fns/esm/locale/de/_lib/formatDistance/index.js
var formatDistanceLocale11, formatDistance22, formatDistance_default12;
var init_formatDistance13 = __esm({
  "node_modules/date-fns/esm/locale/de/_lib/formatDistance/index.js"() {
    formatDistanceLocale11 = {
      lessThanXSeconds: {
        standalone: {
          one: "weniger als 1 Sekunde",
          other: "weniger als {{count}} Sekunden"
        },
        withPreposition: {
          one: "weniger als 1 Sekunde",
          other: "weniger als {{count}} Sekunden"
        }
      },
      xSeconds: {
        standalone: {
          one: "1 Sekunde",
          other: "{{count}} Sekunden"
        },
        withPreposition: {
          one: "1 Sekunde",
          other: "{{count}} Sekunden"
        }
      },
      halfAMinute: {
        standalone: "halbe Minute",
        withPreposition: "halben Minute"
      },
      lessThanXMinutes: {
        standalone: {
          one: "weniger als 1 Minute",
          other: "weniger als {{count}} Minuten"
        },
        withPreposition: {
          one: "weniger als 1 Minute",
          other: "weniger als {{count}} Minuten"
        }
      },
      xMinutes: {
        standalone: {
          one: "1 Minute",
          other: "{{count}} Minuten"
        },
        withPreposition: {
          one: "1 Minute",
          other: "{{count}} Minuten"
        }
      },
      aboutXHours: {
        standalone: {
          one: "etwa 1 Stunde",
          other: "etwa {{count}} Stunden"
        },
        withPreposition: {
          one: "etwa 1 Stunde",
          other: "etwa {{count}} Stunden"
        }
      },
      xHours: {
        standalone: {
          one: "1 Stunde",
          other: "{{count}} Stunden"
        },
        withPreposition: {
          one: "1 Stunde",
          other: "{{count}} Stunden"
        }
      },
      xDays: {
        standalone: {
          one: "1 Tag",
          other: "{{count}} Tage"
        },
        withPreposition: {
          one: "1 Tag",
          other: "{{count}} Tagen"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "etwa 1 Woche",
          other: "etwa {{count}} Wochen"
        },
        withPreposition: {
          one: "etwa 1 Woche",
          other: "etwa {{count}} Wochen"
        }
      },
      xWeeks: {
        standalone: {
          one: "1 Woche",
          other: "{{count}} Wochen"
        },
        withPreposition: {
          one: "1 Woche",
          other: "{{count}} Wochen"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "etwa 1 Monat",
          other: "etwa {{count}} Monate"
        },
        withPreposition: {
          one: "etwa 1 Monat",
          other: "etwa {{count}} Monaten"
        }
      },
      xMonths: {
        standalone: {
          one: "1 Monat",
          other: "{{count}} Monate"
        },
        withPreposition: {
          one: "1 Monat",
          other: "{{count}} Monaten"
        }
      },
      aboutXYears: {
        standalone: {
          one: "etwa 1 Jahr",
          other: "etwa {{count}} Jahre"
        },
        withPreposition: {
          one: "etwa 1 Jahr",
          other: "etwa {{count}} Jahren"
        }
      },
      xYears: {
        standalone: {
          one: "1 Jahr",
          other: "{{count}} Jahre"
        },
        withPreposition: {
          one: "1 Jahr",
          other: "{{count}} Jahren"
        }
      },
      overXYears: {
        standalone: {
          one: "mehr als 1 Jahr",
          other: "mehr als {{count}} Jahre"
        },
        withPreposition: {
          one: "mehr als 1 Jahr",
          other: "mehr als {{count}} Jahren"
        }
      },
      almostXYears: {
        standalone: {
          one: "fast 1 Jahr",
          other: "fast {{count}} Jahre"
        },
        withPreposition: {
          one: "fast 1 Jahr",
          other: "fast {{count}} Jahren"
        }
      }
    };
    formatDistance22 = function formatDistance23(token, count, options) {
      var result;
      var tokenValue = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale11[token].withPreposition : formatDistanceLocale11[token].standalone;
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return "vor " + result;
        }
      }
      return result;
    };
    formatDistance_default12 = formatDistance22;
  }
});

// node_modules/date-fns/esm/locale/de/_lib/formatLong/index.js
var dateFormats11, timeFormats11, dateTimeFormats11, formatLong11, formatLong_default11;
var init_formatLong11 = __esm({
  "node_modules/date-fns/esm/locale/de/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats11 = {
      full: "EEEE, do MMMM y",
      // Montag, 7. Januar 2018
      long: "do MMMM y",
      // 7. Januar 2018
      medium: "do MMM y",
      // 7. Jan. 2018
      short: "dd.MM.y"
      // 07.01.2018
    };
    timeFormats11 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats11 = {
      full: "{{date}} 'um' {{time}}",
      long: "{{date}} 'um' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong11 = {
      date: buildFormatLongFn({
        formats: dateFormats11,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats11,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats11,
        defaultWidth: "full"
      })
    };
    formatLong_default11 = formatLong11;
  }
});

// node_modules/date-fns/esm/locale/de/_lib/formatRelative/index.js
var formatRelativeLocale11, formatRelative22, formatRelative_default12;
var init_formatRelative13 = __esm({
  "node_modules/date-fns/esm/locale/de/_lib/formatRelative/index.js"() {
    formatRelativeLocale11 = {
      lastWeek: "'letzten' eeee 'um' p",
      yesterday: "'gestern um' p",
      today: "'heute um' p",
      tomorrow: "'morgen um' p",
      nextWeek: "eeee 'um' p",
      other: "P"
    };
    formatRelative22 = function formatRelative23(token, _date, _baseDate, _options) {
      return formatRelativeLocale11[token];
    };
    formatRelative_default12 = formatRelative22;
  }
});

// node_modules/date-fns/esm/locale/de/_lib/localize/index.js
var eraValues11, quarterValues11, monthValues11, formattingMonthValues3, dayValues11, dayPeriodValues11, formattingDayPeriodValues10, ordinalNumber21, localize11, localize_default12;
var init_localize12 = __esm({
  "node_modules/date-fns/esm/locale/de/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues11 = {
      narrow: ["v.Chr.", "n.Chr."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["vor Christus", "nach Christus"]
    };
    quarterValues11 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
    };
    monthValues11 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "M√§r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
      wide: ["Januar", "Februar", "M√§rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
    };
    formattingMonthValues3 = {
      narrow: monthValues11.narrow,
      abbreviated: ["Jan.", "Feb.", "M√§rz", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez."],
      wide: monthValues11.wide
    };
    dayValues11 = {
      narrow: ["S", "M", "D", "M", "D", "F", "S"],
      short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
      abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
      wide: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
    };
    dayPeriodValues11 = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachm.",
        evening: "Abend",
        night: "Nacht"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      }
    };
    formattingDayPeriodValues10 = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachm.",
        evening: "abends",
        night: "nachts"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      }
    };
    ordinalNumber21 = function ordinalNumber22(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize11 = {
      ordinalNumber: ordinalNumber21,
      era: buildLocalizeFn({
        values: eraValues11,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues11,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback11(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues11,
        formattingValues: formattingMonthValues3,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues11,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues11,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues10,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default12 = localize11;
  }
});

// node_modules/date-fns/esm/locale/de/_lib/match/index.js
var matchOrdinalNumberPattern11, parseOrdinalNumberPattern11, matchEraPatterns11, parseEraPatterns11, matchQuarterPatterns11, parseQuarterPatterns11, matchMonthPatterns11, parseMonthPatterns11, matchDayPatterns11, parseDayPatterns11, matchDayPeriodPatterns11, parseDayPeriodPatterns11, match11, match_default12;
var init_match12 = __esm({
  "node_modules/date-fns/esm/locale/de/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern11 = /^(\d+)(\.)?/i;
    parseOrdinalNumberPattern11 = /\d+/i;
    matchEraPatterns11 = {
      narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
    };
    parseEraPatterns11 = {
      any: [/^v/i, /^n/i]
    };
    matchQuarterPatterns11 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? Quartal/i
    };
    parseQuarterPatterns11 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns11 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(j[a√§]n|feb|m√§r[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
      wide: /^(januar|februar|m√§rz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
    };
    parseMonthPatterns11 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^j[a√§]/i, /^f/i, /^m√§r/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns11 = {
      narrow: /^[smdmf]/i,
      short: /^(so|mo|di|mi|do|fr|sa)/i,
      abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
      wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
    };
    parseDayPatterns11 = {
      any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
    };
    matchDayPeriodPatterns11 = {
      narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
    };
    parseDayPeriodPatterns11 = {
      any: {
        am: /^v/i,
        pm: /^n/i,
        midnight: /^Mitte/i,
        noon: /^Mitta/i,
        morning: /morgens/i,
        afternoon: /nachmittags/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /abends/i,
        night: /nachts/i
        // will never be matched. Night is matched by `pm`
      }
    };
    match11 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern11,
        parsePattern: parseOrdinalNumberPattern11,
        valueCallback: function valueCallback21(value) {
          return parseInt(value);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns11,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns11,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns11,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns11,
        defaultParseWidth: "any",
        valueCallback: function valueCallback22(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns11,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns11,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns11,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns11,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns11,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns11,
        defaultParseWidth: "any"
      })
    };
    match_default12 = match11;
  }
});

// node_modules/date-fns/esm/locale/de/index.js
var de_exports = {};
__export(de_exports, {
  default: () => de_default
});
var locale11, de_default;
var init_de = __esm({
  "node_modules/date-fns/esm/locale/de/index.js"() {
    init_formatDistance13();
    init_formatLong11();
    init_formatRelative13();
    init_localize12();
    init_match12();
    locale11 = {
      code: "de",
      formatDistance: formatDistance_default12,
      formatLong: formatLong_default11,
      formatRelative: formatRelative_default12,
      localize: localize_default12,
      match: match_default12,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    de_default = locale11;
  }
});

// node_modules/date-fns/esm/locale/el/_lib/formatDistance/index.js
var formatDistanceLocale12, formatDistance24, formatDistance_default13;
var init_formatDistance14 = __esm({
  "node_modules/date-fns/esm/locale/el/_lib/formatDistance/index.js"() {
    formatDistanceLocale12 = {
      lessThanXSeconds: {
        one: "ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå Œ≠ŒΩŒ± Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒø",
        other: "ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå {{count}} Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒ±"
      },
      xSeconds: {
        one: "1 Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒø",
        other: "{{count}} Œ¥ŒµœÖœÑŒµœÅœåŒªŒµœÄœÑŒ±"
      },
      halfAMinute: "ŒºŒπœÉœå ŒªŒµœÄœÑœå",
      lessThanXMinutes: {
        one: "ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå Œ≠ŒΩŒ± ŒªŒµœÄœÑœå",
        other: "ŒªŒπŒ≥œåœÑŒµœÅŒø Œ±œÄœå {{count}} ŒªŒµœÄœÑŒ¨"
      },
      xMinutes: {
        one: "1 ŒªŒµœÄœÑœå",
        other: "{{count}} ŒªŒµœÄœÑŒ¨"
      },
      aboutXHours: {
        one: "œÄŒµœÅŒØœÄŒøœÖ 1 œéœÅŒ±",
        other: "œÄŒµœÅŒØœÄŒøœÖ {{count}} œéœÅŒµœÇ"
      },
      xHours: {
        one: "1 œéœÅŒ±",
        other: "{{count}} œéœÅŒµœÇ"
      },
      xDays: {
        one: "1 Œ∑ŒºŒ≠œÅŒ±",
        other: "{{count}} Œ∑ŒºŒ≠œÅŒµœÇ"
      },
      aboutXWeeks: {
        one: "œÄŒµœÅŒØœÄŒøœÖ 1 ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥Œ±",
        other: "œÄŒµœÅŒØœÄŒøœÖ {{count}} ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ"
      },
      xWeeks: {
        one: "1 ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥Œ±",
        other: "{{count}} ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ"
      },
      aboutXMonths: {
        one: "œÄŒµœÅŒØœÄŒøœÖ 1 ŒºŒÆŒΩŒ±œÇ",
        other: "œÄŒµœÅŒØœÄŒøœÖ {{count}} ŒºŒÆŒΩŒµœÇ"
      },
      xMonths: {
        one: "1 ŒºŒÆŒΩŒ±œÇ",
        other: "{{count}} ŒºŒÆŒΩŒµœÇ"
      },
      aboutXYears: {
        one: "œÄŒµœÅŒØœÄŒøœÖ 1 œáœÅœåŒΩŒø",
        other: "œÄŒµœÅŒØœÄŒøœÖ {{count}} œáœÅœåŒΩŒπŒ±"
      },
      xYears: {
        one: "1 œáœÅœåŒΩŒø",
        other: "{{count}} œáœÅœåŒΩŒπŒ±"
      },
      overXYears: {
        one: "œÄŒ¨ŒΩœâ Œ±œÄœå 1 œáœÅœåŒΩŒø",
        other: "œÄŒ¨ŒΩœâ Œ±œÄœå {{count}} œáœÅœåŒΩŒπŒ±"
      },
      almostXYears: {
        one: "œÄŒµœÅŒØœÄŒøœÖ 1 œáœÅœåŒΩŒø",
        other: "œÄŒµœÅŒØœÄŒøœÖ {{count}} œáœÅœåŒΩŒπŒ±"
      }
    };
    formatDistance24 = function formatDistance25(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale12[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "œÉŒµ " + result;
        } else {
          return result + " œÄœÅŒπŒΩ";
        }
      }
      return result;
    };
    formatDistance_default13 = formatDistance24;
  }
});

// node_modules/date-fns/esm/locale/el/_lib/formatLong/index.js
var dateFormats12, timeFormats12, dateTimeFormats12, formatLong12, formatLong_default12;
var init_formatLong12 = __esm({
  "node_modules/date-fns/esm/locale/el/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats12 = {
      full: "EEEE, d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "d/M/yy"
    };
    timeFormats12 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats12 = {
      full: "{{date}} - {{time}}",
      long: "{{date}} - {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong12 = {
      date: buildFormatLongFn({
        formats: dateFormats12,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats12,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats12,
        defaultWidth: "full"
      })
    };
    formatLong_default12 = formatLong12;
  }
});

// node_modules/date-fns/esm/locale/el/_lib/formatRelative/index.js
var formatRelativeLocale12, formatRelative24, formatRelative_default13;
var init_formatRelative14 = __esm({
  "node_modules/date-fns/esm/locale/el/_lib/formatRelative/index.js"() {
    formatRelativeLocale12 = {
      lastWeek: function lastWeek3(date) {
        switch (date.getUTCDay()) {
          case 6:
            return "'œÑŒø œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒø' eeee 'œÉœÑŒπœÇ' p";
          default:
            return "'œÑŒ∑ŒΩ œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒ∑' eeee 'œÉœÑŒπœÇ' p";
        }
      },
      yesterday: "'œáŒ∏ŒµœÇ œÉœÑŒπœÇ' p",
      today: "'œÉŒÆŒºŒµœÅŒ± œÉœÑŒπœÇ' p",
      tomorrow: "'Œ±œçœÅŒπŒø œÉœÑŒπœÇ' p",
      nextWeek: "eeee 'œÉœÑŒπœÇ' p",
      other: "P"
    };
    formatRelative24 = function formatRelative25(token, date) {
      var format2 = formatRelativeLocale12[token];
      if (typeof format2 === "function")
        return format2(date);
      return format2;
    };
    formatRelative_default13 = formatRelative24;
  }
});

// node_modules/date-fns/esm/locale/el/_lib/localize/index.js
var eraValues12, quarterValues12, monthValues12, formattingMonthValues4, dayValues12, dayPeriodValues12, ordinalNumber23, localize12, localize_default13;
var init_localize13 = __esm({
  "node_modules/date-fns/esm/locale/el/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues12 = {
      narrow: ["œÄŒß", "ŒºŒß"],
      abbreviated: ["œÄ.Œß.", "Œº.Œß."],
      wide: ["œÄœÅŒø ŒßœÅŒπœÉœÑŒøœç", "ŒºŒµœÑŒ¨ ŒßœÅŒπœÉœÑœåŒΩ"]
    };
    quarterValues12 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Œ§1", "Œ§2", "Œ§3", "Œ§4"],
      wide: ["1Œø œÑœÅŒØŒºŒ∑ŒΩŒø", "2Œø œÑœÅŒØŒºŒ∑ŒΩŒø", "3Œø œÑœÅŒØŒºŒ∑ŒΩŒø", "4Œø œÑœÅŒØŒºŒ∑ŒΩŒø"]
    };
    monthValues12 = {
      narrow: ["Œô", "Œ¶", "Œú", "Œë", "Œú", "Œô", "Œô", "Œë", "Œ£", "Œü", "Œù", "Œî"],
      abbreviated: ["ŒôŒ±ŒΩ", "Œ¶ŒµŒ≤", "ŒúŒ¨œÅ", "ŒëœÄœÅ", "ŒúŒ¨Œπ", "ŒôŒøœçŒΩ", "ŒôŒøœçŒª", "ŒëœçŒ≥", "Œ£ŒµœÄ", "ŒüŒ∫œÑ", "ŒùŒøŒ≠", "ŒîŒµŒ∫"],
      wide: ["ŒôŒ±ŒΩŒøœÖŒ¨œÅŒπŒøœÇ", "Œ¶ŒµŒ≤œÅŒøœÖŒ¨œÅŒπŒøœÇ", "ŒúŒ¨œÅœÑŒπŒøœÇ", "ŒëœÄœÅŒØŒªŒπŒøœÇ", "ŒúŒ¨ŒπŒøœÇ", "ŒôŒøœçŒΩŒπŒøœÇ", "ŒôŒøœçŒªŒπŒøœÇ", "ŒëœçŒ≥ŒøœÖœÉœÑŒøœÇ", "Œ£ŒµœÄœÑŒ≠ŒºŒ≤œÅŒπŒøœÇ", "ŒüŒ∫œÑœéŒ≤œÅŒπŒøœÇ", "ŒùŒøŒ≠ŒºŒ≤œÅŒπŒøœÇ", "ŒîŒµŒ∫Œ≠ŒºŒ≤œÅŒπŒøœÇ"]
    };
    formattingMonthValues4 = {
      narrow: ["Œô", "Œ¶", "Œú", "Œë", "Œú", "Œô", "Œô", "Œë", "Œ£", "Œü", "Œù", "Œî"],
      abbreviated: ["ŒôŒ±ŒΩ", "Œ¶ŒµŒ≤", "ŒúŒ±œÅ", "ŒëœÄœÅ", "ŒúŒ±Œê", "ŒôŒøœÖŒΩ", "ŒôŒøœÖŒª", "ŒëœÖŒ≥", "Œ£ŒµœÄ", "ŒüŒ∫œÑ", "ŒùŒøŒµ", "ŒîŒµŒ∫"],
      wide: ["ŒôŒ±ŒΩŒøœÖŒ±œÅŒØŒøœÖ", "Œ¶ŒµŒ≤œÅŒøœÖŒ±œÅŒØŒøœÖ", "ŒúŒ±œÅœÑŒØŒøœÖ", "ŒëœÄœÅŒπŒªŒØŒøœÖ", "ŒúŒ±ŒêŒøœÖ", "ŒôŒøœÖŒΩŒØŒøœÖ", "ŒôŒøœÖŒªŒØŒøœÖ", "ŒëœÖŒ≥ŒøœçœÉœÑŒøœÖ", "Œ£ŒµœÄœÑŒµŒºŒ≤œÅŒØŒøœÖ", "ŒüŒ∫œÑœâŒ≤œÅŒØŒøœÖ", "ŒùŒøŒµŒºŒ≤œÅŒØŒøœÖ", "ŒîŒµŒ∫ŒµŒºŒ≤œÅŒØŒøœÖ"]
    };
    dayValues12 = {
      narrow: ["Œö", "Œî", "T", "Œ§", "Œ†", "Œ†", "Œ£"],
      short: ["ŒöœÖ", "ŒîŒµ", "Œ§œÅ", "Œ§Œµ", "Œ†Œ≠", "Œ†Œ±", "Œ£Œ¨"],
      abbreviated: ["ŒöœÖœÅ", "ŒîŒµœÖ", "Œ§œÅŒØ", "Œ§ŒµœÑ", "Œ†Œ≠Œº", "Œ†Œ±œÅ", "Œ£Œ¨Œ≤"],
      wide: ["ŒöœÖœÅŒπŒ±Œ∫ŒÆ", "ŒîŒµœÖœÑŒ≠œÅŒ±", "Œ§œÅŒØœÑŒ∑", "Œ§ŒµœÑŒ¨œÅœÑŒ∑", "Œ†Œ≠ŒºœÄœÑŒ∑", "Œ†Œ±œÅŒ±œÉŒ∫ŒµœÖŒÆ", "Œ£Œ¨Œ≤Œ≤Œ±œÑŒø"]
    };
    dayPeriodValues12 = {
      narrow: {
        am: "œÄŒº",
        pm: "ŒºŒº",
        midnight: "ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±",
        noon: "ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ",
        morning: "œÄœÅœâŒØ",
        afternoon: "Œ±œÄœåŒ≥ŒµœÖŒºŒ±",
        evening: "Œ≤œÅŒ¨Œ¥œÖ",
        night: "ŒΩœçœáœÑŒ±"
      },
      abbreviated: {
        am: "œÄ.Œº.",
        pm: "Œº.Œº.",
        midnight: "ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±",
        noon: "ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ",
        morning: "œÄœÅœâŒØ",
        afternoon: "Œ±œÄœåŒ≥ŒµœÖŒºŒ±",
        evening: "Œ≤œÅŒ¨Œ¥œÖ",
        night: "ŒΩœçœáœÑŒ±"
      },
      wide: {
        am: "œÄ.Œº.",
        pm: "Œº.Œº.",
        midnight: "ŒºŒµœÉŒ¨ŒΩœÖœáœÑŒ±",
        noon: "ŒºŒµœÉŒ∑ŒºŒ≠œÅŒπ",
        morning: "œÄœÅœâŒØ",
        afternoon: "Œ±œÄœåŒ≥ŒµœÖŒºŒ±",
        evening: "Œ≤œÅŒ¨Œ¥œÖ",
        night: "ŒΩœçœáœÑŒ±"
      }
    };
    ordinalNumber23 = function ordinalNumber24(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      var suffix;
      if (unit === "year" || unit === "month") {
        suffix = "ŒøœÇ";
      } else if (unit === "week" || unit === "dayOfYear" || unit === "day" || unit === "hour" || unit === "date") {
        suffix = "Œ∑";
      } else {
        suffix = "Œø";
      }
      return number + suffix;
    };
    localize12 = {
      ordinalNumber: ordinalNumber23,
      era: buildLocalizeFn({
        values: eraValues12,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues12,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback12(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues12,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues4,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues12,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues12,
        defaultWidth: "wide"
      })
    };
    localize_default13 = localize12;
  }
});

// node_modules/date-fns/esm/locale/el/_lib/match/index.js
var matchOrdinalNumberPattern12, parseOrdinalNumberPattern12, matchEraPatterns12, parseEraPatterns12, matchQuarterPatterns12, parseQuarterPatterns12, matchMonthPatterns12, parseMonthPatterns12, matchDayPatterns12, parseDayPatterns12, matchDayPeriodPatterns12, parseDayPeriodPatterns12, match12, match_default13;
var init_match13 = __esm({
  "node_modules/date-fns/esm/locale/el/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern12 = /^(\d+)(ŒøœÇ|Œ∑|Œø)?/i;
    parseOrdinalNumberPattern12 = /\d+/i;
    matchEraPatterns12 = {
      narrow: /^(œÄŒß|ŒºŒß)/i,
      abbreviated: /^(œÄ\.?\s?œá\.?|œÄ\.?\s?Œ∫\.?\s?œá\.?|Œº\.?\s?œá\.?|Œ∫\.?\s?œá\.?)/i,
      wide: /^(œÄœÅŒø ŒßœÅŒπœÉœÑŒø(œç|œÖ)|œÄœÅŒπŒΩ Œ±œÄ(œå|Œø) œÑŒ∑ŒΩ ŒöŒøŒπŒΩ(ŒÆ|Œ∑) ŒßœÅŒøŒΩŒøŒªŒøŒ≥(ŒØ|Œπ)Œ±|ŒºŒµœÑ(Œ¨|Œ±) ŒßœÅŒπœÉœÑ(œå|Œø)ŒΩ|ŒöŒøŒπŒΩ(ŒÆ|Œ∑) ŒßœÅŒøŒΩŒøŒªŒøŒ≥(ŒØ|Œπ)Œ±)/i
    };
    parseEraPatterns12 = {
      any: [/^œÄ/i, /^(Œº|Œ∫)/i]
    };
    matchQuarterPatterns12 = {
      narrow: /^[1234]/i,
      abbreviated: /^œÑ[1234]/i,
      wide: /^[1234]Œø? œÑœÅ(ŒØ|Œπ)ŒºŒ∑ŒΩŒø/i
    };
    parseQuarterPatterns12 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns12 = {
      narrow: /^[ŒπœÜŒºŒ±ŒºŒπŒπŒ±œÉŒøŒΩŒ¥]/i,
      abbreviated: /^(ŒπŒ±ŒΩ|œÜŒµŒ≤|Œº[Œ¨Œ±]œÅ|Œ±œÄœÅ|Œº[Œ¨Œ±][ŒπŒê]|ŒπŒø[œçœÖ]ŒΩ|ŒπŒø[œçœÖ]Œª|Œ±[œçœÖ]Œ≥|œÉŒµœÄ|ŒøŒ∫œÑ|ŒΩŒø[Œ≠Œµ]|Œ¥ŒµŒ∫)/i,
      wide: /^(Œº[Œ¨Œ±][ŒπŒê]|Œ±[œçœÖ]Œ≥Œø[œÖœç]œÉœÑ)(ŒøœÇ|ŒøœÖ)|(ŒπŒ±ŒΩŒøœÖ[Œ¨Œ±]œÅ|œÜŒµŒ≤œÅŒøœÖ[Œ¨Œ±]œÅ|Œº[Œ¨Œ±]œÅœÑ|Œ±œÄœÅ[ŒØŒπ]Œª|ŒπŒø[œçœÖ]ŒΩ|ŒπŒø[œçœÖ]Œª|œÉŒµœÄœÑ[Œ≠Œµ]ŒºŒ≤œÅ|ŒøŒ∫œÑ[œéœâ]Œ≤œÅ|ŒΩŒø[Œ≠Œµ]ŒºŒ≤œÅ|Œ¥ŒµŒ∫[Œ≠Œµ]ŒºŒ≤œÅ)(ŒπŒøœÇ|ŒØŒøœÖ)/i
    };
    parseMonthPatterns12 = {
      narrow: [/^Œπ/i, /^œÜ/i, /^Œº/i, /^Œ±/i, /^Œº/i, /^Œπ/i, /^Œπ/i, /^Œ±/i, /^œÉ/i, /^Œø/i, /^ŒΩ/i, /^Œ¥/i],
      any: [/^ŒπŒ±/i, /^œÜ/i, /^Œº[Œ¨Œ±]œÅ/i, /^Œ±œÄ/i, /^Œº[Œ¨Œ±][ŒπŒê]/i, /^ŒπŒø[œçœÖ]ŒΩ/i, /^ŒπŒø[œçœÖ]Œª/i, /^Œ±[œçœÖ]/i, /^œÉ/i, /^Œø/i, /^ŒΩ/i, /^Œ¥/i]
    };
    matchDayPatterns12 = {
      narrow: /^[Œ∫Œ¥œÑœÄœÉ]/i,
      short: /^(Œ∫œÖ|Œ¥Œµ|œÑœÅ|œÑŒµ|œÄ[ŒµŒ≠]|œÄ[Œ±Œ¨]|œÉ[Œ±Œ¨])/i,
      abbreviated: /^(Œ∫œÖœÅ|Œ¥ŒµœÖ|œÑœÅŒπ|œÑŒµœÑ|œÄŒµŒº|œÄŒ±œÅ|œÉŒ±Œ≤)/i,
      wide: /^(Œ∫œÖœÅŒπŒ±Œ∫(ŒÆ|Œ∑)|Œ¥ŒµœÖœÑ(Œ≠|Œµ)œÅŒ±|œÑœÅ(ŒØ|Œπ)œÑŒ∑|œÑŒµœÑ(Œ¨|Œ±)œÅœÑŒ∑|œÄ(Œ≠|Œµ)ŒºœÄœÑŒ∑|œÄŒ±œÅŒ±œÉŒ∫ŒµœÖ(ŒÆ|Œ∑)|œÉ(Œ¨|Œ±)Œ≤Œ≤Œ±œÑŒø)/i
    };
    parseDayPatterns12 = {
      narrow: [/^Œ∫/i, /^Œ¥/i, /^œÑ/i, /^œÑ/i, /^œÄ/i, /^œÄ/i, /^œÉ/i],
      any: [/^Œ∫/i, /^Œ¥/i, /^œÑœÅ/i, /^œÑŒµ/i, /^œÄ[ŒµŒ≠]/i, /^œÄ[Œ±Œ¨]/i, /^œÉ/i]
    };
    matchDayPeriodPatterns12 = {
      narrow: /^(œÄŒº|ŒºŒº|ŒºŒµœÉ(Œ¨|Œ±)ŒΩœÖœáœÑŒ±|ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)œÅŒπ|œÄœÅœâ(ŒØ|Œπ)|Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±|Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ|ŒΩ(œç|œÖ)œáœÑŒ±)/i,
      any: /^([œÄŒº]\.?\s?Œº\.?|ŒºŒµœÉ(Œ¨|Œ±)ŒΩœÖœáœÑŒ±|ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)œÅŒπ|œÄœÅœâ(ŒØ|Œπ)|Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±|Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ|ŒΩ(œç|œÖ)œáœÑŒ±)/i
    };
    parseDayPeriodPatterns12 = {
      any: {
        am: /^œÄŒº|œÄ\.\s?Œº\./i,
        pm: /^ŒºŒº|Œº\.\s?Œº\./i,
        midnight: /^ŒºŒµœÉŒ¨ŒΩ/i,
        noon: /^ŒºŒµœÉŒ∑Œº(Œ≠|Œµ)/i,
        morning: /œÄœÅœâ(ŒØ|Œπ)/i,
        afternoon: /Œ±œÄ(œå|Œø)Œ≥ŒµœÖŒºŒ±/i,
        evening: /Œ≤œÅ(Œ¨|Œ±)Œ¥œÖ/i,
        night: /ŒΩ(œç|œÖ)œáœÑŒ±/i
      }
    };
    match12 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern12,
        parsePattern: parseOrdinalNumberPattern12,
        valueCallback: function valueCallback23(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns12,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns12,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns12,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns12,
        defaultParseWidth: "any",
        valueCallback: function valueCallback24(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns12,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns12,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns12,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns12,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns12,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns12,
        defaultParseWidth: "any"
      })
    };
    match_default13 = match12;
  }
});

// node_modules/date-fns/esm/locale/el/index.js
var el_exports = {};
__export(el_exports, {
  default: () => el_default
});
var locale12, el_default;
var init_el = __esm({
  "node_modules/date-fns/esm/locale/el/index.js"() {
    init_formatDistance14();
    init_formatLong12();
    init_formatRelative14();
    init_localize13();
    init_match13();
    locale12 = {
      code: "el",
      formatDistance: formatDistance_default13,
      formatLong: formatLong_default12,
      formatRelative: formatRelative_default13,
      localize: localize_default13,
      match: match_default13,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    el_default = locale12;
  }
});

// node_modules/date-fns/esm/locale/en-AU/_lib/formatLong/index.js
var dateFormats13, timeFormats13, dateTimeFormats13, formatLong13, formatLong_default13;
var init_formatLong13 = __esm({
  "node_modules/date-fns/esm/locale/en-AU/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats13 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    timeFormats13 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats13 = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong13 = {
      date: buildFormatLongFn({
        formats: dateFormats13,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats13,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats13,
        defaultWidth: "full"
      })
    };
    formatLong_default13 = formatLong13;
  }
});

// node_modules/date-fns/esm/locale/en-AU/index.js
var en_AU_exports = {};
__export(en_AU_exports, {
  default: () => en_AU_default
});
var locale13, en_AU_default;
var init_en_AU = __esm({
  "node_modules/date-fns/esm/locale/en-AU/index.js"() {
    init_formatDistance();
    init_formatLong13();
    init_formatRelative();
    init_localize();
    init_match();
    locale13 = {
      code: "en-AU",
      formatDistance: formatDistance_default,
      formatLong: formatLong_default13,
      formatRelative: formatRelative_default,
      localize: localize_default,
      match: match_default,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    en_AU_default = locale13;
  }
});

// node_modules/date-fns/esm/locale/en-CA/_lib/formatDistance/index.js
var formatDistanceLocale13, formatDistance26, formatDistance_default14;
var init_formatDistance15 = __esm({
  "node_modules/date-fns/esm/locale/en-CA/_lib/formatDistance/index.js"() {
    formatDistanceLocale13 = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "a second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "a minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about an hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "an hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "a day",
        other: "{{count}} days"
      },
      aboutXWeeks: {
        one: "about a week",
        other: "about {{count}} weeks"
      },
      xWeeks: {
        one: "a week",
        other: "{{count}} weeks"
      },
      aboutXMonths: {
        one: "about a month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "a month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about a year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "a year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over a year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost a year",
        other: "almost {{count}} years"
      }
    };
    formatDistance26 = function formatDistance27(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale13[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    };
    formatDistance_default14 = formatDistance26;
  }
});

// node_modules/date-fns/esm/locale/en-CA/_lib/formatLong/index.js
var dateFormats14, timeFormats14, dateTimeFormats14, formatLong14, formatLong_default14;
var init_formatLong14 = __esm({
  "node_modules/date-fns/esm/locale/en-CA/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats14 = {
      full: "EEEE, MMMM do, yyyy",
      long: "MMMM do, yyyy",
      medium: "MMM d, yyyy",
      short: "yyyy-MM-dd"
    };
    timeFormats14 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats14 = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong14 = {
      date: buildFormatLongFn({
        formats: dateFormats14,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats14,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats14,
        defaultWidth: "full"
      })
    };
    formatLong_default14 = formatLong14;
  }
});

// node_modules/date-fns/esm/locale/en-CA/index.js
var en_CA_exports = {};
__export(en_CA_exports, {
  default: () => en_CA_default
});
var locale14, en_CA_default;
var init_en_CA = __esm({
  "node_modules/date-fns/esm/locale/en-CA/index.js"() {
    init_formatRelative();
    init_localize();
    init_match();
    init_formatDistance15();
    init_formatLong14();
    locale14 = {
      code: "en-CA",
      formatDistance: formatDistance_default14,
      formatLong: formatLong_default14,
      formatRelative: formatRelative_default,
      localize: localize_default,
      match: match_default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    en_CA_default = locale14;
  }
});

// node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js
var dateFormats15, timeFormats15, dateTimeFormats15, formatLong15, formatLong_default15;
var init_formatLong15 = __esm({
  "node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats15 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    timeFormats15 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats15 = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong15 = {
      date: buildFormatLongFn({
        formats: dateFormats15,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats15,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats15,
        defaultWidth: "full"
      })
    };
    formatLong_default15 = formatLong15;
  }
});

// node_modules/date-fns/esm/locale/en-GB/index.js
var en_GB_exports = {};
__export(en_GB_exports, {
  default: () => en_GB_default
});
var locale15, en_GB_default;
var init_en_GB = __esm({
  "node_modules/date-fns/esm/locale/en-GB/index.js"() {
    init_formatDistance();
    init_formatRelative();
    init_localize();
    init_match();
    init_formatLong15();
    locale15 = {
      code: "en-GB",
      formatDistance: formatDistance_default,
      formatLong: formatLong_default15,
      formatRelative: formatRelative_default,
      localize: localize_default,
      match: match_default,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    en_GB_default = locale15;
  }
});

// node_modules/date-fns/esm/locale/eo/_lib/formatDistance/index.js
var formatDistanceLocale14, formatDistance28, formatDistance_default15;
var init_formatDistance16 = __esm({
  "node_modules/date-fns/esm/locale/eo/_lib/formatDistance/index.js"() {
    formatDistanceLocale14 = {
      lessThanXSeconds: {
        one: "malpli ol sekundo",
        other: "malpli ol {{count}} sekundoj"
      },
      xSeconds: {
        one: "1 sekundo",
        other: "{{count}} sekundoj"
      },
      halfAMinute: "duonminuto",
      lessThanXMinutes: {
        one: "malpli ol minuto",
        other: "malpli ol {{count}} minutoj"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutoj"
      },
      aboutXHours: {
        one: "proksimume 1 horo",
        other: "proksimume {{count}} horoj"
      },
      xHours: {
        one: "1 horo",
        other: "{{count}} horoj"
      },
      xDays: {
        one: "1 tago",
        other: "{{count}} tagoj"
      },
      aboutXMonths: {
        one: "proksimume 1 monato",
        other: "proksimume {{count}} monatoj"
      },
      xWeeks: {
        one: "1 semajno",
        other: "{{count}} semajnoj"
      },
      aboutXWeeks: {
        one: "proksimume 1 semajno",
        other: "proksimume {{count}} semajnoj"
      },
      xMonths: {
        one: "1 monato",
        other: "{{count}} monatoj"
      },
      aboutXYears: {
        one: "proksimume 1 jaro",
        other: "proksimume {{count}} jaroj"
      },
      xYears: {
        one: "1 jaro",
        other: "{{count}} jaroj"
      },
      overXYears: {
        one: "pli ol 1 jaro",
        other: "pli ol {{count}} jaroj"
      },
      almostXYears: {
        one: "preska≈≠ 1 jaro",
        other: "preska≈≠ {{count}} jaroj"
      }
    };
    formatDistance28 = function formatDistance29(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale14[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options !== null && options !== void 0 && options.comparison && options.comparison > 0) {
          return "post " + result;
        } else {
          return "anta≈≠ " + result;
        }
      }
      return result;
    };
    formatDistance_default15 = formatDistance28;
  }
});

// node_modules/date-fns/esm/locale/eo/_lib/formatLong/index.js
var dateFormats16, timeFormats16, dateTimeFormats16, formatLong16, formatLong_default16;
var init_formatLong16 = __esm({
  "node_modules/date-fns/esm/locale/eo/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats16 = {
      full: "EEEE, do 'de' MMMM y",
      long: "y-MMMM-dd",
      medium: "y-MMM-dd",
      short: "yyyy-MM-dd"
    };
    timeFormats16 = {
      full: "Ho 'horo kaj' m:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats16 = {
      any: "{{date}} {{time}}"
    };
    formatLong16 = {
      date: buildFormatLongFn({
        formats: dateFormats16,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats16,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats16,
        defaultWidth: "any"
      })
    };
    formatLong_default16 = formatLong16;
  }
});

// node_modules/date-fns/esm/locale/eo/_lib/formatRelative/index.js
var formatRelativeLocale13, formatRelative26, formatRelative_default14;
var init_formatRelative15 = __esm({
  "node_modules/date-fns/esm/locale/eo/_lib/formatRelative/index.js"() {
    formatRelativeLocale13 = {
      lastWeek: "'pasinta' eeee 'je' p",
      yesterday: "'hiera≈≠ je' p",
      today: "'hodia≈≠ je' p",
      tomorrow: "'morga≈≠ je' p",
      nextWeek: "eeee 'je' p",
      other: "P"
    };
    formatRelative26 = function formatRelative27(token, _date, _baseDate, _options) {
      return formatRelativeLocale13[token];
    };
    formatRelative_default14 = formatRelative26;
  }
});

// node_modules/date-fns/esm/locale/eo/_lib/localize/index.js
var eraValues13, quarterValues13, monthValues13, dayValues13, dayPeriodValues13, ordinalNumber25, localize13, localize_default14;
var init_localize14 = __esm({
  "node_modules/date-fns/esm/locale/eo/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues13 = {
      narrow: ["aK", "pK"],
      abbreviated: ["a.K.E.", "p.K.E."],
      wide: ["anta≈≠ Komuna Erao", "Komuna Erao"]
    };
    quarterValues13 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1-a kvaronjaro", "2-a kvaronjaro", "3-a kvaronjaro", "4-a kvaronjaro"]
    };
    monthValues13 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "a≈≠g", "sep", "okt", "nov", "dec"],
      wide: ["januaro", "februaro", "marto", "aprilo", "majo", "junio", "julio", "a≈≠gusto", "septembro", "oktobro", "novembro", "decembro"]
    };
    dayValues13 = {
      narrow: ["D", "L", "M", "M", "ƒ¥", "V", "S"],
      short: ["di", "lu", "ma", "me", "ƒµa", "ve", "sa"],
      abbreviated: ["dim", "lun", "mar", "mer", "ƒµa≈≠", "ven", "sab"],
      wide: ["dimanƒâo", "lundo", "mardo", "merkredo", "ƒµa≈≠do", "vendredo", "sabato"]
    };
    dayPeriodValues13 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      },
      abbreviated: {
        am: "a.t.m.",
        pm: "p.t.m.",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      },
      wide: {
        am: "anta≈≠tagmeze",
        pm: "posttagmeze",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      }
    };
    ordinalNumber25 = function ordinalNumber26(dirtyNumber) {
      var number = Number(dirtyNumber);
      return number + "-a";
    };
    localize13 = {
      ordinalNumber: ordinalNumber25,
      era: buildLocalizeFn({
        values: eraValues13,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues13,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback13(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues13,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues13,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues13,
        defaultWidth: "wide"
      })
    };
    localize_default14 = localize13;
  }
});

// node_modules/date-fns/esm/locale/eo/_lib/match/index.js
var matchOrdinalNumberPattern13, parseOrdinalNumberPattern13, matchEraPatterns13, parseEraPatterns13, matchQuarterPatterns13, parseQuarterPatterns13, matchMonthPatterns13, parseMonthPatterns13, matchDayPatterns13, parseDayPatterns13, matchDayPeriodPatterns13, parseDayPeriodPatterns13, match13, match_default14;
var init_match14 = __esm({
  "node_modules/date-fns/esm/locale/eo/_lib/match/index.js"() {
    init_buildMatchPatternFn();
    init_buildMatchFn();
    matchOrdinalNumberPattern13 = /^(\d+)(-?a)?/i;
    parseOrdinalNumberPattern13 = /\d+/i;
    matchEraPatterns13 = {
      narrow: /^([ap]k)/i,
      abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
      wide: /^((anta«î |post )?komuna erao)/i
    };
    parseEraPatterns13 = {
      any: [/^a/i, /^[kp]/i]
    };
    matchQuarterPatterns13 = {
      narrow: /^[1234]/i,
      abbreviated: /^k[1234]/i,
      wide: /^[1234](-?a)? kvaronjaro/i
    };
    parseQuarterPatterns13 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns13 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(≈≠|ux|uh|u)g|sep|okt|nov|dec)/i,
      wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(≈≠|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
    };
    parseMonthPatterns13 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^a(u|≈≠)/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns13 = {
      narrow: /^[dlmƒµjvs]/i,
      short: /^(di|lu|ma|me|(ƒµ|jx|jh|j)a|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|(ƒµ|jx|jh|j)a(≈≠|ux|uh|u)|ven|sab)/i,
      wide: /^(diman(ƒâ|cx|ch|c)o|lundo|mardo|merkredo|(ƒµ|jx|jh|j)a(≈≠|ux|uh|u)do|vendredo|sabato)/i
    };
    parseDayPatterns13 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ƒµ)/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ƒµ)/i, /^v/i, /^s/i]
    };
    matchDayPeriodPatterns13 = {
      narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      wide: /^(anta(≈≠|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
    };
    parseDayPeriodPatterns13 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^noktom/i,
        noon: /^t/i,
        morning: /^m/i,
        afternoon: /^posttagmeze/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    match13 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern13,
        parsePattern: parseOrdinalNumberPattern13,
        valueCallback: function valueCallback25(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns13,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns13,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns13,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns13,
        defaultParseWidth: "any",
        valueCallback: function valueCallback26(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns13,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns13,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns13,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns13,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns13,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns13,
        defaultParseWidth: "any"
      })
    };
    match_default14 = match13;
  }
});

// node_modules/date-fns/esm/locale/eo/index.js
var eo_exports = {};
__export(eo_exports, {
  default: () => eo_default
});
var locale16, eo_default;
var init_eo = __esm({
  "node_modules/date-fns/esm/locale/eo/index.js"() {
    init_formatDistance16();
    init_formatLong16();
    init_formatRelative15();
    init_localize14();
    init_match14();
    locale16 = {
      code: "eo",
      formatDistance: formatDistance_default15,
      formatLong: formatLong_default16,
      formatRelative: formatRelative_default14,
      localize: localize_default14,
      match: match_default14,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    eo_default = locale16;
  }
});

// node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js
var formatDistanceLocale15, formatDistance30, formatDistance_default16;
var init_formatDistance17 = __esm({
  "node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js"() {
    formatDistanceLocale15 = {
      lessThanXSeconds: {
        one: "menos de un segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "medio minuto",
      lessThanXMinutes: {
        one: "menos de un minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "alrededor de 1 hora",
        other: "alrededor de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 d√≠a",
        other: "{{count}} d√≠as"
      },
      aboutXWeeks: {
        one: "alrededor de 1 semana",
        other: "alrededor de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "alrededor de 1 mes",
        other: "alrededor de {{count}} meses"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "alrededor de 1 a√±o",
        other: "alrededor de {{count}} a√±os"
      },
      xYears: {
        one: "1 a√±o",
        other: "{{count}} a√±os"
      },
      overXYears: {
        one: "m√°s de 1 a√±o",
        other: "m√°s de {{count}} a√±os"
      },
      almostXYears: {
        one: "casi 1 a√±o",
        other: "casi {{count}} a√±os"
      }
    };
    formatDistance30 = function formatDistance31(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale15[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "hace " + result;
        }
      }
      return result;
    };
    formatDistance_default16 = formatDistance30;
  }
});

// node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js
var dateFormats17, timeFormats17, dateTimeFormats17, formatLong17, formatLong_default17;
var init_formatLong17 = __esm({
  "node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats17 = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    timeFormats17 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats17 = {
      full: "{{date}} 'a las' {{time}}",
      long: "{{date}} 'a las' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong17 = {
      date: buildFormatLongFn({
        formats: dateFormats17,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats17,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats17,
        defaultWidth: "full"
      })
    };
    formatLong_default17 = formatLong17;
  }
});

// node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js
var formatRelativeLocale14, formatRelativeLocalePlural2, formatRelative28, formatRelative_default15;
var init_formatRelative16 = __esm({
  "node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js"() {
    formatRelativeLocale14 = {
      lastWeek: "'el' eeee 'pasado a la' p",
      yesterday: "'ayer a la' p",
      today: "'hoy a la' p",
      tomorrow: "'ma√±ana a la' p",
      nextWeek: "eeee 'a la' p",
      other: "P"
    };
    formatRelativeLocalePlural2 = {
      lastWeek: "'el' eeee 'pasado a las' p",
      yesterday: "'ayer a las' p",
      today: "'hoy a las' p",
      tomorrow: "'ma√±ana a las' p",
      nextWeek: "eeee 'a las' p",
      other: "P"
    };
    formatRelative28 = function formatRelative29(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural2[token];
      } else {
        return formatRelativeLocale14[token];
      }
    };
    formatRelative_default15 = formatRelative28;
  }
});

// node_modules/date-fns/esm/locale/es/_lib/localize/index.js
var eraValues14, quarterValues14, monthValues14, dayValues14, dayPeriodValues14, formattingDayPeriodValues11, ordinalNumber27, localize14, localize_default15;
var init_localize15 = __esm({
  "node_modules/date-fns/esm/locale/es/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues14 = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "despu√©s de cristo"]
    };
    quarterValues14 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1¬∫ trimestre", "2¬∫ trimestre", "3¬∫ trimestre", "4¬∫ trimestre"]
    };
    monthValues14 = {
      narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
      wide: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
    };
    dayValues14 = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["do", "lu", "ma", "mi", "ju", "vi", "s√°"],
      abbreviated: ["dom", "lun", "mar", "mi√©", "jue", "vie", "s√°b"],
      wide: ["domingo", "lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado"]
    };
    dayPeriodValues14 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "ma√±ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "ma√±ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "ma√±ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      }
    };
    formattingDayPeriodValues11 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "de la ma√±ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la ma√±ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la ma√±ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      }
    };
    ordinalNumber27 = function ordinalNumber28(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "¬∫";
    };
    localize14 = {
      ordinalNumber: ordinalNumber27,
      era: buildLocalizeFn({
        values: eraValues14,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues14,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback14(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues14,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues14,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues14,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues11,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default15 = localize14;
  }
});

// node_modules/date-fns/esm/locale/es/_lib/match/index.js
var matchOrdinalNumberPattern14, parseOrdinalNumberPattern14, matchEraPatterns14, parseEraPatterns14, matchQuarterPatterns14, parseQuarterPatterns14, matchMonthPatterns14, parseMonthPatterns14, matchDayPatterns14, parseDayPatterns14, matchDayPeriodPatterns14, parseDayPeriodPatterns14, match14, match_default15;
var init_match15 = __esm({
  "node_modules/date-fns/esm/locale/es/_lib/match/index.js"() {
    init_buildMatchPatternFn();
    init_buildMatchFn();
    matchOrdinalNumberPattern14 = /^(\d+)(¬∫)?/i;
    parseOrdinalNumberPattern14 = /\d+/i;
    matchEraPatterns14 = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes de la era com[u√∫]n|despu[e√©]s de cristo|era com[u√∫]n)/i
    };
    parseEraPatterns14 = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes de la era com[u√∫]n)/i, /^(despu[e√©]s de cristo|era com[u√∫]n)/i]
    };
    matchQuarterPatterns14 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](¬∫)? trimestre/i
    };
    parseQuarterPatterns14 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns14 = {
      narrow: /^[efmajsond]/i,
      abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
      wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
    };
    parseMonthPatterns14 = {
      narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
    };
    matchDayPatterns14 = {
      narrow: /^[dlmjvs]/i,
      short: /^(do|lu|ma|mi|ju|vi|s[√°a])/i,
      abbreviated: /^(dom|lun|mar|mi[√©e]|jue|vie|s[√°a]b)/i,
      wide: /^(domingo|lunes|martes|mi[√©e]rcoles|jueves|viernes|s[√°a]bado)/i
    };
    parseDayPatterns14 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
    };
    matchDayPeriodPatterns14 = {
      narrow: /^(a|p|mn|md|(de la|a las) (ma√±ana|tarde|noche))/i,
      any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (ma√±ana|tarde|noche))/i
    };
    parseDayPeriodPatterns14 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /ma√±ana/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noche/i
      }
    };
    match14 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern14,
        parsePattern: parseOrdinalNumberPattern14,
        valueCallback: function valueCallback27(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns14,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns14,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns14,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns14,
        defaultParseWidth: "any",
        valueCallback: function valueCallback28(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns14,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns14,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns14,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns14,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns14,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns14,
        defaultParseWidth: "any"
      })
    };
    match_default15 = match14;
  }
});

// node_modules/date-fns/esm/locale/es/index.js
var es_exports = {};
__export(es_exports, {
  default: () => es_default
});
var locale17, es_default;
var init_es = __esm({
  "node_modules/date-fns/esm/locale/es/index.js"() {
    init_formatDistance17();
    init_formatLong17();
    init_formatRelative16();
    init_localize15();
    init_match15();
    locale17 = {
      code: "es",
      formatDistance: formatDistance_default16,
      formatLong: formatLong_default17,
      formatRelative: formatRelative_default15,
      localize: localize_default15,
      match: match_default15,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    es_default = locale17;
  }
});

// node_modules/date-fns/esm/locale/et/_lib/formatDistance/index.js
var formatDistanceLocale16, formatDistance32, formatDistance_default17;
var init_formatDistance18 = __esm({
  "node_modules/date-fns/esm/locale/et/_lib/formatDistance/index.js"() {
    formatDistanceLocale16 = {
      lessThanXSeconds: {
        standalone: {
          one: "v√§hem kui √ºks sekund",
          other: "v√§hem kui {{count}} sekundit"
        },
        withPreposition: {
          one: "v√§hem kui √ºhe sekundi",
          other: "v√§hem kui {{count}} sekundi"
        }
      },
      xSeconds: {
        standalone: {
          one: "√ºks sekund",
          other: "{{count}} sekundit"
        },
        withPreposition: {
          one: "√ºhe sekundi",
          other: "{{count}} sekundi"
        }
      },
      halfAMinute: {
        standalone: "pool minutit",
        withPreposition: "poole minuti"
      },
      lessThanXMinutes: {
        standalone: {
          one: "v√§hem kui √ºks minut",
          other: "v√§hem kui {{count}} minutit"
        },
        withPreposition: {
          one: "v√§hem kui √ºhe minuti",
          other: "v√§hem kui {{count}} minuti"
        }
      },
      xMinutes: {
        standalone: {
          one: "√ºks minut",
          other: "{{count}} minutit"
        },
        withPreposition: {
          one: "√ºhe minuti",
          other: "{{count}} minuti"
        }
      },
      aboutXHours: {
        standalone: {
          one: "umbes √ºks tund",
          other: "umbes {{count}} tundi"
        },
        withPreposition: {
          one: "umbes √ºhe tunni",
          other: "umbes {{count}} tunni"
        }
      },
      xHours: {
        standalone: {
          one: "√ºks tund",
          other: "{{count}} tundi"
        },
        withPreposition: {
          one: "√ºhe tunni",
          other: "{{count}} tunni"
        }
      },
      xDays: {
        standalone: {
          one: "√ºks p√§ev",
          other: "{{count}} p√§eva"
        },
        withPreposition: {
          one: "√ºhe p√§eva",
          other: "{{count}} p√§eva"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "umbes √ºks n√§dal",
          other: "umbes {{count}} n√§dalat"
        },
        withPreposition: {
          one: "umbes √ºhe n√§dala",
          other: "umbes {{count}} n√§dala"
        }
      },
      xWeeks: {
        standalone: {
          one: "√ºks n√§dal",
          other: "{{count}} n√§dalat"
        },
        withPreposition: {
          one: "√ºhe n√§dala",
          other: "{{count}} n√§dala"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "umbes √ºks kuu",
          other: "umbes {{count}} kuud"
        },
        withPreposition: {
          one: "umbes √ºhe kuu",
          other: "umbes {{count}} kuu"
        }
      },
      xMonths: {
        standalone: {
          one: "√ºks kuu",
          other: "{{count}} kuud"
        },
        withPreposition: {
          one: "√ºhe kuu",
          other: "{{count}} kuu"
        }
      },
      aboutXYears: {
        standalone: {
          one: "umbes √ºks aasta",
          other: "umbes {{count}} aastat"
        },
        withPreposition: {
          one: "umbes √ºhe aasta",
          other: "umbes {{count}} aasta"
        }
      },
      xYears: {
        standalone: {
          one: "√ºks aasta",
          other: "{{count}} aastat"
        },
        withPreposition: {
          one: "√ºhe aasta",
          other: "{{count}} aasta"
        }
      },
      overXYears: {
        standalone: {
          one: "rohkem kui √ºks aasta",
          other: "rohkem kui {{count}} aastat"
        },
        withPreposition: {
          one: "rohkem kui √ºhe aasta",
          other: "rohkem kui {{count}} aasta"
        }
      },
      almostXYears: {
        standalone: {
          one: "peaaegu √ºks aasta",
          other: "peaaegu {{count}} aastat"
        },
        withPreposition: {
          one: "peaaegu √ºhe aasta",
          other: "peaaegu {{count}} aasta"
        }
      }
    };
    formatDistance32 = function formatDistance33(token, count, options) {
      var usageGroup = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale16[token].withPreposition : formatDistanceLocale16[token].standalone;
      var result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " p√§rast";
        } else {
          return result + " eest";
        }
      }
      return result;
    };
    formatDistance_default17 = formatDistance32;
  }
});

// node_modules/date-fns/esm/locale/et/_lib/formatLong/index.js
var dateFormats18, timeFormats18, dateTimeFormats18, formatLong18, formatLong_default18;
var init_formatLong18 = __esm({
  "node_modules/date-fns/esm/locale/et/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats18 = {
      full: "EEEE, d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    timeFormats18 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats18 = {
      full: "{{date}} 'kell' {{time}}",
      long: "{{date}} 'kell' {{time}}",
      medium: "{{date}}. {{time}}",
      short: "{{date}}. {{time}}"
    };
    formatLong18 = {
      date: buildFormatLongFn({
        formats: dateFormats18,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats18,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats18,
        defaultWidth: "full"
      })
    };
    formatLong_default18 = formatLong18;
  }
});

// node_modules/date-fns/esm/locale/et/_lib/formatRelative/index.js
var formatRelativeLocale15, formatRelative30, formatRelative_default16;
var init_formatRelative17 = __esm({
  "node_modules/date-fns/esm/locale/et/_lib/formatRelative/index.js"() {
    formatRelativeLocale15 = {
      lastWeek: "'eelmine' eeee 'kell' p",
      yesterday: "'eile kell' p",
      today: "'t√§na kell' p",
      tomorrow: "'homme kell' p",
      nextWeek: "'j√§rgmine' eeee 'kell' p",
      other: "P"
    };
    formatRelative30 = function formatRelative31(token, _date, _baseDate, _options) {
      return formatRelativeLocale15[token];
    };
    formatRelative_default16 = formatRelative30;
  }
});

// node_modules/date-fns/esm/locale/et/_lib/localize/index.js
var eraValues15, quarterValues15, monthValues15, dayValues15, dayPeriodValues15, formattingDayPeriodValues12, ordinalNumber29, localize15, localize_default16;
var init_localize16 = __esm({
  "node_modules/date-fns/esm/locale/et/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues15 = {
      narrow: ["e.m.a", "m.a.j"],
      abbreviated: ["e.m.a", "m.a.j"],
      wide: ["enne meie ajaarvamist", "meie ajaarvamise j√§rgi"]
    };
    quarterValues15 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues15 = {
      narrow: ["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jaan", "veebr", "m√§rts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets"],
      wide: ["jaanuar", "veebruar", "m√§rts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember"]
    };
    dayValues15 = {
      narrow: ["P", "E", "T", "K", "N", "R", "L"],
      short: ["P", "E", "T", "K", "N", "R", "L"],
      abbreviated: ["p√ºhap.", "esmasp.", "teisip.", "kolmap.", "neljap.", "reede.", "laup."],
      wide: ["p√ºhap√§ev", "esmasp√§ev", "teisip√§ev", "kolmap√§ev", "neljap√§ev", "reede", "laup√§ev"]
    };
    dayPeriodValues15 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂",
        noon: "keskp√§ev",
        morning: "hommik",
        afternoon: "p√§rastl√µuna",
        evening: "√µhtu",
        night: "√∂√∂"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂",
        noon: "keskp√§ev",
        morning: "hommik",
        afternoon: "p√§rastl√µuna",
        evening: "√µhtu",
        night: "√∂√∂"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂",
        noon: "keskp√§ev",
        morning: "hommik",
        afternoon: "p√§rastl√µuna",
        evening: "√µhtu",
        night: "√∂√∂"
      }
    };
    formattingDayPeriodValues12 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂l",
        noon: "keskp√§eval",
        morning: "hommikul",
        afternoon: "p√§rastl√µunal",
        evening: "√µhtul",
        night: "√∂√∂sel"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂l",
        noon: "keskp√§eval",
        morning: "hommikul",
        afternoon: "p√§rastl√µunal",
        evening: "√µhtul",
        night: "√∂√∂sel"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "kesk√∂√∂l",
        noon: "keskp√§eval",
        morning: "hommikul",
        afternoon: "p√§rastl√µunal",
        evening: "√µhtul",
        night: "√∂√∂sel"
      }
    };
    ordinalNumber29 = function ordinalNumber30(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize15 = {
      ordinalNumber: ordinalNumber29,
      era: buildLocalizeFn({
        values: eraValues15,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues15,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback15(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues15,
        defaultWidth: "wide",
        formattingValues: monthValues15,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues15,
        defaultWidth: "wide",
        formattingValues: dayValues15,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues15,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues12,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default16 = localize15;
  }
});

// node_modules/date-fns/esm/locale/et/_lib/match/index.js
var matchOrdinalNumberPattern15, parseOrdinalNumberPattern15, matchEraPatterns15, parseEraPatterns15, matchQuarterPatterns15, parseQuarterPatterns15, matchMonthPatterns15, parseMonthPatterns15, matchDayPatterns15, parseDayPatterns15, matchDayPeriodPatterns15, parseDayPeriodPatterns15, match15, match_default16;
var init_match16 = __esm({
  "node_modules/date-fns/esm/locale/et/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern15 = /^\d+\./i;
    parseOrdinalNumberPattern15 = /\d+/i;
    matchEraPatterns15 = {
      narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      wide: /^(enne meie ajaarvamist|meie ajaarvamise j√§rgi|enne Kristust|p√§rast Kristust)/i
    };
    parseEraPatterns15 = {
      any: [/^e/i, /^(m|p)/i]
    };
    matchQuarterPatterns15 = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    parseQuarterPatterns15 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns15 = {
      narrow: /^[jvmasond]/i,
      abbreviated: /^(jaan|veebr|m√§rts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
      wide: /^(jaanuar|veebruar|m√§rts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
    };
    parseMonthPatterns15 = {
      narrow: [/^j/i, /^v/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^v/i, /^m√§r/i, /^ap/i, /^mai/i, /^juun/i, /^juul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns15 = {
      narrow: /^[petknrl]/i,
      short: /^[petknrl]/i,
      abbreviated: /^(p√ºh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
      wide: /^(p√ºhap√§ev|esmasp√§ev|teisip√§ev|kolmap√§ev|neljap√§ev|reede|laup√§ev)/i
    };
    parseDayPatterns15 = {
      any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
    };
    matchDayPeriodPatterns15 = {
      any: /^(am|pm|kesk√∂√∂l?|keskp√§ev(al)?|hommik(ul)?|p√§rastl√µunal?|√µhtul?|√∂√∂(sel)?)/i
    };
    parseDayPeriodPatterns15 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^kesk√∂/i,
        noon: /^keskp/i,
        morning: /hommik/i,
        afternoon: /p√§rastl√µuna/i,
        evening: /√µhtu/i,
        night: /√∂√∂/i
      }
    };
    match15 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern15,
        parsePattern: parseOrdinalNumberPattern15,
        valueCallback: function valueCallback29(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns15,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns15,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns15,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns15,
        defaultParseWidth: "any",
        valueCallback: function valueCallback30(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns15,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns15,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns15,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns15,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns15,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns15,
        defaultParseWidth: "any"
      })
    };
    match_default16 = match15;
  }
});

// node_modules/date-fns/esm/locale/et/index.js
var et_exports = {};
__export(et_exports, {
  default: () => et_default
});
var locale18, et_default;
var init_et = __esm({
  "node_modules/date-fns/esm/locale/et/index.js"() {
    init_formatDistance18();
    init_formatLong18();
    init_formatRelative17();
    init_localize16();
    init_match16();
    locale18 = {
      code: "et",
      formatDistance: formatDistance_default17,
      formatLong: formatLong_default18,
      formatRelative: formatRelative_default16,
      localize: localize_default16,
      match: match_default16,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    et_default = locale18;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/_lib/formatDistance/index.js
var formatDistanceLocale17, formatDistance34, formatDistance_default18;
var init_formatDistance19 = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/_lib/formatDistance/index.js"() {
    formatDistanceLocale17 = {
      lessThanXSeconds: {
        one: "⁄©ŸÖÿ™ÿ± ÿßÿ≤ €å⁄© ÿ´ÿßŸÜ€åŸá",
        other: "⁄©ŸÖÿ™ÿ± ÿßÿ≤ {{count}} ÿ´ÿßŸÜ€åŸá"
      },
      xSeconds: {
        one: "1 ÿ´ÿßŸÜ€åŸá",
        other: "{{count}} ÿ´ÿßŸÜ€åŸá"
      },
      halfAMinute: "ŸÜ€åŸÖ ÿØŸÇ€åŸÇŸá",
      lessThanXMinutes: {
        one: "⁄©ŸÖÿ™ÿ± ÿßÿ≤ €å⁄© ÿØŸÇ€åŸÇŸá",
        other: "⁄©ŸÖÿ™ÿ± ÿßÿ≤ {{count}} ÿØŸÇ€åŸÇŸá"
      },
      xMinutes: {
        one: "1 ÿØŸÇ€åŸÇŸá",
        other: "{{count}} ÿØŸÇ€åŸÇŸá"
      },
      aboutXHours: {
        one: "ÿ≠ÿØŸàÿØ 1 ÿ≥ÿßÿπÿ™",
        other: "ÿ≠ÿØŸàÿØ {{count}} ÿ≥ÿßÿπÿ™"
      },
      xHours: {
        one: "1 ÿ≥ÿßÿπÿ™",
        other: "{{count}} ÿ≥ÿßÿπÿ™"
      },
      xDays: {
        one: "1 ÿ±Ÿàÿ≤",
        other: "{{count}} ÿ±Ÿàÿ≤"
      },
      aboutXWeeks: {
        one: "ÿ≠ÿØŸàÿØ 1 ŸáŸÅÿ™Ÿá",
        other: "ÿ≠ÿØŸàÿØ {{count}} ŸáŸÅÿ™Ÿá"
      },
      xWeeks: {
        one: "1 ŸáŸÅÿ™Ÿá",
        other: "{{count}} ŸáŸÅÿ™Ÿá"
      },
      aboutXMonths: {
        one: "ÿ≠ÿØŸàÿØ 1 ŸÖÿßŸá",
        other: "ÿ≠ÿØŸàÿØ {{count}} ŸÖÿßŸá"
      },
      xMonths: {
        one: "1 ŸÖÿßŸá",
        other: "{{count}} ŸÖÿßŸá"
      },
      aboutXYears: {
        one: "ÿ≠ÿØŸàÿØ 1 ÿ≥ÿßŸÑ",
        other: "ÿ≠ÿØŸàÿØ {{count}} ÿ≥ÿßŸÑ"
      },
      xYears: {
        one: "1 ÿ≥ÿßŸÑ",
        other: "{{count}} ÿ≥ÿßŸÑ"
      },
      overXYears: {
        one: "ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ 1 ÿ≥ÿßŸÑ",
        other: "ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ {{count}} ÿ≥ÿßŸÑ"
      },
      almostXYears: {
        one: "ŸÜÿ≤ÿØ€å⁄© 1 ÿ≥ÿßŸÑ",
        other: "ŸÜÿ≤ÿØ€å⁄© {{count}} ÿ≥ÿßŸÑ"
      }
    };
    formatDistance34 = function formatDistance35(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale17[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "ÿØÿ± " + result;
        } else {
          return result + " ŸÇÿ®ŸÑ";
        }
      }
      return result;
    };
    formatDistance_default18 = formatDistance34;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/_lib/formatLong/index.js
var dateFormats19, timeFormats19, dateTimeFormats19, formatLong19, formatLong_default19;
var init_formatLong19 = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats19 = {
      full: "EEEE do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "yyyy/MM/dd"
    };
    timeFormats19 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats19 = {
      full: "{{date}} 'ÿØÿ±' {{time}}",
      long: "{{date}} 'ÿØÿ±' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong19 = {
      date: buildFormatLongFn({
        formats: dateFormats19,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats19,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats19,
        defaultWidth: "full"
      })
    };
    formatLong_default19 = formatLong19;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/_lib/formatRelative/index.js
var formatRelativeLocale16, formatRelative32, formatRelative_default17;
var init_formatRelative18 = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/_lib/formatRelative/index.js"() {
    formatRelativeLocale16 = {
      lastWeek: "eeee '⁄Øÿ∞ÿ¥ÿ™Ÿá ÿØÿ±' p",
      yesterday: "'ÿØ€åÿ±Ÿàÿ≤ ÿØÿ±' p",
      today: "'ÿßŸÖÿ±Ÿàÿ≤ ÿØÿ±' p",
      tomorrow: "'ŸÅÿ±ÿØÿß ÿØÿ±' p",
      nextWeek: "eeee 'ÿØÿ±' p",
      other: "P"
    };
    formatRelative32 = function formatRelative33(token, _date, _baseDate, _options) {
      return formatRelativeLocale16[token];
    };
    formatRelative_default17 = formatRelative32;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/_lib/localize/index.js
var eraValues16, quarterValues16, monthValues16, dayValues16, dayPeriodValues16, formattingDayPeriodValues13, ordinalNumber31, localize16, localize_default17;
var init_localize17 = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues16 = {
      narrow: ["ŸÇ", "ÿ®"],
      abbreviated: ["ŸÇ.ŸÖ.", "ÿ®.ŸÖ."],
      wide: ["ŸÇÿ®ŸÑ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ", "ÿ®ÿπÿØ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ"]
    };
    quarterValues16 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ÿ≥‚ÄåŸÖ1", "ÿ≥‚ÄåŸÖ2", "ÿ≥‚ÄåŸÖ3", "ÿ≥‚ÄåŸÖ4"],
      wide: ["ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 1", "ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 2", "ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 3", "ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá 4"]
    };
    monthValues16 = {
      narrow: ["⁄ò", "ŸÅ", "ŸÖ", "ÿ¢", "ŸÖ", "ÿ¨", "ÿ¨", "ÿ¢", "ÿ≥", "ÿß", "ŸÜ", "ÿØ"],
      abbreviated: ["⁄òÿßŸÜŸÄ", "ŸÅŸàÿ±", "ŸÖÿßÿ±ÿ≥", "ÿ¢Ÿæÿ±", "ŸÖ€å", "ÿ¨ŸàŸÜ", "ÿ¨ŸàŸÑŸÄ", "ÿ¢⁄ØŸà", "ÿ≥Ÿæÿ™ŸÄ", "ÿß⁄©ÿ™ŸÄ", "ŸÜŸàÿßŸÖŸÄ", "ÿØÿ≥ÿßŸÖŸÄ"],
      wide: ["⁄òÿßŸÜŸà€åŸá", "ŸÅŸàÿ±€åŸá", "ŸÖÿßÿ±ÿ≥", "ÿ¢Ÿæÿ±€åŸÑ", "ŸÖ€å", "ÿ¨ŸàŸÜ", "ÿ¨ŸàŸÑÿß€å", "ÿ¢⁄ØŸàÿ≥ÿ™", "ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±", "ÿß⁄©ÿ™ÿ®ÿ±", "ŸÜŸàÿßŸÖÿ®ÿ±", "ÿØÿ≥ÿßŸÖÿ®ÿ±"]
    };
    dayValues16 = {
      narrow: ["€å", "ÿØ", "ÿ≥", "⁄Ü", "Ÿæ", "ÿ¨", "ÿ¥"],
      short: ["1ÿ¥", "2ÿ¥", "3ÿ¥", "4ÿ¥", "5ÿ¥", "ÿ¨", "ÿ¥"],
      abbreviated: ["€å⁄©ÿ¥ŸÜÿ®Ÿá", "ÿØŸàÿ¥ŸÜÿ®Ÿá", "ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá", "⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá", "ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá", "ÿ¨ŸÖÿπŸá", "ÿ¥ŸÜÿ®Ÿá"],
      wide: ["€å⁄©ÿ¥ŸÜÿ®Ÿá", "ÿØŸàÿ¥ŸÜÿ®Ÿá", "ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá", "⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá", "ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá", "ÿ¨ŸÖÿπŸá", "ÿ¥ŸÜÿ®Ÿá"]
    };
    dayPeriodValues16 = {
      narrow: {
        am: "ŸÇ",
        pm: "ÿ®",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ÿµ",
        afternoon: "ÿ®.ÿ∏.",
        evening: "ÿπ",
        night: "ÿ¥"
      },
      abbreviated: {
        am: "ŸÇ.ÿ∏.",
        pm: "ÿ®.ÿ∏.",
        midnight: "ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿ≠",
        afternoon: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        evening: "ÿπÿµÿ±",
        night: "ÿ¥ÿ®"
      },
      wide: {
        am: "ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±",
        pm: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        midnight: "ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿ≠",
        afternoon: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        evening: "ÿπÿµÿ±",
        night: "ÿ¥ÿ®"
      }
    };
    formattingDayPeriodValues13 = {
      narrow: {
        am: "ŸÇ",
        pm: "ÿ®",
        midnight: "ŸÜ",
        noon: "ÿ∏",
        morning: "ÿµ",
        afternoon: "ÿ®.ÿ∏.",
        evening: "ÿπ",
        night: "ÿ¥"
      },
      abbreviated: {
        am: "ŸÇ.ÿ∏.",
        pm: "ÿ®.ÿ∏.",
        midnight: "ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿ≠",
        afternoon: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        evening: "ÿπÿµÿ±",
        night: "ÿ¥ÿ®"
      },
      wide: {
        am: "ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±",
        pm: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        midnight: "ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®",
        noon: "ÿ∏Ÿáÿ±",
        morning: "ÿµÿ®ÿ≠",
        afternoon: "ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±",
        evening: "ÿπÿµÿ±",
        night: "ÿ¥ÿ®"
      }
    };
    ordinalNumber31 = function ordinalNumber32(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize16 = {
      ordinalNumber: ordinalNumber31,
      era: buildLocalizeFn({
        values: eraValues16,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues16,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback16(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues16,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues16,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues16,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues13,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default17 = localize16;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/_lib/match/index.js
var matchOrdinalNumberPattern16, parseOrdinalNumberPattern16, matchEraPatterns16, parseEraPatterns16, matchQuarterPatterns16, parseQuarterPatterns16, matchMonthPatterns16, parseMonthPatterns16, matchDayPatterns16, parseDayPatterns16, matchDayPeriodPatterns16, parseDayPeriodPatterns16, match16, match_default17;
var init_match17 = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern16 = /^(\d+)(th|st|nd|rd)?/i;
    parseOrdinalNumberPattern16 = /\d+/i;
    matchEraPatterns16 = {
      narrow: /^(ŸÇ|ÿ®)/i,
      abbreviated: /^(ŸÇ\.?\s?ŸÖ\.?|ŸÇ\.?\s?ÿØ\.?\s?ŸÖ\.?|ŸÖ\.?\s?|ÿØ\.?\s?ŸÖ\.?)/i,
      wide: /^(ŸÇÿ®ŸÑ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ|ŸÇÿ®ŸÑ ÿßÿ≤ ÿØŸàÿ±ÿßŸÜ ŸÖÿ¥ÿ™ÿ±⁄©|ŸÖ€åŸÑÿßÿØ€å|ÿØŸàÿ±ÿßŸÜ ŸÖÿ¥ÿ™ÿ±⁄©|ÿ®ÿπÿØ ÿßÿ≤ ŸÖ€åŸÑÿßÿØ)/i
    };
    parseEraPatterns16 = {
      any: [/^ŸÇÿ®ŸÑ/i, /^ÿ®ÿπÿØ/i]
    };
    matchQuarterPatterns16 = {
      narrow: /^[1234]/i,
      abbreviated: /^ÿ≥‚ÄåŸÖ[1234]/i,
      wide: /^ÿ≥Ÿá‚ÄåŸÖÿßŸáŸá [1234]/i
    };
    parseQuarterPatterns16 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns16 = {
      narrow: /^[ÿ¨⁄òŸÅŸÖÿ¢ÿßŸÖÿßÿ≥ŸÜÿØ]/i,
      abbreviated: /^(ÿ¨ŸÜŸà|⁄òÿßŸÜŸÄ|⁄òÿßŸÜŸà€åŸá|ŸÅŸàÿ±€åŸá|ŸÅŸàÿ±|ŸÖÿßÿ±ÿ≥|ÿ¢Ÿàÿ±€åŸÑ|ÿ¢Ÿæÿ±|ŸÖŸá|ŸÖ€å|⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ|ÿ¨ŸàŸÑ|ÿ¨ŸàŸÑŸÄ|⁄òŸàÿ¶€åŸá|ÿßŸàÿ™|ÿ¢⁄ØŸà|ÿ≥Ÿæÿ™ŸÖÿ®ÿ±|ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±|ÿß⁄©ÿ™ÿ®ÿ±|ÿß⁄©ÿ™Ÿàÿ®ÿ±|ŸÜŸàÿßŸÖÿ®ÿ±|ŸÜŸàÿßŸÖŸÄ|ÿØÿ≥ÿßŸÖÿ®ÿ±|ÿØÿ≥ÿßŸÖŸÄ|ÿØÿ≥ŸÖ)/i,
      wide: /^(⁄òÿßŸÜŸà€åŸá|ÿ¨ŸÜŸàÿ±€å|ŸÅÿ®ÿ±Ÿàÿ±€å|ŸÅŸàÿ±€åŸá|ŸÖÿßÿ±⁄Ü|ŸÖÿßÿ±ÿ≥|ÿ¢Ÿæÿ±€åŸÑ|ÿßŸæÿ±€åŸÑ|ÿß€åŸæÿ±€åŸÑ|ÿ¢Ÿàÿ±€åŸÑ|ŸÖŸá|ŸÖ€å|⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ|ÿ¨ŸàŸÑÿß€å|⁄òŸàÿ¶€åŸá|ÿ¢⁄Øÿ≥ÿ™|ÿß⁄Øÿ≥ÿ™|ÿ¢⁄ØŸàÿ≥ÿ™|ÿßŸàÿ™|ÿ≥Ÿæÿ™ŸÖÿ®ÿ±|ÿ≥Ÿæÿ™ÿßŸÖÿ®ÿ±|ÿß⁄©ÿ™ÿ®ÿ±|ÿß⁄©ÿ™Ÿàÿ®ÿ±|ŸÜŸàÿßŸÖÿ®ÿ±|ŸÜŸàŸÖÿ®ÿ±|ÿØÿ≥ÿßŸÖÿ®ÿ±|ÿØÿ≥ŸÖÿ®ÿ±)/i
    };
    parseMonthPatterns16 = {
      narrow: [/^(⁄ò|ÿ¨)/i, /^ŸÅ/i, /^ŸÖ/i, /^(ÿ¢|ÿß)/i, /^ŸÖ/i, /^(⁄ò|ÿ¨)/i, /^(ÿ¨|⁄ò)/i, /^(ÿ¢|ÿß)/i, /^ÿ≥/i, /^ÿß/i, /^ŸÜ/i, /^ÿØ/i],
      any: [/^⁄òÿß/i, /^ŸÅ/i, /^ŸÖÿß/i, /^ÿ¢Ÿæ/i, /^(ŸÖ€å|ŸÖŸá)/i, /^(⁄òŸàÿ¶ŸÜ|ÿ¨ŸàŸÜ)/i, /^(⁄òŸàÿ¶€å|ÿ¨ŸàŸÑ)/i, /^(ÿßŸàÿ™|ÿ¢⁄Ø)/i, /^ÿ≥/i, /^(ÿßŸà⁄©|ÿß⁄©)/i, /^ŸÜ/i, /^ÿØ/i]
    };
    matchDayPatterns16 = {
      narrow: /^[ÿ¥€åÿØÿ≥⁄ÜŸæÿ¨]/i,
      short: /^(ÿ¥|ÿ¨|1ÿ¥|2ÿ¥|3ÿ¥|4ÿ¥|5ÿ¥)/i,
      abbreviated: /^(€å⁄©ÿ¥ŸÜÿ®Ÿá|ÿØŸàÿ¥ŸÜÿ®Ÿá|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá|ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá|ÿ¨ŸÖÿπŸá|ÿ¥ŸÜÿ®Ÿá)/i,
      wide: /^(€å⁄©ÿ¥ŸÜÿ®Ÿá|ÿØŸàÿ¥ŸÜÿ®Ÿá|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá|ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá|ÿ¨ŸÖÿπŸá|ÿ¥ŸÜÿ®Ÿá)/i
    };
    parseDayPatterns16 = {
      narrow: [/^€å/i, /^ÿØŸà/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i],
      any: [/^(€å|1ÿ¥|€å⁄©ÿ¥ŸÜÿ®Ÿá)/i, /^(ÿØ|2ÿ¥|ÿØŸàÿ¥ŸÜÿ®Ÿá)/i, /^(ÿ≥|3ÿ¥|ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá)/i, /^(⁄Ü|4ÿ¥|⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá)/i, /^(Ÿæ|5ÿ¥|ŸæŸÜÿ¨ÿ¥ŸÜÿ®Ÿá)/i, /^(ÿ¨|ÿ¨ŸÖÿπŸá)/i, /^(ÿ¥|ÿ¥ŸÜÿ®Ÿá)/i]
    };
    matchDayPeriodPatterns16 = {
      narrow: /^(ÿ®|ŸÇ|ŸÜ|ÿ∏|ÿµ|ÿ®.ÿ∏.|ÿπ|ÿ¥)/i,
      abbreviated: /^(ŸÇ.ÿ∏.|ÿ®.ÿ∏.|ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ÿ∏Ÿáÿ±|ÿµÿ®ÿ≠|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±|ÿπÿµÿ±|ÿ¥ÿ®)/i,
      wide: /^(ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±|ŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ÿ∏Ÿáÿ±|ÿµÿ®ÿ≠|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±|ÿπÿµÿ±|ÿ¥ÿ®)/i
    };
    parseDayPeriodPatterns16 = {
      any: {
        am: /^(ŸÇ|ŸÇ.ÿ∏.|ŸÇÿ®ŸÑ‚Äåÿßÿ≤ÿ∏Ÿáÿ±)/i,
        pm: /^(ÿ®|ÿ®.ÿ∏.|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±)/i,
        midnight: /^(‚ÄåŸÜ€åŸÖŸá‚Äåÿ¥ÿ®|ŸÜ)/i,
        noon: /^(ÿ∏|ÿ∏Ÿáÿ±)/i,
        morning: /(ÿµ|ÿµÿ®ÿ≠)/i,
        afternoon: /(ÿ®|ÿ®.ÿ∏.|ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±)/i,
        evening: /(ÿπ|ÿπÿµÿ±)/i,
        night: /(ÿ¥|ÿ¥ÿ®)/i
      }
    };
    match16 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern16,
        parsePattern: parseOrdinalNumberPattern16,
        valueCallback: function valueCallback31(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns16,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns16,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns16,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns16,
        defaultParseWidth: "any",
        valueCallback: function valueCallback32(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns16,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns16,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns16,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns16,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns16,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns16,
        defaultParseWidth: "any"
      })
    };
    match_default17 = match16;
  }
});

// node_modules/date-fns/esm/locale/fa-IR/index.js
var fa_IR_exports = {};
__export(fa_IR_exports, {
  default: () => fa_IR_default
});
var locale19, fa_IR_default;
var init_fa_IR = __esm({
  "node_modules/date-fns/esm/locale/fa-IR/index.js"() {
    init_formatDistance19();
    init_formatLong19();
    init_formatRelative18();
    init_localize17();
    init_match17();
    locale19 = {
      code: "fa-IR",
      formatDistance: formatDistance_default18,
      formatLong: formatLong_default19,
      formatRelative: formatRelative_default17,
      localize: localize_default17,
      match: match_default17,
      options: {
        weekStartsOn: 6,
        firstWeekContainsDate: 1
      }
    };
    fa_IR_default = locale19;
  }
});

// node_modules/date-fns/esm/locale/fi/_lib/formatDistance/index.js
function futureSeconds(text) {
  return text.replace(/sekuntia?/, "sekunnin");
}
function futureMinutes(text) {
  return text.replace(/minuuttia?/, "minuutin");
}
function futureHours(text) {
  return text.replace(/tuntia?/, "tunnin");
}
function futureDays(text) {
  return text.replace(/p√§iv√§√§?/, "p√§iv√§n");
}
function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, "viikon");
}
function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
}
function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, "vuoden");
}
var formatDistanceLocale18, formatDistance36, formatDistance_default19;
var init_formatDistance20 = __esm({
  "node_modules/date-fns/esm/locale/fi/_lib/formatDistance/index.js"() {
    formatDistanceLocale18 = {
      lessThanXSeconds: {
        one: "alle sekunti",
        other: "alle {{count}} sekuntia",
        futureTense: futureSeconds
      },
      xSeconds: {
        one: "sekunti",
        other: "{{count}} sekuntia",
        futureTense: futureSeconds
      },
      halfAMinute: {
        one: "puoli minuuttia",
        other: "puoli minuuttia",
        futureTense: function futureTense(_text) {
          return "puolen minuutin";
        }
      },
      lessThanXMinutes: {
        one: "alle minuutti",
        other: "alle {{count}} minuuttia",
        futureTense: futureMinutes
      },
      xMinutes: {
        one: "minuutti",
        other: "{{count}} minuuttia",
        futureTense: futureMinutes
      },
      aboutXHours: {
        one: "noin tunti",
        other: "noin {{count}} tuntia",
        futureTense: futureHours
      },
      xHours: {
        one: "tunti",
        other: "{{count}} tuntia",
        futureTense: futureHours
      },
      xDays: {
        one: "p√§iv√§",
        other: "{{count}} p√§iv√§√§",
        futureTense: futureDays
      },
      aboutXWeeks: {
        one: "noin viikko",
        other: "noin {{count}} viikkoa",
        futureTense: futureWeeks
      },
      xWeeks: {
        one: "viikko",
        other: "{{count}} viikkoa",
        futureTense: futureWeeks
      },
      aboutXMonths: {
        one: "noin kuukausi",
        other: "noin {{count}} kuukautta",
        futureTense: futureMonths
      },
      xMonths: {
        one: "kuukausi",
        other: "{{count}} kuukautta",
        futureTense: futureMonths
      },
      aboutXYears: {
        one: "noin vuosi",
        other: "noin {{count}} vuotta",
        futureTense: futureYears
      },
      xYears: {
        one: "vuosi",
        other: "{{count}} vuotta",
        futureTense: futureYears
      },
      overXYears: {
        one: "yli vuosi",
        other: "yli {{count}} vuotta",
        futureTense: futureYears
      },
      almostXYears: {
        one: "l√§hes vuosi",
        other: "l√§hes {{count}} vuotta",
        futureTense: futureYears
      }
    };
    formatDistance36 = function formatDistance37(token, count, options) {
      var tokenValue = formatDistanceLocale18[token];
      var result = count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return tokenValue.futureTense(result) + " kuluttua";
        } else {
          return result + " sitten";
        }
      }
      return result;
    };
    formatDistance_default19 = formatDistance36;
  }
});

// node_modules/date-fns/esm/locale/fi/_lib/formatLong/index.js
var dateFormats20, timeFormats20, dateTimeFormats20, formatLong20, formatLong_default20;
var init_formatLong20 = __esm({
  "node_modules/date-fns/esm/locale/fi/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats20 = {
      full: "eeee d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "d.M.y"
    };
    timeFormats20 = {
      full: "HH.mm.ss zzzz",
      long: "HH.mm.ss z",
      medium: "HH.mm.ss",
      short: "HH.mm"
    };
    dateTimeFormats20 = {
      full: "{{date}} 'klo' {{time}}",
      long: "{{date}} 'klo' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong20 = {
      date: buildFormatLongFn({
        formats: dateFormats20,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats20,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats20,
        defaultWidth: "full"
      })
    };
    formatLong_default20 = formatLong20;
  }
});

// node_modules/date-fns/esm/locale/fi/_lib/formatRelative/index.js
var formatRelativeLocale17, formatRelative34, formatRelative_default18;
var init_formatRelative19 = __esm({
  "node_modules/date-fns/esm/locale/fi/_lib/formatRelative/index.js"() {
    formatRelativeLocale17 = {
      lastWeek: "'viime' eeee 'klo' p",
      yesterday: "'eilen klo' p",
      today: "'t√§n√§√§n klo' p",
      tomorrow: "'huomenna klo' p",
      nextWeek: "'ensi' eeee 'klo' p",
      other: "P"
    };
    formatRelative34 = function formatRelative35(token, _date, _baseDate, _options) {
      return formatRelativeLocale17[token];
    };
    formatRelative_default18 = formatRelative34;
  }
});

// node_modules/date-fns/esm/locale/fi/_lib/localize/index.js
var eraValues17, quarterValues17, monthValues17, formattingMonthValues5, dayValues17, formattingDayValues, dayPeriodValues17, ordinalNumber33, localize17, localize_default18;
var init_localize18 = __esm({
  "node_modules/date-fns/esm/locale/fi/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues17 = {
      narrow: ["eaa.", "jaa."],
      abbreviated: ["eaa.", "jaa."],
      wide: ["ennen ajanlaskun alkua", "j√§lkeen ajanlaskun alun"]
    };
    quarterValues17 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartaali", "2. kvartaali", "3. kvartaali", "4. kvartaali"]
    };
    monthValues17 = {
      narrow: ["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"],
      abbreviated: ["tammi", "helmi", "maalis", "huhti", "touko", "kes√§", "hein√§", "elo", "syys", "loka", "marras", "joulu"],
      wide: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kes√§kuu", "hein√§kuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"]
    };
    formattingMonthValues5 = {
      narrow: monthValues17.narrow,
      abbreviated: monthValues17.abbreviated,
      wide: ["tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kes√§kuuta", "hein√§kuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta"]
    };
    dayValues17 = {
      narrow: ["S", "M", "T", "K", "T", "P", "L"],
      short: ["su", "ma", "ti", "ke", "to", "pe", "la"],
      abbreviated: ["sunn.", "maan.", "tiis.", "kesk.", "torst.", "perj.", "la"],
      wide: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"]
    };
    formattingDayValues = {
      narrow: dayValues17.narrow,
      short: dayValues17.short,
      abbreviated: dayValues17.abbreviated,
      wide: ["sunnuntaina", "maanantaina", "tiistaina", "keskiviikkona", "torstaina", "perjantaina", "lauantaina"]
    };
    dayPeriodValues17 = {
      narrow: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy√∂",
        noon: "keskip√§iv√§",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "y√∂ll√§"
      },
      abbreviated: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy√∂",
        noon: "keskip√§iv√§",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "y√∂ll√§"
      },
      wide: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy√∂ll√§",
        noon: "keskip√§iv√§ll√§",
        morning: "aamup√§iv√§ll√§",
        afternoon: "iltap√§iv√§ll√§",
        evening: "illalla",
        night: "y√∂ll√§"
      }
    };
    ordinalNumber33 = function ordinalNumber34(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize17 = {
      ordinalNumber: ordinalNumber33,
      era: buildLocalizeFn({
        values: eraValues17,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues17,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback17(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues17,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues5,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues17,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues17,
        defaultWidth: "wide"
      })
    };
    localize_default18 = localize17;
  }
});

// node_modules/date-fns/esm/locale/fi/_lib/match/index.js
var matchOrdinalNumberPattern17, parseOrdinalNumberPattern17, matchEraPatterns17, parseEraPatterns17, matchQuarterPatterns17, parseQuarterPatterns17, matchMonthPatterns17, parseMonthPatterns17, matchDayPatterns17, parseDayPatterns17, matchDayPeriodPatterns17, parseDayPeriodPatterns17, match17, match_default18;
var init_match18 = __esm({
  "node_modules/date-fns/esm/locale/fi/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern17 = /^(\d+)(\.)/i;
    parseOrdinalNumberPattern17 = /\d+/i;
    matchEraPatterns17 = {
      narrow: /^(e|j)/i,
      abbreviated: /^(eaa.|jaa.)/i,
      wide: /^(ennen ajanlaskun alkua|j√§lkeen ajanlaskun alun)/i
    };
    parseEraPatterns17 = {
      any: [/^e/i, /^j/i]
    };
    matchQuarterPatterns17 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\.? kvartaali/i
    };
    parseQuarterPatterns17 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns17 = {
      narrow: /^[thmkeslj]/i,
      abbreviated: /^(tammi|helmi|maalis|huhti|touko|kes√§|hein√§|elo|syys|loka|marras|joulu)/i,
      wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kes√§kuu|hein√§kuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
    };
    parseMonthPatterns17 = {
      narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
      any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
    };
    matchDayPatterns17 = {
      narrow: /^[smtkpl]/i,
      short: /^(su|ma|ti|ke|to|pe|la)/i,
      abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
      wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
    };
    parseDayPatterns17 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
    };
    matchDayPeriodPatterns17 = {
      narrow: /^(ap|ip|keskiy√∂|keskip√§iv√§|aamup√§iv√§ll√§|iltap√§iv√§ll√§|illalla|y√∂ll√§)/i,
      any: /^(ap|ip|keskiy√∂ll√§|keskip√§iv√§ll√§|aamup√§iv√§ll√§|iltap√§iv√§ll√§|illalla|y√∂ll√§)/i
    };
    parseDayPeriodPatterns17 = {
      any: {
        am: /^ap/i,
        pm: /^ip/i,
        midnight: /^keskiy√∂/i,
        noon: /^keskip√§iv√§/i,
        morning: /aamup√§iv√§ll√§/i,
        afternoon: /iltap√§iv√§ll√§/i,
        evening: /illalla/i,
        night: /y√∂ll√§/i
      }
    };
    match17 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern17,
        parsePattern: parseOrdinalNumberPattern17,
        valueCallback: function valueCallback33(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns17,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns17,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns17,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns17,
        defaultParseWidth: "any",
        valueCallback: function valueCallback34(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns17,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns17,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns17,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns17,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns17,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns17,
        defaultParseWidth: "any"
      })
    };
    match_default18 = match17;
  }
});

// node_modules/date-fns/esm/locale/fi/index.js
var fi_exports = {};
__export(fi_exports, {
  default: () => fi_default
});
var locale20, fi_default;
var init_fi = __esm({
  "node_modules/date-fns/esm/locale/fi/index.js"() {
    init_formatDistance20();
    init_formatLong20();
    init_formatRelative19();
    init_localize18();
    init_match18();
    locale20 = {
      code: "fi",
      formatDistance: formatDistance_default19,
      formatLong: formatLong_default20,
      formatRelative: formatRelative_default18,
      localize: localize_default18,
      match: match_default18,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    fi_default = locale20;
  }
});

// node_modules/date-fns/esm/locale/fr/_lib/formatDistance/index.js
var formatDistanceLocale19, formatDistance38, formatDistance_default20;
var init_formatDistance21 = __esm({
  "node_modules/date-fns/esm/locale/fr/_lib/formatDistance/index.js"() {
    formatDistanceLocale19 = {
      lessThanXSeconds: {
        one: "moins d‚Äôune seconde",
        other: "moins de {{count}} secondes"
      },
      xSeconds: {
        one: "1 seconde",
        other: "{{count}} secondes"
      },
      halfAMinute: "30 secondes",
      lessThanXMinutes: {
        one: "moins d‚Äôune minute",
        other: "moins de {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "environ 1 heure",
        other: "environ {{count}} heures"
      },
      xHours: {
        one: "1 heure",
        other: "{{count}} heures"
      },
      xDays: {
        one: "1 jour",
        other: "{{count}} jours"
      },
      aboutXWeeks: {
        one: "environ 1 semaine",
        other: "environ {{count}} semaines"
      },
      xWeeks: {
        one: "1 semaine",
        other: "{{count}} semaines"
      },
      aboutXMonths: {
        one: "environ 1 mois",
        other: "environ {{count}} mois"
      },
      xMonths: {
        one: "1 mois",
        other: "{{count}} mois"
      },
      aboutXYears: {
        one: "environ 1 an",
        other: "environ {{count}} ans"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} ans"
      },
      overXYears: {
        one: "plus d‚Äôun an",
        other: "plus de {{count}} ans"
      },
      almostXYears: {
        one: "presqu‚Äôun an",
        other: "presque {{count}} ans"
      }
    };
    formatDistance38 = function formatDistance39(token, count, options) {
      var result;
      var form = formatDistanceLocale19[token];
      if (typeof form === "string") {
        result = form;
      } else if (count === 1) {
        result = form.one;
      } else {
        result = form.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dans " + result;
        } else {
          return "il y a " + result;
        }
      }
      return result;
    };
    formatDistance_default20 = formatDistance38;
  }
});

// node_modules/date-fns/esm/locale/fr/_lib/formatLong/index.js
var dateFormats21, timeFormats21, dateTimeFormats21, formatLong21, formatLong_default21;
var init_formatLong21 = __esm({
  "node_modules/date-fns/esm/locale/fr/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats21 = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    timeFormats21 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats21 = {
      full: "{{date}} '√†' {{time}}",
      long: "{{date}} '√†' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong21 = {
      date: buildFormatLongFn({
        formats: dateFormats21,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats21,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats21,
        defaultWidth: "full"
      })
    };
    formatLong_default21 = formatLong21;
  }
});

// node_modules/date-fns/esm/locale/fr/_lib/formatRelative/index.js
var formatRelativeLocale18, formatRelative36, formatRelative_default19;
var init_formatRelative20 = __esm({
  "node_modules/date-fns/esm/locale/fr/_lib/formatRelative/index.js"() {
    formatRelativeLocale18 = {
      lastWeek: "eeee 'dernier √†' p",
      yesterday: "'hier √†' p",
      today: "'aujourd‚Äôhui √†' p",
      tomorrow: "'demain √†' p'",
      nextWeek: "eeee 'prochain √†' p",
      other: "P"
    };
    formatRelative36 = function formatRelative37(token, _date, _baseDate, _options) {
      return formatRelativeLocale18[token];
    };
    formatRelative_default19 = formatRelative36;
  }
});

// node_modules/date-fns/esm/locale/fr/_lib/localize/index.js
var eraValues18, quarterValues18, monthValues18, dayValues18, dayPeriodValues18, ordinalNumber35, localize18, localize_default19;
var init_localize19 = __esm({
  "node_modules/date-fns/esm/locale/fr/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues18 = {
      narrow: ["av. J.-C", "ap. J.-C"],
      abbreviated: ["av. J.-C", "ap. J.-C"],
      wide: ["avant J√©sus-Christ", "apr√®s J√©sus-Christ"]
    };
    quarterValues18 = {
      narrow: ["T1", "T2", "T3", "T4"],
      abbreviated: ["1er trim.", "2√®me trim.", "3√®me trim.", "4√®me trim."],
      wide: ["1er trimestre", "2√®me trimestre", "3√®me trimestre", "4√®me trimestre"]
    };
    monthValues18 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["janv.", "f√©vr.", "mars", "avr.", "mai", "juin", "juil.", "ao√ªt", "sept.", "oct.", "nov.", "d√©c."],
      wide: ["janvier", "f√©vrier", "mars", "avril", "mai", "juin", "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"]
    };
    dayValues18 = {
      narrow: ["D", "L", "M", "M", "J", "V", "S"],
      short: ["di", "lu", "ma", "me", "je", "ve", "sa"],
      abbreviated: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
      wide: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"]
    };
    dayPeriodValues18 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "mat.",
        afternoon: "ap.m.",
        evening: "soir",
        night: "mat."
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "matin",
        afternoon: "apr√®s-midi",
        evening: "soir",
        night: "matin"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "du matin",
        afternoon: "de l‚Äôapr√®s-midi",
        evening: "du soir",
        night: "du matin"
      }
    };
    ordinalNumber35 = function ordinalNumber36(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      if (number === 0)
        return "0";
      var feminineUnits = ["year", "week", "hour", "minute", "second"];
      var suffix;
      if (number === 1) {
        suffix = unit && feminineUnits.includes(unit) ? "√®re" : "er";
      } else {
        suffix = "√®me";
      }
      return number + suffix;
    };
    localize18 = {
      ordinalNumber: ordinalNumber35,
      era: buildLocalizeFn({
        values: eraValues18,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues18,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback18(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues18,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues18,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues18,
        defaultWidth: "wide"
      })
    };
    localize_default19 = localize18;
  }
});

// node_modules/date-fns/esm/locale/fr/_lib/match/index.js
var matchOrdinalNumberPattern18, parseOrdinalNumberPattern18, matchEraPatterns18, parseEraPatterns18, matchQuarterPatterns18, parseQuarterPatterns18, matchMonthPatterns18, parseMonthPatterns18, matchDayPatterns18, parseDayPatterns18, matchDayPeriodPatterns18, parseDayPeriodPatterns18, match18, match_default19;
var init_match19 = __esm({
  "node_modules/date-fns/esm/locale/fr/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern18 = /^(\d+)(i√®me|√®re|√®me|er|e)?/i;
    parseOrdinalNumberPattern18 = /\d+/i;
    matchEraPatterns18 = {
      narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
      abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
      wide: /^(avant J√©sus-Christ|apr√®s J√©sus-Christ)/i
    };
    parseEraPatterns18 = {
      any: [/^av/i, /^ap/i]
    };
    matchQuarterPatterns18 = {
      narrow: /^T?[1234]/i,
      abbreviated: /^[1234](er|√®me|e)? trim\.?/i,
      wide: /^[1234](er|√®me|e)? trimestre/i
    };
    parseQuarterPatterns18 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns18 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv|f√©vr|mars|avr|mai|juin|juill|juil|ao√ªt|sept|oct|nov|d√©c)\.?/i,
      wide: /^(janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)/i
    };
    parseMonthPatterns18 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns18 = {
      narrow: /^[lmjvsd]/i,
      short: /^(di|lu|ma|me|je|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
      wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
    };
    parseDayPatterns18 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
    };
    matchDayPeriodPatterns18 = {
      narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
      any: /^([ap]\.?\s?m\.?|du matin|de l'apr√®s[-\s]midi|du soir|de la nuit)/i
    };
    parseDayPeriodPatterns18 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /soir/i,
        night: /nuit/i
      }
    };
    match18 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern18,
        parsePattern: parseOrdinalNumberPattern18,
        valueCallback: function valueCallback35(value) {
          return parseInt(value);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns18,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns18,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns18,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns18,
        defaultParseWidth: "any",
        valueCallback: function valueCallback36(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns18,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns18,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns18,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns18,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns18,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns18,
        defaultParseWidth: "any"
      })
    };
    match_default19 = match18;
  }
});

// node_modules/date-fns/esm/locale/fr/index.js
var fr_exports = {};
__export(fr_exports, {
  default: () => fr_default
});
var locale21, fr_default;
var init_fr = __esm({
  "node_modules/date-fns/esm/locale/fr/index.js"() {
    init_formatDistance21();
    init_formatLong21();
    init_formatRelative20();
    init_localize19();
    init_match19();
    locale21 = {
      code: "fr",
      formatDistance: formatDistance_default20,
      formatLong: formatLong_default21,
      formatRelative: formatRelative_default19,
      localize: localize_default19,
      match: match_default19,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    fr_default = locale21;
  }
});

// node_modules/date-fns/esm/locale/fr-CA/_lib/formatLong/index.js
var dateFormats22, timeFormats22, dateTimeFormats22, formatLong22, formatLong_default22;
var init_formatLong22 = __esm({
  "node_modules/date-fns/esm/locale/fr-CA/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats22 = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "yy-MM-dd"
    };
    timeFormats22 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats22 = {
      full: "{{date}} '√†' {{time}}",
      long: "{{date}} '√†' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong22 = {
      date: buildFormatLongFn({
        formats: dateFormats22,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats22,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats22,
        defaultWidth: "full"
      })
    };
    formatLong_default22 = formatLong22;
  }
});

// node_modules/date-fns/esm/locale/fr-CA/index.js
var fr_CA_exports = {};
__export(fr_CA_exports, {
  default: () => fr_CA_default
});
var locale22, fr_CA_default;
var init_fr_CA = __esm({
  "node_modules/date-fns/esm/locale/fr-CA/index.js"() {
    init_formatDistance21();
    init_formatRelative20();
    init_localize19();
    init_match19();
    init_formatLong22();
    locale22 = {
      code: "fr-CA",
      formatDistance: formatDistance_default20,
      formatLong: formatLong_default22,
      formatRelative: formatRelative_default19,
      localize: localize_default19,
      match: match_default19,
      // Unique for fr-CA
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    fr_CA_default = locale22;
  }
});

// node_modules/date-fns/esm/locale/gl/_lib/formatDistance/index.js
var formatDistanceLocale20, formatDistance40, formatDistance_default21;
var init_formatDistance22 = __esm({
  "node_modules/date-fns/esm/locale/gl/_lib/formatDistance/index.js"() {
    formatDistanceLocale20 = {
      lessThanXSeconds: {
        one: "menos dun segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "medio minuto",
      lessThanXMinutes: {
        one: "menos dun minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "arredor dunha hora",
        other: "arredor de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 d√≠a",
        other: "{{count}} d√≠as"
      },
      aboutXWeeks: {
        one: "arredor dunha semana",
        other: "arredor de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "arredor de 1 mes",
        other: "arredor de {{count}} meses"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "arredor dun ano",
        other: "arredor de {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "m√°is dun ano",
        other: "m√°is de {{count}} anos"
      },
      almostXYears: {
        one: "case un ano",
        other: "case {{count}} anos"
      }
    };
    formatDistance40 = function formatDistance41(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale20[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "hai " + result;
        }
      }
      return result;
    };
    formatDistance_default21 = formatDistance40;
  }
});

// node_modules/date-fns/esm/locale/gl/_lib/formatLong/index.js
var dateFormats23, timeFormats23, dateTimeFormats23, formatLong23, formatLong_default23;
var init_formatLong23 = __esm({
  "node_modules/date-fns/esm/locale/gl/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats23 = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    timeFormats23 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats23 = {
      full: "{{date}} '√°s' {{time}}",
      long: "{{date}} '√°s' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong23 = {
      date: buildFormatLongFn({
        formats: dateFormats23,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats23,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats23,
        defaultWidth: "full"
      })
    };
    formatLong_default23 = formatLong23;
  }
});

// node_modules/date-fns/esm/locale/gl/_lib/formatRelative/index.js
var formatRelativeLocale19, formatRelativeLocalePlural3, formatRelative38, formatRelative_default20;
var init_formatRelative21 = __esm({
  "node_modules/date-fns/esm/locale/gl/_lib/formatRelative/index.js"() {
    formatRelativeLocale19 = {
      lastWeek: "'o' eeee 'pasado √°' LT",
      yesterday: "'onte √°' p",
      today: "'hoxe √°' p",
      tomorrow: "'ma√±√° √°' p",
      nextWeek: "eeee '√°' p",
      other: "P"
    };
    formatRelativeLocalePlural3 = {
      lastWeek: "'o' eeee 'pasado √°s' p",
      yesterday: "'onte √°s' p",
      today: "'hoxe √°s' p",
      tomorrow: "'ma√±√° √°s' p",
      nextWeek: "eeee '√°s' p",
      other: "P"
    };
    formatRelative38 = function formatRelative39(token, date, _baseDate, _options) {
      if (date.getUTCHours() !== 1) {
        return formatRelativeLocalePlural3[token];
      }
      return formatRelativeLocale19[token];
    };
    formatRelative_default20 = formatRelative38;
  }
});

// node_modules/date-fns/esm/locale/gl/_lib/localize/index.js
var eraValues19, quarterValues19, monthValues19, dayValues19, dayPeriodValues19, formattingDayPeriodValues14, ordinalNumber37, localize19, localize_default20;
var init_localize20 = __esm({
  "node_modules/date-fns/esm/locale/gl/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues19 = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "despois de cristo"]
    };
    quarterValues19 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1¬∫ trimestre", "2¬∫ trimestre", "3¬∫ trimestre", "4¬∫ trimestre"]
    };
    monthValues19 = {
      narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["xan", "feb", "mar", "abr", "mai", "xun", "xul", "ago", "set", "out", "nov", "dec"],
      wide: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xu√±o", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro"]
    };
    dayValues19 = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["do", "lu", "ma", "me", "xo", "ve", "sa"],
      abbreviated: ["dom", "lun", "mar", "mer", "xov", "ven", "sab"],
      wide: ["domingo", "luns", "martes", "m√©rcores", "xoves", "venres", "s√°bado"]
    };
    dayPeriodValues19 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "ma√±√°",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediod√≠a",
        morning: "ma√±√°",
        afternoon: "tarde",
        evening: "tardi√±a",
        night: "noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediod√≠a",
        morning: "ma√±√°",
        afternoon: "tarde",
        evening: "tardi√±a",
        night: "noite"
      }
    };
    formattingDayPeriodValues14 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da ma√±√°",
        afternoon: "da tarde",
        evening: "da tardi√±a",
        night: "da noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediod√≠a",
        morning: "da ma√±√°",
        afternoon: "da tarde",
        evening: "da tardi√±a",
        night: "da noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediod√≠a",
        morning: "da ma√±√°",
        afternoon: "da tarde",
        evening: "da tardi√±a",
        night: "da noite"
      }
    };
    ordinalNumber37 = function ordinalNumber38(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "¬∫";
    };
    localize19 = {
      ordinalNumber: ordinalNumber37,
      era: buildLocalizeFn({
        values: eraValues19,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues19,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback19(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues19,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues19,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues19,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues14,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default20 = localize19;
  }
});

// node_modules/date-fns/esm/locale/gl/_lib/match/index.js
var matchOrdinalNumberPattern19, parseOrdinalNumberPattern19, matchEraPatterns19, parseEraPatterns19, matchQuarterPatterns19, parseQuarterPatterns19, matchMonthPatterns19, parseMonthPatterns19, matchDayPatterns19, parseDayPatterns19, matchDayPeriodPatterns19, parseDayPeriodPatterns19, match19, match_default20;
var init_match20 = __esm({
  "node_modules/date-fns/esm/locale/gl/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern19 = /^(\d+)(¬∫)?/i;
    parseOrdinalNumberPattern19 = /\d+/i;
    matchEraPatterns19 = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era com[u√∫]n|despois de cristo|era com[u√∫]n)/i
    };
    parseEraPatterns19 = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes da era com[u√∫]n)/i, /^(despois de cristo|era com[u√∫]n)/i]
    };
    matchQuarterPatterns19 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](¬∫)? trimestre/i
    };
    parseQuarterPatterns19 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns19 = {
      narrow: /^[xfmasond]/i,
      abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
      wide: /^(xaneiro|febreiro|marzo|abril|maio|xu√±o|xullo|agosto|setembro|outubro|novembro|decembro)/i
    };
    parseMonthPatterns19 = {
      narrow: [/^x/i, /^f/i, /^m/i, /^a/i, /^m/i, /^x/i, /^x/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xun/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i]
    };
    matchDayPatterns19 = {
      narrow: /^[dlmxvs]/i,
      short: /^(do|lu|ma|me|xo|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
      wide: /^(domingo|luns|martes|m[e√©]rcores|xoves|venres|s[√°a]bado)/i
    };
    parseDayPatterns19 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
    };
    matchDayPeriodPatterns19 = {
      narrow: /^(a|p|mn|md|(da|[a√°]s) (ma√±[a√°]|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|medianoite|mediod[i√≠]a|(da|[a√°]s) (ma√±[a√°]|tarde|noite))/i
    };
    parseDayPeriodPatterns19 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /ma√±[a√°]/i,
        afternoon: /tarde/i,
        evening: /tardi√±a/i,
        night: /noite/i
      }
    };
    match19 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern19,
        parsePattern: parseOrdinalNumberPattern19,
        valueCallback: function valueCallback37(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns19,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns19,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns19,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns19,
        defaultParseWidth: "any",
        valueCallback: function valueCallback38(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns19,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns19,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns19,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns19,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns19,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns19,
        defaultParseWidth: "any"
      })
    };
    match_default20 = match19;
  }
});

// node_modules/date-fns/esm/locale/gl/index.js
var gl_exports = {};
__export(gl_exports, {
  default: () => gl_default
});
var locale23, gl_default;
var init_gl = __esm({
  "node_modules/date-fns/esm/locale/gl/index.js"() {
    init_formatDistance22();
    init_formatLong23();
    init_formatRelative21();
    init_localize20();
    init_match20();
    locale23 = {
      code: "gl",
      formatDistance: formatDistance_default21,
      formatLong: formatLong_default23,
      formatRelative: formatRelative_default20,
      localize: localize_default20,
      match: match_default20,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    gl_default = locale23;
  }
});

// node_modules/date-fns/esm/locale/gu/_lib/formatDistance/index.js
var formatDistanceLocale21, formatDistance42, formatDistance_default22;
var init_formatDistance23 = __esm({
  "node_modules/date-fns/esm/locale/gu/_lib/formatDistance/index.js"() {
    formatDistanceLocale21 = {
      lessThanXSeconds: {
        one: "‡™π‡™Æ‡™£‡™æ‡™Ç",
        // CLDR #1461
        other: "‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™∏‡´á‡™ï‡™Ç‡™°"
      },
      xSeconds: {
        one: "1 ‡™∏‡´á‡™ï‡™Ç‡™°",
        other: "{{count}} ‡™∏‡´á‡™ï‡™Ç‡™°"
      },
      halfAMinute: "‡™Ö‡™°‡™ß‡´Ä ‡™Æ‡™ø‡™®‡™ø‡™ü",
      lessThanXMinutes: {
        one: "‡™Ü ‡™Æ‡™ø‡™®‡™ø‡™ü",
        // CLDR #1448
        other: "‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Æ‡™ø‡™®‡™ø‡™ü"
      },
      xMinutes: {
        one: "1 ‡™Æ‡™ø‡™®‡™ø‡™ü",
        other: "{{count}} ‡™Æ‡™ø‡™®‡™ø‡™ü"
      },
      aboutXHours: {
        one: "‚Äã‡™Ü‡™∂‡™∞‡´á 1 ‡™ï‡™≤‡™æ‡™ï",
        other: "‚Äã‡™Ü‡™∂‡™∞‡´á {{count}} ‡™ï‡™≤‡™æ‡™ï"
      },
      xHours: {
        one: "1 ‡™ï‡™≤‡™æ‡™ï",
        other: "{{count}} ‡™ï‡™≤‡™æ‡™ï"
      },
      xDays: {
        one: "1 ‡™¶‡™ø‡™µ‡™∏",
        other: "{{count}} ‡™¶‡™ø‡™µ‡™∏"
      },
      aboutXWeeks: {
        one: "‡™Ü‡™∂‡™∞‡´á 1 ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡´Å‡™Ç",
        other: "‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡™æ"
      },
      xWeeks: {
        one: "1 ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡´Å‡™Ç",
        other: "{{count}} ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡™æ"
      },
      aboutXMonths: {
        one: "‡™Ü‡™∂‡™∞‡´á 1 ‡™Æ‡™π‡™ø‡™®‡´ã",
        other: "‡™Ü‡™∂‡™∞‡´á {{count}} ‡™Æ‡™π‡™ø‡™®‡™æ"
      },
      xMonths: {
        one: "1 ‡™Æ‡™π‡™ø‡™®‡´ã",
        other: "{{count}} ‡™Æ‡™π‡™ø‡™®‡™æ"
      },
      aboutXYears: {
        one: "‡™Ü‡™∂‡™∞‡´á 1 ‡™µ‡™∞‡´ç‡™∑",
        other: "‡™Ü‡™∂‡™∞‡´á {{count}} ‡™µ‡™∞‡´ç‡™∑"
      },
      xYears: {
        one: "1 ‡™µ‡™∞‡´ç‡™∑",
        other: "{{count}} ‡™µ‡™∞‡´ç‡™∑"
      },
      overXYears: {
        one: "1 ‡™µ‡™∞‡´ç‡™∑‡™•‡´Ä ‡™µ‡™ß‡´Å",
        other: "{{count}} ‡™µ‡™∞‡´ç‡™∑‡™•‡´Ä ‡™µ‡™ß‡´Å"
      },
      almostXYears: {
        one: "‡™≤‡™ó‡™≠‡™ó 1 ‡™µ‡™∞‡´ç‡™∑",
        other: "‡™≤‡™ó‡™≠‡™ó {{count}} ‡™µ‡™∞‡´ç‡™∑"
      }
    };
    formatDistance42 = function formatDistance43(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale21[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "‡™Æ‡™æ‡™Ç";
        } else {
          return result + " ‡™™‡™π‡´á‡™≤‡™æ‡™Ç";
        }
      }
      return result;
    };
    formatDistance_default22 = formatDistance42;
  }
});

// node_modules/date-fns/esm/locale/gu/_lib/formatLong/index.js
var dateFormats24, timeFormats24, dateTimeFormats24, formatLong24, formatLong_default24;
var init_formatLong24 = __esm({
  "node_modules/date-fns/esm/locale/gu/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats24 = {
      full: "EEEE, d MMMM, y",
      // CLDR #1825
      long: "d MMMM, y",
      // CLDR #1826
      medium: "d MMM, y",
      // CLDR #1827
      short: "d/M/yy"
      // CLDR #1828
    };
    timeFormats24 = {
      full: "hh:mm:ss a zzzz",
      // CLDR #1829
      long: "hh:mm:ss a z",
      // CLDR #1830
      medium: "hh:mm:ss a",
      // CLDR #1831
      short: "hh:mm a"
      // CLDR #1832
    };
    dateTimeFormats24 = {
      full: "{{date}} {{time}}",
      // CLDR #1833
      long: "{{date}} {{time}}",
      // CLDR #1834
      medium: "{{date}} {{time}}",
      // CLDR #1835
      short: "{{date}} {{time}}"
      // CLDR #1836
    };
    formatLong24 = {
      date: buildFormatLongFn({
        formats: dateFormats24,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats24,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats24,
        defaultWidth: "full"
      })
    };
    formatLong_default24 = formatLong24;
  }
});

// node_modules/date-fns/esm/locale/gu/_lib/formatRelative/index.js
var formatRelativeLocale20, formatRelative40, formatRelative_default21;
var init_formatRelative22 = __esm({
  "node_modules/date-fns/esm/locale/gu/_lib/formatRelative/index.js"() {
    formatRelativeLocale20 = {
      lastWeek: "'‡™™‡™æ‡™õ‡™≤‡™æ' eeee p",
      // CLDR #1384
      yesterday: "'‡™ó‡™à‡™ï‡™æ‡™≤‡´á' p",
      // CLDR #1409
      today: "'‡™Ü‡™ú‡´á' p",
      // CLDR #1410
      tomorrow: "'‡™Ü‡™µ‡™§‡´Ä‡™ï‡™æ‡™≤‡´á' p",
      // CLDR #1411
      nextWeek: "eeee p",
      // CLDR #1386
      other: "P"
    };
    formatRelative40 = function formatRelative41(token, _date, _baseDate, _options) {
      return formatRelativeLocale20[token];
    };
    formatRelative_default21 = formatRelative40;
  }
});

// node_modules/date-fns/esm/locale/gu/_lib/localize/index.js
var eraValues20, quarterValues20, monthValues20, dayValues20, dayPeriodValues20, formattingDayPeriodValues15, ordinalNumber39, localize20, localize_default21;
var init_localize21 = __esm({
  "node_modules/date-fns/esm/locale/gu/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues20 = {
      narrow: ["‡™à‡™∏‡™™‡´Ç", "‡™à‡™∏"],
      abbreviated: ["‡™à.‡™∏.‡™™‡´Ç‡™∞‡´ç‡™µ‡´á", "‡™à.‡™∏."],
      wide: ["‡™à‡™∏‡™µ‡´Ä‡™∏‡™® ‡™™‡´Ç‡™∞‡´ç‡™µ‡´á", "‡™à‡™∏‡™µ‡´Ä‡™∏‡™®"]
    };
    quarterValues20 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1‡™≤‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏", "2‡™ú‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏", "3‡™ú‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏", "4‡™•‡´ã ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏"]
    };
    monthValues20 = {
      narrow: ["‡™ú‡™æ", "‡™´‡´á", "‡™Æ‡™æ", "‡™è", "‡™Æ‡´á", "‡™ú‡´Ç", "‡™ú‡´Å", "‡™ì", "‡™∏", "‡™ì", "‡™®", "‡™°‡™ø"],
      abbreviated: ["‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å", "‡™´‡´á‡™¨‡´ç‡™∞‡´Å", "‡™Æ‡™æ‡™∞‡´ç‡™ö", "‡™è‡™™‡´ç‡™∞‡™ø‡™≤", "‡™Æ‡´á", "‡™ú‡´Ç‡™®", "‡™ú‡´Å‡™≤‡™æ‡™à", "‡™ë‡™ó‡™∏‡´ç‡™ü", "‡™∏‡™™‡´ç‡™ü‡´á", "‡™ì‡™ï‡´ç‡™ü‡´ã", "‡™®‡™µ‡´á", "‡™°‡™ø‡™∏‡´á"],
      wide: ["‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å‡™Ü‡™∞‡´Ä", "‡™´‡´á‡™¨‡´ç‡™∞‡´Å‡™Ü‡™∞‡´Ä", "‡™Æ‡™æ‡™∞‡´ç‡™ö", "‡™è‡™™‡´ç‡™∞‡™ø‡™≤", "‡™Æ‡´á", "‡™ú‡´Ç‡™®", "‡™ú‡´Å‡™≤‡™æ‡™á", "‡™ì‡™ó‡™∏‡´ç‡™ü", "‡™∏‡™™‡´ç‡™ü‡´á‡™Æ‡´ç‡™¨‡™∞", "‡™ì‡™ï‡´ç‡™ü‡´ã‡™¨‡™∞", "‡™®‡™µ‡´á‡™Æ‡´ç‡™¨‡™∞", "‡™°‡™ø‡™∏‡´á‡™Æ‡´ç‡™¨‡™∞"]
    };
    dayValues20 = {
      narrow: ["‡™∞", "‡™∏‡´ã", "‡™Æ‡™Ç", "‡™¨‡´Å", "‡™ó‡´Å", "‡™∂‡´Å", "‡™∂"],
      short: ["‡™∞", "‡™∏‡´ã", "‡™Æ‡™Ç", "‡™¨‡´Å", "‡™ó‡´Å", "‡™∂‡´Å", "‡™∂"],
      abbreviated: ["‡™∞‡™µ‡™ø", "‡™∏‡´ã‡™Æ", "‡™Æ‡™Ç‡™ó‡™≥", "‡™¨‡´Å‡™ß", "‡™ó‡´Å‡™∞‡´Å", "‡™∂‡´Å‡™ï‡´ç‡™∞", "‡™∂‡™®‡™ø"],
      wide: [
        "‡™∞‡™µ‡™ø‡™µ‡™æ‡™∞",
        "‡™∏‡´ã‡™Æ‡™µ‡™æ‡™∞",
        "‡™Æ‡™Ç‡™ó‡™≥‡™µ‡™æ‡™∞",
        "‡™¨‡´Å‡™ß‡™µ‡™æ‡™∞",
        "‡™ó‡´Å‡™∞‡´Å‡™µ‡™æ‡™∞",
        "‡™∂‡´Å‡™ï‡´ç‡™∞‡™µ‡™æ‡™∞",
        "‡™∂‡™®‡™ø‡™µ‡™æ‡™∞"
        /* Saturday */
      ]
    };
    dayPeriodValues20 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "‡™Æ.‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨.",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨‡™™‡´ã‡™∞‡´á",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨‡™™‡´ã‡™∞‡´á",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      }
    };
    formattingDayPeriodValues15 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "‡™Æ.‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨‡™™‡´ã‡™∞‡´á",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨‡™™‡´ã‡™∞‡´á",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "‚Äã‡™Æ‡™ß‡´ç‡™Ø‡™∞‡™æ‡™§‡´ç‡™∞‡™ø",
        noon: "‡™¨‡™™‡´ã‡™∞‡´á",
        morning: "‡™∏‡™µ‡™æ‡™∞‡´á",
        afternoon: "‡™¨‡™™‡´ã‡™∞‡´á",
        evening: "‡™∏‡™æ‡™Ç‡™ú‡´á",
        night: "‡™∞‡™æ‡™§‡´ç‡™∞‡´á"
      }
    };
    ordinalNumber39 = function ordinalNumber40(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize20 = {
      ordinalNumber: ordinalNumber39,
      era: buildLocalizeFn({
        values: eraValues20,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues20,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback20(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues20,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues20,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues20,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues15,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default21 = localize20;
  }
});

// node_modules/date-fns/esm/locale/gu/_lib/match/index.js
var matchOrdinalNumberPattern20, parseOrdinalNumberPattern20, matchEraPatterns20, parseEraPatterns20, matchQuarterPatterns20, parseQuarterPatterns20, matchMonthPatterns20, parseMonthPatterns20, matchDayPatterns20, parseDayPatterns20, matchDayPeriodPatterns20, parseDayPeriodPatterns20, match20, match_default21;
var init_match21 = __esm({
  "node_modules/date-fns/esm/locale/gu/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern20 = /^(\d+)(‡™≤|‡™ú|‡™•|‡™†‡´ç‡™†|‡™Æ)?/i;
    parseOrdinalNumberPattern20 = /\d+/i;
    matchEraPatterns20 = {
      narrow: /^(‡™à‡™∏‡™™‡´Ç|‡™à‡™∏)/i,
      abbreviated: /^(‡™à\.‡™∏\.‡™™‡´Ç‡™∞‡´ç‡™µ‡´á|‡™à\.‡™∏\.)/i,
      wide: /^(‡™à‡™∏‡™µ‡´Ä‡™∏‡™®\s‡™™‡´Ç‡™∞‡´ç‡™µ‡´á|‡™à‡™∏‡™µ‡´Ä‡™∏‡™®)/i
    };
    parseEraPatterns20 = {
      any: [/^‡™à‡™∏‡™™‡´Ç/i, /^‡™à‡™∏/i]
    };
    matchQuarterPatterns20 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](‡™≤‡´ã|‡™ú‡´ã|‡™•‡´ã)? ‡™§‡´ç‡™∞‡™ø‡™Æ‡™æ‡™∏/i
    };
    parseQuarterPatterns20 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns20 = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[‡™ú‡™æ‡™´‡´á‡™Æ‡™æ‡™è‡™Æ‡´á‡™ú‡´Ç‡™ú‡´Å‡™ì‡™∏‡™ì‡™®‡™°‡™ø]/i,
      abbreviated: /^(‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å|‡™´‡´á‡™¨‡´ç‡™∞‡´Å|‡™Æ‡™æ‡™∞‡´ç‡™ö|‡™è‡™™‡´ç‡™∞‡™ø‡™≤|‡™Æ‡´á|‡™ú‡´Ç‡™®|‡™ú‡´Å‡™≤‡™æ‡™à|‡™ë‡™ó‡™∏‡´ç‡™ü|‡™∏‡™™‡´ç‡™ü‡´á|‡™ì‡™ï‡´ç‡™ü‡´ã|‡™®‡™µ‡´á|‡™°‡™ø‡™∏‡´á)/i,
      wide: /^(‡™ú‡™æ‡™®‡´ç‡™Ø‡´Å‡™Ü‡™∞‡´Ä|‡™´‡´á‡™¨‡´ç‡™∞‡´Å‡™Ü‡™∞‡´Ä|‡™Æ‡™æ‡™∞‡´ç‡™ö|‡™è‡™™‡´ç‡™∞‡™ø‡™≤|‡™Æ‡´á|‡™ú‡´Ç‡™®|‡™ú‡´Å‡™≤‡™æ‡™á|‡™ì‡™ó‡™∏‡´ç‡™ü|‡™∏‡™™‡´ç‡™ü‡´á‡™Æ‡´ç‡™¨‡™∞|‡™ì‡™ï‡´ç‡™ü‡´ã‡™¨‡™∞|‡™®‡™µ‡´á‡™Æ‡´ç‡™¨‡™∞|‡™°‡™ø‡™∏‡´á‡™Æ‡´ç‡™¨‡™∞)/i
    };
    parseMonthPatterns20 = {
      narrow: [/^‡™ú‡™æ/i, /^‡™´‡´á/i, /^‡™Æ‡™æ/i, /^‡™è/i, /^‡™Æ‡´á/i, /^‡™ú‡´Ç/i, /^‡™ú‡´Å/i, /^‡™ë‡™ó/i, /^‡™∏/i, /^‡™ì‡™ï‡´ç‡™ü‡´ã/i, /^‡™®/i, /^‡™°‡™ø/i],
      any: [/^‡™ú‡™æ/i, /^‡™´‡´á/i, /^‡™Æ‡™æ/i, /^‡™è/i, /^‡™Æ‡´á/i, /^‡™ú‡´Ç/i, /^‡™ú‡´Å/i, /^‡™ë‡™ó/i, /^‡™∏/i, /^‡™ì‡™ï‡´ç‡™ü‡´ã/i, /^‡™®/i, /^‡™°‡™ø/i]
    };
    matchDayPatterns20 = {
      narrow: /^(‡™∞|‡™∏‡´ã|‡™Æ‡™Ç|‡™¨‡´Å|‡™ó‡´Å|‡™∂‡´Å|‡™∂)/i,
      short: /^(‡™∞|‡™∏‡´ã|‡™Æ‡™Ç|‡™¨‡´Å|‡™ó‡´Å|‡™∂‡´Å|‡™∂)/i,
      abbreviated: /^(‡™∞‡™µ‡™ø|‡™∏‡´ã‡™Æ|‡™Æ‡™Ç‡™ó‡™≥|‡™¨‡´Å‡™ß|‡™ó‡´Å‡™∞‡´Å|‡™∂‡´Å‡™ï‡´ç‡™∞|‡™∂‡™®‡™ø)/i,
      wide: /^(‡™∞‡™µ‡™ø‡™µ‡™æ‡™∞|‡™∏‡´ã‡™Æ‡™µ‡™æ‡™∞|‡™Æ‡™Ç‡™ó‡™≥‡™µ‡™æ‡™∞|‡™¨‡´Å‡™ß‡™µ‡™æ‡™∞|‡™ó‡´Å‡™∞‡´Å‡™µ‡™æ‡™∞|‡™∂‡´Å‡™ï‡´ç‡™∞‡™µ‡™æ‡™∞|‡™∂‡™®‡™ø‡™µ‡™æ‡™∞)/i
    };
    parseDayPatterns20 = {
      narrow: [/^‡™∞/i, /^‡™∏‡´ã/i, /^‡™Æ‡™Ç/i, /^‡™¨‡´Å/i, /^‡™ó‡´Å/i, /^‡™∂‡´Å/i, /^‡™∂/i],
      any: [/^‡™∞/i, /^‡™∏‡´ã/i, /^‡™Æ‡™Ç/i, /^‡™¨‡´Å/i, /^‡™ó‡´Å/i, /^‡™∂‡´Å/i, /^‡™∂/i]
    };
    matchDayPeriodPatterns20 = {
      narrow: /^(a|p|‡™Æ\.?|‡™∏|‡™¨|‡™∏‡™æ‡™Ç|‡™∞‡™æ)/i,
      any: /^(a|p|‡™Æ\.?|‡™∏|‡™¨|‡™∏‡™æ‡™Ç|‡™∞‡™æ)/i
    };
    parseDayPeriodPatterns20 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^‡™Æ\.?/i,
        noon: /^‡™¨/i,
        morning: /‡™∏/i,
        afternoon: /‡™¨/i,
        evening: /‡™∏‡™æ‡™Ç/i,
        night: /‡™∞‡™æ/i
      }
    };
    match20 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern20,
        parsePattern: parseOrdinalNumberPattern20,
        valueCallback: function valueCallback39(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns20,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns20,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns20,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns20,
        defaultParseWidth: "any",
        valueCallback: function valueCallback40(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns20,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns20,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns20,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns20,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns20,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns20,
        defaultParseWidth: "any"
      })
    };
    match_default21 = match20;
  }
});

// node_modules/date-fns/esm/locale/gu/index.js
var gu_exports = {};
__export(gu_exports, {
  default: () => gu_default
});
var locale24, gu_default;
var init_gu = __esm({
  "node_modules/date-fns/esm/locale/gu/index.js"() {
    init_formatDistance23();
    init_formatLong24();
    init_formatRelative22();
    init_localize21();
    init_match21();
    locale24 = {
      code: "gu",
      formatDistance: formatDistance_default22,
      formatLong: formatLong_default24,
      formatRelative: formatRelative_default21,
      localize: localize_default21,
      match: match_default21,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    gu_default = locale24;
  }
});

// node_modules/date-fns/esm/locale/he/_lib/formatDistance/index.js
var formatDistanceLocale22, formatDistance44, formatDistance_default23;
var init_formatDistance24 = __esm({
  "node_modules/date-fns/esm/locale/he/_lib/formatDistance/index.js"() {
    formatDistanceLocale22 = {
      lessThanXSeconds: {
        one: "◊§◊ó◊ï◊™ ◊û◊©◊†◊ô◊ô◊î",
        two: "◊§◊ó◊ï◊™ ◊û◊©◊™◊ô ◊©◊†◊ô◊ï◊™",
        other: "◊§◊ó◊ï◊™ ◊û÷æ{{count}} ◊©◊†◊ô◊ï◊™"
      },
      xSeconds: {
        one: "◊©◊†◊ô◊ô◊î",
        two: "◊©◊™◊ô ◊©◊†◊ô◊ï◊™",
        other: "{{count}} ◊©◊†◊ô◊ï◊™"
      },
      halfAMinute: "◊ó◊¶◊ô ◊ì◊ß◊î",
      lessThanXMinutes: {
        one: "◊§◊ó◊ï◊™ ◊û◊ì◊ß◊î",
        two: "◊§◊ó◊ï◊™ ◊û◊©◊™◊ô ◊ì◊ß◊ï◊™",
        other: "◊§◊ó◊ï◊™ ◊û÷æ{{count}} ◊ì◊ß◊ï◊™"
      },
      xMinutes: {
        one: "◊ì◊ß◊î",
        two: "◊©◊™◊ô ◊ì◊ß◊ï◊™",
        other: "{{count}} ◊ì◊ß◊ï◊™"
      },
      aboutXHours: {
        one: "◊õ◊©◊¢◊î",
        two: "◊õ◊©◊¢◊™◊ô◊ô◊ù",
        other: "◊õ÷æ{{count}} ◊©◊¢◊ï◊™"
      },
      xHours: {
        one: "◊©◊¢◊î",
        two: "◊©◊¢◊™◊ô◊ô◊ù",
        other: "{{count}} ◊©◊¢◊ï◊™"
      },
      xDays: {
        one: "◊ô◊ï◊ù",
        two: "◊ô◊ï◊û◊ô◊ô◊ù",
        other: "{{count}} ◊ô◊û◊ô◊ù"
      },
      aboutXWeeks: {
        one: "◊õ◊©◊ë◊ï◊¢",
        two: "◊õ◊©◊ë◊ï◊¢◊ô◊ô◊ù",
        other: "◊õ÷æ{{count}} ◊©◊ë◊ï◊¢◊ï◊™"
      },
      xWeeks: {
        one: "◊©◊ë◊ï◊¢",
        two: "◊©◊ë◊ï◊¢◊ô◊ô◊ù",
        other: "{{count}} ◊©◊ë◊ï◊¢◊ï◊™"
      },
      aboutXMonths: {
        one: "◊õ◊ó◊ï◊ì◊©",
        two: "◊õ◊ó◊ï◊ì◊©◊ô◊ô◊ù",
        other: "◊õ÷æ{{count}} ◊ó◊ï◊ì◊©◊ô◊ù"
      },
      xMonths: {
        one: "◊ó◊ï◊ì◊©",
        two: "◊ó◊ï◊ì◊©◊ô◊ô◊ù",
        other: "{{count}} ◊ó◊ï◊ì◊©◊ô◊ù"
      },
      aboutXYears: {
        one: "◊õ◊©◊†◊î",
        two: "◊õ◊©◊†◊™◊ô◊ô◊ù",
        other: "◊õ÷æ{{count}} ◊©◊†◊ô◊ù"
      },
      xYears: {
        one: "◊©◊†◊î",
        two: "◊©◊†◊™◊ô◊ô◊ù",
        other: "{{count}} ◊©◊†◊ô◊ù"
      },
      overXYears: {
        one: "◊ô◊ï◊™◊® ◊û◊©◊†◊î",
        two: "◊ô◊ï◊™◊® ◊û◊©◊†◊™◊ô◊ô◊ù",
        other: "◊ô◊ï◊™◊® ◊û÷æ{{count}} ◊©◊†◊ô◊ù"
      },
      almostXYears: {
        one: "◊õ◊û◊¢◊ò ◊©◊†◊î",
        two: "◊õ◊û◊¢◊ò ◊©◊†◊™◊ô◊ô◊ù",
        other: "◊õ◊û◊¢◊ò {{count}} ◊©◊†◊ô◊ù"
      }
    };
    formatDistance44 = function formatDistance45(token, count, options) {
      if (token === "xDays" && options !== null && options !== void 0 && options.addSuffix && count <= 2) {
        if (options.comparison && options.comparison > 0) {
          return count === 1 ? "◊û◊ó◊®" : "◊û◊ó◊®◊™◊ô◊ô◊ù";
        }
        return count === 1 ? "◊ê◊™◊û◊ï◊ú" : "◊©◊ú◊©◊ï◊ù";
      }
      var result;
      var tokenValue = formatDistanceLocale22[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2) {
        result = tokenValue.two;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "◊ë◊¢◊ï◊ì " + result;
        } else {
          return "◊ú◊§◊†◊ô " + result;
        }
      }
      return result;
    };
    formatDistance_default23 = formatDistance44;
  }
});

// node_modules/date-fns/esm/locale/he/_lib/formatLong/index.js
var dateFormats25, timeFormats25, dateTimeFormats25, formatLong25, formatLong_default25;
var init_formatLong25 = __esm({
  "node_modules/date-fns/esm/locale/he/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats25 = {
      full: "EEEE, d ◊ëMMMM y",
      long: "d ◊ëMMMM y",
      medium: "d ◊ëMMM y",
      short: "d.M.y"
    };
    timeFormats25 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats25 = {
      full: "{{date}} '◊ë◊©◊¢◊î' {{time}}",
      long: "{{date}} '◊ë◊©◊¢◊î' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong25 = {
      date: buildFormatLongFn({
        formats: dateFormats25,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats25,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats25,
        defaultWidth: "full"
      })
    };
    formatLong_default25 = formatLong25;
  }
});

// node_modules/date-fns/esm/locale/he/_lib/formatRelative/index.js
var formatRelativeLocale21, formatRelative42, formatRelative_default22;
var init_formatRelative23 = __esm({
  "node_modules/date-fns/esm/locale/he/_lib/formatRelative/index.js"() {
    formatRelativeLocale21 = {
      lastWeek: "eeee '◊©◊¢◊ë◊® ◊ë◊©◊¢◊î' p",
      yesterday: "'◊ê◊™◊û◊ï◊ú ◊ë◊©◊¢◊î' p",
      today: "'◊î◊ô◊ï◊ù ◊ë◊©◊¢◊î' p",
      tomorrow: "'◊û◊ó◊® ◊ë◊©◊¢◊î' p",
      nextWeek: "eeee '◊ë◊©◊¢◊î' p",
      other: "P"
    };
    formatRelative42 = function formatRelative43(token, _date, _baseDate, _options) {
      return formatRelativeLocale21[token];
    };
    formatRelative_default22 = formatRelative42;
  }
});

// node_modules/date-fns/esm/locale/he/_lib/localize/index.js
var eraValues21, quarterValues21, monthValues21, dayValues21, dayPeriodValues21, formattingDayPeriodValues16, ordinalNumber41, localize21, localize_default22;
var init_localize22 = __esm({
  "node_modules/date-fns/esm/locale/he/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues21 = {
      narrow: ["◊ú◊§◊†◊î◊¥◊°", "◊ú◊°◊§◊ô◊®◊î"],
      abbreviated: ["◊ú◊§◊†◊î◊¥◊°", "◊ú◊°◊§◊ô◊®◊î"],
      wide: ["◊ú◊§◊†◊ô ◊î◊°◊§◊ô◊®◊î", "◊ú◊°◊§◊ô◊®◊î"]
    };
    quarterValues21 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["◊®◊ë◊¢◊ï◊ü 1", "◊®◊ë◊¢◊ï◊ü 2", "◊®◊ë◊¢◊ï◊ü 3", "◊®◊ë◊¢◊ï◊ü 4"]
    };
    monthValues21 = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: ["◊ô◊†◊ï◊≥", "◊§◊ë◊®◊≥", "◊û◊®◊•", "◊ê◊§◊®◊≥", "◊û◊ê◊ô", "◊ô◊ï◊†◊ô", "◊ô◊ï◊ú◊ô", "◊ê◊ï◊í◊≥", "◊°◊§◊ò◊≥", "◊ê◊ï◊ß◊≥", "◊†◊ï◊ë◊≥", "◊ì◊¶◊û◊≥"],
      wide: ["◊ô◊†◊ï◊ê◊®", "◊§◊ë◊®◊ï◊ê◊®", "◊û◊®◊•", "◊ê◊§◊®◊ô◊ú", "◊û◊ê◊ô", "◊ô◊ï◊†◊ô", "◊ô◊ï◊ú◊ô", "◊ê◊ï◊í◊ï◊°◊ò", "◊°◊§◊ò◊û◊ë◊®", "◊ê◊ï◊ß◊ò◊ï◊ë◊®", "◊†◊ï◊ë◊û◊ë◊®", "◊ì◊¶◊û◊ë◊®"]
    };
    dayValues21 = {
      narrow: ["◊ê◊≥", "◊ë◊≥", "◊í◊≥", "◊ì◊≥", "◊î◊≥", "◊ï◊≥", "◊©◊≥"],
      short: ["◊ê◊≥", "◊ë◊≥", "◊í◊≥", "◊ì◊≥", "◊î◊≥", "◊ï◊≥", "◊©◊≥"],
      abbreviated: ["◊ô◊ï◊ù ◊ê◊≥", "◊ô◊ï◊ù ◊ë◊≥", "◊ô◊ï◊ù ◊í◊≥", "◊ô◊ï◊ù ◊ì◊≥", "◊ô◊ï◊ù ◊î◊≥", "◊ô◊ï◊ù ◊ï◊≥", "◊©◊ë◊™"],
      wide: ["◊ô◊ï◊ù ◊®◊ê◊©◊ï◊ü", "◊ô◊ï◊ù ◊©◊†◊ô", "◊ô◊ï◊ù ◊©◊ú◊ô◊©◊ô", "◊ô◊ï◊ù ◊®◊ë◊ô◊¢◊ô", "◊ô◊ï◊ù ◊ó◊û◊ô◊©◊ô", "◊ô◊ï◊ù ◊©◊ô◊©◊ô", "◊ô◊ï◊ù ◊©◊ë◊™"]
    };
    dayPeriodValues21 = {
      narrow: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ï◊ß◊®",
        afternoon: "◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊¢◊®◊ë",
        night: "◊ú◊ô◊ú◊î"
      },
      abbreviated: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ï◊ß◊®",
        afternoon: "◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊¢◊®◊ë",
        night: "◊ú◊ô◊ú◊î"
      },
      wide: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ï◊ß◊®",
        afternoon: "◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊¢◊®◊ë",
        night: "◊ú◊ô◊ú◊î"
      }
    };
    formattingDayPeriodValues16 = {
      narrow: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ë◊ï◊ß◊®",
        afternoon: "◊ë◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊ë◊¢◊®◊ë",
        night: "◊ë◊ú◊ô◊ú◊î"
      },
      abbreviated: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ë◊ï◊ß◊®",
        afternoon: "◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊ë◊¢◊®◊ë",
        night: "◊ë◊ú◊ô◊ú◊î"
      },
      wide: {
        am: "◊ú◊§◊†◊î◊¥◊¶",
        pm: "◊ê◊ó◊î◊¥◊¶",
        midnight: "◊ó◊¶◊ï◊™",
        noon: "◊¶◊î◊®◊ô◊ô◊ù",
        morning: "◊ë◊ë◊ï◊ß◊®",
        afternoon: "◊ê◊ó◊® ◊î◊¶◊î◊®◊ô◊ô◊ù",
        evening: "◊ë◊¢◊®◊ë",
        night: "◊ë◊ú◊ô◊ú◊î"
      }
    };
    ordinalNumber41 = function ordinalNumber42(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      if (number <= 0 || number > 10)
        return String(number);
      var unit = String(options === null || options === void 0 ? void 0 : options.unit);
      var isFemale = ["year", "hour", "minute", "second"].indexOf(unit) >= 0;
      var male = ["◊®◊ê◊©◊ï◊ü", "◊©◊†◊ô", "◊©◊ú◊ô◊©◊ô", "◊®◊ë◊ô◊¢◊ô", "◊ó◊û◊ô◊©◊ô", "◊©◊ô◊©◊ô", "◊©◊ë◊ô◊¢◊ô", "◊©◊û◊ô◊†◊ô", "◊™◊©◊ô◊¢◊ô", "◊¢◊©◊ô◊®◊ô"];
      var female = ["◊®◊ê◊©◊ï◊†◊î", "◊©◊†◊ô◊ô◊î", "◊©◊ú◊ô◊©◊ô◊™", "◊®◊ë◊ô◊¢◊ô◊™", "◊ó◊û◊ô◊©◊ô◊™", "◊©◊ô◊©◊ô◊™", "◊©◊ë◊ô◊¢◊ô◊™", "◊©◊û◊ô◊†◊ô◊™", "◊™◊©◊ô◊¢◊ô◊™", "◊¢◊©◊ô◊®◊ô◊™"];
      var index = number - 1;
      return isFemale ? female[index] : male[index];
    };
    localize21 = {
      ordinalNumber: ordinalNumber41,
      era: buildLocalizeFn({
        values: eraValues21,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues21,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback21(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues21,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues21,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues21,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues16,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default22 = localize21;
  }
});

// node_modules/date-fns/esm/locale/he/_lib/match/index.js
var matchOrdinalNumberPattern21, parseOrdinalNumberPattern21, matchEraPatterns21, parseEraPatterns21, matchQuarterPatterns21, parseQuarterPatterns21, matchMonthPatterns21, parseMonthPatterns21, matchDayPatterns21, parseDayPatterns21, matchDayPeriodPatterns21, parseDayPeriodPatterns21, ordinalName, match21, match_default22;
var init_match22 = __esm({
  "node_modules/date-fns/esm/locale/he/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern21 = /^(\d+|(◊®◊ê◊©◊ï◊ü|◊©◊†◊ô|◊©◊ú◊ô◊©◊ô|◊®◊ë◊ô◊¢◊ô|◊ó◊û◊ô◊©◊ô|◊©◊ô◊©◊ô|◊©◊ë◊ô◊¢◊ô|◊©◊û◊ô◊†◊ô|◊™◊©◊ô◊¢◊ô|◊¢◊©◊ô◊®◊ô|◊®◊ê◊©◊ï◊†◊î|◊©◊†◊ô◊ô◊î|◊©◊ú◊ô◊©◊ô◊™|◊®◊ë◊ô◊¢◊ô◊™|◊ó◊û◊ô◊©◊ô◊™|◊©◊ô◊©◊ô◊™|◊©◊ë◊ô◊¢◊ô◊™|◊©◊û◊ô◊†◊ô◊™|◊™◊©◊ô◊¢◊ô◊™|◊¢◊©◊ô◊®◊ô◊™))/i;
    parseOrdinalNumberPattern21 = /^(\d+|◊®◊ê|◊©◊†|◊©◊ú|◊®◊ë|◊ó|◊©◊ô|◊©◊ë|◊©◊û|◊™|◊¢)/i;
    matchEraPatterns21 = {
      narrow: /^◊ú(◊°◊§◊ô◊®◊î|◊§◊†◊î◊¥◊°)/i,
      abbreviated: /^◊ú(◊°◊§◊ô◊®◊î|◊§◊†◊î◊¥◊°)/i,
      wide: /^◊ú(◊§◊†◊ô ◊î)?◊°◊§◊ô◊®◊î/i
    };
    parseEraPatterns21 = {
      any: [/^◊ú◊§/i, /^◊ú◊°/i]
    };
    matchQuarterPatterns21 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^◊®◊ë◊¢◊ï◊ü [1234]/i
    };
    parseQuarterPatterns21 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns21 = {
      narrow: /^\d+/i,
      abbreviated: /^(◊ô◊†◊ï|◊§◊ë◊®|◊û◊®◊•|◊ê◊§◊®|◊û◊ê◊ô|◊ô◊ï◊†◊ô|◊ô◊ï◊ú◊ô|◊ê◊ï◊í|◊°◊§◊ò|◊ê◊ï◊ß|◊†◊ï◊ë|◊ì◊¶◊û)◊≥?/i,
      wide: /^(◊ô◊†◊ï◊ê◊®|◊§◊ë◊®◊ï◊ê◊®|◊û◊®◊•|◊ê◊§◊®◊ô◊ú|◊û◊ê◊ô|◊ô◊ï◊†◊ô|◊ô◊ï◊ú◊ô|◊ê◊ï◊í◊ï◊°◊ò|◊°◊§◊ò◊û◊ë◊®|◊ê◊ï◊ß◊ò◊ï◊ë◊®|◊†◊ï◊ë◊û◊ë◊®|◊ì◊¶◊û◊ë◊®)/i
    };
    parseMonthPatterns21 = {
      narrow: [/^1$/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
      any: [/^◊ô◊†/i, /^◊§/i, /^◊û◊®/i, /^◊ê◊§/i, /^◊û◊ê/i, /^◊ô◊ï◊†/i, /^◊ô◊ï◊ú/i, /^◊ê◊ï◊í/i, /^◊°/i, /^◊ê◊ï◊ß/i, /^◊†/i, /^◊ì/i]
    };
    matchDayPatterns21 = {
      narrow: /^[◊ê◊ë◊í◊ì◊î◊ï◊©]◊≥/i,
      short: /^[◊ê◊ë◊í◊ì◊î◊ï◊©]◊≥/i,
      abbreviated: /^(◊©◊ë◊™|◊ô◊ï◊ù (◊ê|◊ë|◊í|◊ì|◊î|◊ï)◊≥)/i,
      wide: /^◊ô◊ï◊ù (◊®◊ê◊©◊ï◊ü|◊©◊†◊ô|◊©◊ú◊ô◊©◊ô|◊®◊ë◊ô◊¢◊ô|◊ó◊û◊ô◊©◊ô|◊©◊ô◊©◊ô|◊©◊ë◊™)/i
    };
    parseDayPatterns21 = {
      abbreviated: [/◊ê◊≥$/i, /◊ë◊≥$/i, /◊í◊≥$/i, /◊ì◊≥$/i, /◊î◊≥$/i, /◊ï◊≥$/i, /^◊©/i],
      wide: [/◊ü$/i, /◊†◊ô$/i, /◊ú◊ô◊©◊ô$/i, /◊¢◊ô$/i, /◊û◊ô◊©◊ô$/i, /◊©◊ô◊©◊ô$/i, /◊™$/i],
      any: [/^◊ê/i, /^◊ë/i, /^◊í/i, /^◊ì/i, /^◊î/i, /^◊ï/i, /^◊©/i]
    };
    matchDayPeriodPatterns21 = {
      any: /^(◊ê◊ó◊® ◊î|◊ë)?(◊ó◊¶◊ï◊™|◊¶◊î◊®◊ô◊ô◊ù|◊ë◊ï◊ß◊®|◊¢◊®◊ë|◊ú◊ô◊ú◊î|◊ê◊ó◊î◊¥◊¶|◊ú◊§◊†◊î◊¥◊¶)/i
    };
    parseDayPeriodPatterns21 = {
      any: {
        am: /^◊ú◊§/i,
        pm: /^◊ê◊ó◊î/i,
        midnight: /^◊ó/i,
        noon: /^◊¶/i,
        morning: /◊ë◊ï◊ß◊®/i,
        afternoon: /◊ë◊¶|◊ê◊ó◊®/i,
        evening: /◊¢◊®◊ë/i,
        night: /◊ú◊ô◊ú◊î/i
      }
    };
    ordinalName = ["◊®◊ê", "◊©◊†", "◊©◊ú", "◊®◊ë", "◊ó", "◊©◊ô", "◊©◊ë", "◊©◊û", "◊™", "◊¢"];
    match21 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern21,
        parsePattern: parseOrdinalNumberPattern21,
        valueCallback: function valueCallback41(value) {
          var number = parseInt(value, 10);
          return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns21,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns21,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns21,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns21,
        defaultParseWidth: "any",
        valueCallback: function valueCallback42(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns21,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns21,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns21,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns21,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns21,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns21,
        defaultParseWidth: "any"
      })
    };
    match_default22 = match21;
  }
});

// node_modules/date-fns/esm/locale/he/index.js
var he_exports = {};
__export(he_exports, {
  default: () => he_default
});
var locale25, he_default;
var init_he = __esm({
  "node_modules/date-fns/esm/locale/he/index.js"() {
    init_formatDistance24();
    init_formatLong25();
    init_formatRelative23();
    init_localize22();
    init_match22();
    locale25 = {
      code: "he",
      formatDistance: formatDistance_default23,
      formatLong: formatLong_default25,
      formatRelative: formatRelative_default22,
      localize: localize_default22,
      match: match_default22,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    he_default = locale25;
  }
});

// node_modules/date-fns/esm/locale/hi/_lib/localize/index.js
function localeToNumber(locale62) {
  var enNumber = locale62.toString().replace(/[‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø‡•¶]/g, function(match58) {
    return numberValues2.number[match58];
  });
  return Number(enNumber);
}
function numberToLocale2(enNumber) {
  return enNumber.toString().replace(/\d/g, function(match58) {
    return numberValues2.locale[match58];
  });
}
var numberValues2, eraValues22, quarterValues22, monthValues22, dayValues22, dayPeriodValues22, formattingDayPeriodValues17, ordinalNumber43, localize22, localize_default23;
var init_localize23 = __esm({
  "node_modules/date-fns/esm/locale/hi/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    numberValues2 = {
      locale: {
        "1": "‡•ß",
        "2": "‡•®",
        "3": "‡•©",
        "4": "‡•™",
        "5": "‡•´",
        "6": "‡•¨",
        "7": "‡•≠",
        "8": "‡•Æ",
        "9": "‡•Ø",
        "0": "‡•¶"
      },
      number: {
        "‡•ß": "1",
        "‡•®": "2",
        "‡•©": "3",
        "‡•™": "4",
        "‡•´": "5",
        "‡•¨": "6",
        "‡•≠": "7",
        "‡•Æ": "8",
        "‡•Ø": "9",
        "‡•¶": "0"
      }
    };
    eraValues22 = {
      narrow: ["‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ", "‡§à‡§∏‡•ç‡§µ‡•Ä"],
      abbreviated: ["‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ", "‡§à‡§∏‡•ç‡§µ‡•Ä"],
      wide: ["‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ", "‡§à‡§∏‡§µ‡•Ä ‡§∏‡§®"]
    };
    quarterValues22 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["‡§§‡§ø1", "‡§§‡§ø2", "‡§§‡§ø3", "‡§§‡§ø4"],
      wide: ["‡§™‡§π‡§≤‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä", "‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä", "‡§§‡•Ä‡§∏‡§∞‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä", "‡§ö‡•å‡§•‡•Ä ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä"]
    };
    monthValues22 = {
      narrow: ["‡§ú", "‡§´‡§º", "‡§Æ‡§æ", "‡§Ö", "‡§Æ‡§à", "‡§ú‡•Ç", "‡§ú‡•Å", "‡§Ö‡§ó", "‡§∏‡§ø", "‡§Ö‡§ï‡•ç‡§ü‡•Ç", "‡§®", "‡§¶‡§ø"],
      abbreviated: ["‡§ú‡§®", "‡§´‡§º‡§∞", "‡§Æ‡§æ‡§∞‡•ç‡§ö", "‡§Ö‡§™‡•ç‡§∞‡•à‡§≤", "‡§Æ‡§à", "‡§ú‡•Ç‡§®", "‡§ú‡•Å‡§≤", "‡§Ö‡§ó", "‡§∏‡§ø‡§§", "‡§Ö‡§ï‡•ç‡§ü‡•Ç", "‡§®‡§µ", "‡§¶‡§ø‡§∏"],
      wide: ["‡§ú‡§®‡§µ‡§∞‡•Ä", "‡§´‡§º‡§∞‡§µ‡§∞‡•Ä", "‡§Æ‡§æ‡§∞‡•ç‡§ö", "‡§Ö‡§™‡•ç‡§∞‡•à‡§≤", "‡§Æ‡§à", "‡§ú‡•Ç‡§®", "‡§ú‡•Å‡§≤‡§æ‡§à", "‡§Ö‡§ó‡§∏‡•ç‡§§", "‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞", "‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞", "‡§®‡§µ‡§Ç‡§¨‡§∞", "‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞"]
    };
    dayValues22 = {
      narrow: ["‡§∞", "‡§∏‡•ã", "‡§Æ‡§Ç", "‡§¨‡•Å", "‡§ó‡•Å", "‡§∂‡•Å", "‡§∂"],
      short: ["‡§∞", "‡§∏‡•ã", "‡§Æ‡§Ç", "‡§¨‡•Å", "‡§ó‡•Å", "‡§∂‡•Å", "‡§∂"],
      abbreviated: ["‡§∞‡§µ‡§ø", "‡§∏‡•ã‡§Æ", "‡§Æ‡§Ç‡§ó‡§≤", "‡§¨‡•Å‡§ß", "‡§ó‡•Å‡§∞‡•Å", "‡§∂‡•Å‡§ï‡•ç‡§∞", "‡§∂‡§®‡§ø"],
      wide: ["‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞", "‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞", "‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞", "‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞", "‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞", "‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞", "‡§∂‡§®‡§ø‡§µ‡§æ‡§∞"]
    };
    dayPeriodValues22 = {
      narrow: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      },
      abbreviated: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      },
      wide: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      }
    };
    formattingDayPeriodValues17 = {
      narrow: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      },
      abbreviated: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      },
      wide: {
        am: "‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®",
        pm: "‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®",
        midnight: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø",
        noon: "‡§¶‡•ã‡§™‡§π‡§∞",
        morning: "‡§∏‡•Å‡§¨‡§π",
        afternoon: "‡§¶‡•ã‡§™‡§π‡§∞",
        evening: "‡§∂‡§æ‡§Æ",
        night: "‡§∞‡§æ‡§§"
      }
    };
    ordinalNumber43 = function ordinalNumber44(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return numberToLocale2(number);
    };
    localize22 = {
      ordinalNumber: ordinalNumber43,
      era: buildLocalizeFn({
        values: eraValues22,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues22,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback22(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues22,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues22,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues22,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues17,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default23 = localize22;
  }
});

// node_modules/date-fns/esm/locale/hi/_lib/formatDistance/index.js
var formatDistanceLocale23, formatDistance46, formatDistance_default24;
var init_formatDistance25 = __esm({
  "node_modules/date-fns/esm/locale/hi/_lib/formatDistance/index.js"() {
    init_localize23();
    formatDistanceLocale23 = {
      lessThanXSeconds: {
        one: "‡•ß ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∏‡•á ‡§ï‡§Æ",
        // CLDR #1310
        other: "{{count}} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∏‡•á ‡§ï‡§Æ"
      },
      xSeconds: {
        one: "‡•ß ‡§∏‡•á‡§ï‡§Ç‡§°",
        other: "{{count}} ‡§∏‡•á‡§ï‡§Ç‡§°"
      },
      halfAMinute: "‡§Ü‡§ß‡§æ ‡§Æ‡§ø‡§®‡§ü",
      lessThanXMinutes: {
        one: "‡•ß ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ",
        other: "{{count}} ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ"
      },
      xMinutes: {
        one: "‡•ß ‡§Æ‡§ø‡§®‡§ü",
        // CLDR #1307
        other: "{{count}} ‡§Æ‡§ø‡§®‡§ü"
      },
      aboutXHours: {
        one: "‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§ò‡§Ç‡§ü‡§æ",
        other: "‡§≤‡§ó‡§≠‡§ó {{count}} ‡§ò‡§Ç‡§ü‡•á"
      },
      xHours: {
        one: "‡•ß ‡§ò‡§Ç‡§ü‡§æ",
        // CLDR #1304
        other: "{{count}} ‡§ò‡§Ç‡§ü‡•á"
        // CLDR #4467
      },
      xDays: {
        one: "‡•ß ‡§¶‡§ø‡§®",
        // CLDR #1286
        other: "{{count}} ‡§¶‡§ø‡§®"
      },
      aboutXWeeks: {
        one: "‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§∏‡§™‡•ç‡§§‡§æ‡§π",
        other: "‡§≤‡§ó‡§≠‡§ó {{count}} ‡§∏‡§™‡•ç‡§§‡§æ‡§π"
      },
      xWeeks: {
        one: "‡•ß ‡§∏‡§™‡•ç‡§§‡§æ‡§π",
        other: "{{count}} ‡§∏‡§™‡•ç‡§§‡§æ‡§π"
      },
      aboutXMonths: {
        one: "‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§Æ‡§π‡•Ä‡§®‡§æ",
        other: "‡§≤‡§ó‡§≠‡§ó {{count}} ‡§Æ‡§π‡•Ä‡§®‡•á"
      },
      xMonths: {
        one: "‡•ß ‡§Æ‡§π‡•Ä‡§®‡§æ",
        other: "{{count}} ‡§Æ‡§π‡•Ä‡§®‡•á"
      },
      aboutXYears: {
        one: "‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§µ‡§∞‡•ç‡§∑",
        other: "‡§≤‡§ó‡§≠‡§ó {{count}} ‡§µ‡§∞‡•ç‡§∑"
        // CLDR #4823
      },
      xYears: {
        one: "‡•ß ‡§µ‡§∞‡•ç‡§∑",
        other: "{{count}} ‡§µ‡§∞‡•ç‡§∑"
      },
      overXYears: {
        one: "‡•ß ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï",
        other: "{{count}} ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï"
      },
      almostXYears: {
        one: "‡§≤‡§ó‡§≠‡§ó ‡•ß ‡§µ‡§∞‡•ç‡§∑",
        other: "‡§≤‡§ó‡§≠‡§ó {{count}} ‡§µ‡§∞‡•ç‡§∑"
      }
    };
    formatDistance46 = function formatDistance47(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale23[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", numberToLocale2(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "‡§Æ‡•á ";
        } else {
          return result + " ‡§™‡§π‡§≤‡•á";
        }
      }
      return result;
    };
    formatDistance_default24 = formatDistance46;
  }
});

// node_modules/date-fns/esm/locale/hi/_lib/formatLong/index.js
var dateFormats26, timeFormats26, dateTimeFormats26, formatLong26, formatLong_default26;
var init_formatLong26 = __esm({
  "node_modules/date-fns/esm/locale/hi/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats26 = {
      full: "EEEE, do MMMM, y",
      // CLDR #1787
      long: "do MMMM, y",
      // CLDR #1788
      medium: "d MMM, y",
      // CLDR #1789
      short: "dd/MM/yyyy"
      // CLDR #1790
    };
    timeFormats26 = {
      full: "h:mm:ss a zzzz",
      // CLDR #1791
      long: "h:mm:ss a z",
      // CLDR #1792
      medium: "h:mm:ss a",
      // CLDR #1793
      short: "h:mm a"
      // CLDR #1794
    };
    dateTimeFormats26 = {
      full: "{{date}} '‡§ï‡•ã' {{time}}",
      // CLDR #1795
      long: "{{date}} '‡§ï‡•ã' {{time}}",
      // CLDR #1796
      medium: "{{date}}, {{time}}",
      // CLDR #1797
      short: "{{date}}, {{time}}"
      // CLDR #1798
    };
    formatLong26 = {
      date: buildFormatLongFn({
        formats: dateFormats26,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats26,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats26,
        defaultWidth: "full"
      })
    };
    formatLong_default26 = formatLong26;
  }
});

// node_modules/date-fns/esm/locale/hi/_lib/formatRelative/index.js
var formatRelativeLocale22, formatRelative44, formatRelative_default23;
var init_formatRelative24 = __esm({
  "node_modules/date-fns/esm/locale/hi/_lib/formatRelative/index.js"() {
    formatRelativeLocale22 = {
      lastWeek: "'‡§™‡§ø‡§õ‡§≤‡•á' eeee p",
      yesterday: "'‡§ï‡§≤' p",
      today: "'‡§Ü‡§ú' p",
      tomorrow: "'‡§ï‡§≤' p",
      nextWeek: "eeee '‡§ï‡•ã' p",
      other: "P"
    };
    formatRelative44 = function formatRelative45(token, _date, _baseDate, _options) {
      return formatRelativeLocale22[token];
    };
    formatRelative_default23 = formatRelative44;
  }
});

// node_modules/date-fns/esm/locale/hi/_lib/match/index.js
var matchOrdinalNumberPattern22, parseOrdinalNumberPattern22, matchEraPatterns22, parseEraPatterns22, matchQuarterPatterns22, parseQuarterPatterns22, matchMonthPatterns22, parseMonthPatterns22, matchDayPatterns22, parseDayPatterns22, matchDayPeriodPatterns22, parseDayPeriodPatterns22, match22, match_default23;
var init_match23 = __esm({
  "node_modules/date-fns/esm/locale/hi/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    init_localize23();
    matchOrdinalNumberPattern22 = /^[‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø]+/i;
    parseOrdinalNumberPattern22 = /^[‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø]+/i;
    matchEraPatterns22 = {
      narrow: /^(‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡•ç‡§µ‡•Ä)/i,
      abbreviated: /^(‡§à‡§∏‡§æ\.?\s?‡§™‡•Ç‡§∞‡•ç‡§µ\.?|‡§à‡§∏‡§æ\.?)/i,
      wide: /^(‡§à‡§∏‡§æ-‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡§µ‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§µ|‡§à‡§∏‡§µ‡•Ä ‡§∏‡§®|‡§à‡§∏‡§µ‡•Ä)/i
    };
    parseEraPatterns22 = {
      any: [/^b/i, /^(a|c)/i]
    };
    matchQuarterPatterns22 = {
      narrow: /^[1234]/i,
      abbreviated: /^‡§§‡§ø[1234]/i,
      wide: /^[1234](‡§™‡§π‡§≤‡•Ä|‡§¶‡•Ç‡§∏‡§∞‡•Ä|‡§§‡•Ä‡§∏‡§∞‡•Ä|‡§ö‡•å‡§•‡•Ä)? ‡§§‡§ø‡§Æ‡§æ‡§π‡•Ä/i
    };
    parseQuarterPatterns22 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns22 = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[‡§ú‡§´‡§º‡§Æ‡§æ‡§Ö‡§™‡•ç‡§Æ‡§à‡§ú‡•Ç‡§®‡§ú‡•Å‡§Ö‡§ó‡§∏‡§ø‡§Ö‡§ï‡•ç‡§§‡§®‡§¶‡§ø]/i,
      abbreviated: /^(‡§ú‡§®|‡§´‡§º‡§∞|‡§Æ‡§æ‡§∞‡•ç‡§ö|‡§Ö‡§™‡•ç|‡§Æ‡§à|‡§ú‡•Ç‡§®|‡§ú‡•Å‡§≤|‡§Ö‡§ó|‡§∏‡§ø‡§§|‡§Ö‡§ï‡•ç‡§§‡•Ç|‡§®‡§µ|‡§¶‡§ø‡§∏)/i,
      wide: /^(‡§ú‡§®‡§µ‡§∞‡•Ä|‡§´‡§º‡§∞‡§µ‡§∞‡•Ä|‡§Æ‡§æ‡§∞‡•ç‡§ö|‡§Ö‡§™‡•ç‡§∞‡•à‡§≤|‡§Æ‡§à|‡§ú‡•Ç‡§®|‡§ú‡•Å‡§≤‡§æ‡§à|‡§Ö‡§ó‡§∏‡•ç‡§§|‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞|‡§Ö‡§ï‡•ç‡§§‡•Ç‡§¨‡§∞|‡§®‡§µ‡§Ç‡§¨‡§∞|‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞)/i
    };
    parseMonthPatterns22 = {
      narrow: [/^‡§ú/i, /^‡§´‡§º/i, /^‡§Æ‡§æ/i, /^‡§Ö‡§™‡•ç/i, /^‡§Æ‡§à/i, /^‡§ú‡•Ç/i, /^‡§ú‡•Å/i, /^‡§Ö‡§ó/i, /^‡§∏‡§ø/i, /^‡§Ö‡§ï‡•ç‡§§‡•Ç/i, /^‡§®/i, /^‡§¶‡§ø/i],
      any: [/^‡§ú‡§®/i, /^‡§´‡§º/i, /^‡§Æ‡§æ/i, /^‡§Ö‡§™‡•ç/i, /^‡§Æ‡§à/i, /^‡§ú‡•Ç/i, /^‡§ú‡•Å/i, /^‡§Ö‡§ó/i, /^‡§∏‡§ø/i, /^‡§Ö‡§ï‡•ç‡§§‡•Ç/i, /^‡§®‡§µ/i, /^‡§¶‡§ø‡§∏/i]
    };
    matchDayPatterns22 = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[‡§∞‡§µ‡§ø‡§∏‡•ã‡§Æ‡§Æ‡§Ç‡§ó‡§≤‡§¨‡•Å‡§ß‡§ó‡•Å‡§∞‡•Å‡§∂‡•Å‡§ï‡•ç‡§∞‡§∂‡§®‡§ø]/i,
      short: /^(‡§∞‡§µ‡§ø|‡§∏‡•ã‡§Æ|‡§Æ‡§Ç‡§ó‡§≤|‡§¨‡•Å‡§ß|‡§ó‡•Å‡§∞‡•Å|‡§∂‡•Å‡§ï‡•ç‡§∞|‡§∂‡§®‡§ø)/i,
      abbreviated: /^(‡§∞‡§µ‡§ø|‡§∏‡•ã‡§Æ|‡§Æ‡§Ç‡§ó‡§≤|‡§¨‡•Å‡§ß|‡§ó‡•Å‡§∞‡•Å|‡§∂‡•Å‡§ï‡•ç‡§∞|‡§∂‡§®‡§ø)/i,
      wide: /^(‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞|‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞|‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞|‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞|‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞|‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞|‡§∂‡§®‡§ø‡§µ‡§æ‡§∞)/i
    };
    parseDayPatterns22 = {
      narrow: [/^‡§∞‡§µ‡§ø/i, /^‡§∏‡•ã‡§Æ/i, /^‡§Æ‡§Ç‡§ó‡§≤/i, /^‡§¨‡•Å‡§ß/i, /^‡§ó‡•Å‡§∞‡•Å/i, /^‡§∂‡•Å‡§ï‡•ç‡§∞/i, /^‡§∂‡§®‡§ø/i],
      any: [/^‡§∞‡§µ‡§ø/i, /^‡§∏‡•ã‡§Æ/i, /^‡§Æ‡§Ç‡§ó‡§≤/i, /^‡§¨‡•Å‡§ß/i, /^‡§ó‡•Å‡§∞‡•Å/i, /^‡§∂‡•Å‡§ï‡•ç‡§∞/i, /^‡§∂‡§®‡§ø/i]
    };
    matchDayPeriodPatterns22 = {
      narrow: /^(‡§™‡•Ç|‡§Ö|‡§Æ|‡§¶.\?|‡§∏‡•Å|‡§¶‡•ã|‡§∂‡§æ|‡§∞‡§æ)/i,
      any: /^(‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®|‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®|‡§Æ|‡§¶.\?|‡§∏‡•Å|‡§¶‡•ã|‡§∂‡§æ|‡§∞‡§æ)/i
    };
    parseDayPeriodPatterns22 = {
      any: {
        am: /^‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§π‡•ç‡§®/i,
        pm: /^‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§®/i,
        midnight: /^‡§Æ‡§ß‡•ç‡§Ø/i,
        noon: /^‡§¶‡•ã/i,
        morning: /‡§∏‡•Å/i,
        afternoon: /‡§¶‡•ã/i,
        evening: /‡§∂‡§æ/i,
        night: /‡§∞‡§æ/i
      }
    };
    match22 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern22,
        parsePattern: parseOrdinalNumberPattern22,
        valueCallback: localeToNumber
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns22,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns22,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns22,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns22,
        defaultParseWidth: "any",
        valueCallback: function valueCallback43(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns22,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns22,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns22,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns22,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns22,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns22,
        defaultParseWidth: "any"
      })
    };
    match_default23 = match22;
  }
});

// node_modules/date-fns/esm/locale/hi/index.js
var hi_exports = {};
__export(hi_exports, {
  default: () => hi_default
});
var locale26, hi_default;
var init_hi = __esm({
  "node_modules/date-fns/esm/locale/hi/index.js"() {
    init_formatDistance25();
    init_formatLong26();
    init_formatRelative24();
    init_localize23();
    init_match23();
    locale26 = {
      code: "hi",
      formatDistance: formatDistance_default24,
      formatLong: formatLong_default26,
      formatRelative: formatRelative_default23,
      localize: localize_default23,
      match: match_default23,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 4
      }
    };
    hi_default = locale26;
  }
});

// node_modules/date-fns/esm/locale/hr/_lib/formatDistance/index.js
var formatDistanceLocale24, formatDistance48, formatDistance_default25;
var init_formatDistance26 = __esm({
  "node_modules/date-fns/esm/locale/hr/_lib/formatDistance/index.js"() {
    formatDistanceLocale24 = {
      lessThanXSeconds: {
        one: {
          standalone: "manje od 1 sekunde",
          withPrepositionAgo: "manje od 1 sekunde",
          withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
      },
      xSeconds: {
        one: {
          standalone: "1 sekunda",
          withPrepositionAgo: "1 sekunde",
          withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
      },
      halfAMinute: "pola minute",
      lessThanXMinutes: {
        one: {
          standalone: "manje od 1 minute",
          withPrepositionAgo: "manje od 1 minute",
          withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
      },
      xMinutes: {
        one: {
          standalone: "1 minuta",
          withPrepositionAgo: "1 minute",
          withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: {
          standalone: "oko 1 sat",
          withPrepositionAgo: "oko 1 sat",
          withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
      },
      xHours: {
        one: {
          standalone: "1 sat",
          withPrepositionAgo: "1 sat",
          withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
      },
      xDays: {
        one: {
          standalone: "1 dan",
          withPrepositionAgo: "1 dan",
          withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
      },
      aboutXWeeks: {
        one: {
          standalone: "oko 1 tjedan",
          withPrepositionAgo: "oko 1 tjedan",
          withPrepositionIn: "oko 1 tjedan"
        },
        dual: "oko {{count}} tjedna",
        other: "oko {{count}} tjedana"
      },
      xWeeks: {
        one: {
          standalone: "1 tjedan",
          withPrepositionAgo: "1 tjedan",
          withPrepositionIn: "1 tjedan"
        },
        dual: "{{count}} tjedna",
        other: "{{count}} tjedana"
      },
      aboutXMonths: {
        one: {
          standalone: "oko 1 mjesec",
          withPrepositionAgo: "oko 1 mjesec",
          withPrepositionIn: "oko 1 mjesec"
        },
        dual: "oko {{count}} mjeseca",
        other: "oko {{count}} mjeseci"
      },
      xMonths: {
        one: {
          standalone: "1 mjesec",
          withPrepositionAgo: "1 mjesec",
          withPrepositionIn: "1 mjesec"
        },
        dual: "{{count}} mjeseca",
        other: "{{count}} mjeseci"
      },
      aboutXYears: {
        one: {
          standalone: "oko 1 godinu",
          withPrepositionAgo: "oko 1 godinu",
          withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
      },
      xYears: {
        one: {
          standalone: "1 godina",
          withPrepositionAgo: "1 godine",
          withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
      },
      overXYears: {
        one: {
          standalone: "preko 1 godinu",
          withPrepositionAgo: "preko 1 godinu",
          withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
      },
      almostXYears: {
        one: {
          standalone: "gotovo 1 godinu",
          withPrepositionAgo: "gotovo 1 godinu",
          withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
      }
    };
    formatDistance48 = function formatDistance49(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale24[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "za " + result;
        } else {
          return "prije " + result;
        }
      }
      return result;
    };
    formatDistance_default25 = formatDistance48;
  }
});

// node_modules/date-fns/esm/locale/hr/_lib/formatLong/index.js
var dateFormats27, timeFormats27, dateTimeFormats27, formatLong27, formatLong_default27;
var init_formatLong27 = __esm({
  "node_modules/date-fns/esm/locale/hr/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats27 = {
      full: "EEEE, d. MMMM y.",
      long: "d. MMMM y.",
      medium: "d. MMM y.",
      short: "dd. MM. y."
    };
    timeFormats27 = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats27 = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong27 = {
      date: buildFormatLongFn({
        formats: dateFormats27,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats27,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats27,
        defaultWidth: "full"
      })
    };
    formatLong_default27 = formatLong27;
  }
});

// node_modules/date-fns/esm/locale/hr/_lib/formatRelative/index.js
var formatRelativeLocale23, formatRelative46, formatRelative_default24;
var init_formatRelative25 = __esm({
  "node_modules/date-fns/esm/locale/hr/_lib/formatRelative/index.js"() {
    formatRelativeLocale23 = {
      lastWeek: function lastWeek4(date) {
        switch (date.getUTCDay()) {
          case 0:
            return "'pro≈°lu nedjelju u' p";
          case 3:
            return "'pro≈°lu srijedu u' p";
          case 6:
            return "'pro≈°lu subotu u' p";
          default:
            return "'pro≈°li' EEEE 'u' p";
        }
      },
      yesterday: "'juƒçer u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: function nextWeek4(date) {
        switch (date.getUTCDay()) {
          case 0:
            return "'iduƒáu nedjelju u' p";
          case 3:
            return "'iduƒáu srijedu u' p";
          case 6:
            return "'iduƒáu subotu u' p";
          default:
            return "'pro≈°li' EEEE 'u' p";
        }
      },
      other: "P"
    };
    formatRelative46 = function formatRelative47(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale23[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default24 = formatRelative46;
  }
});

// node_modules/date-fns/esm/locale/hr/_lib/localize/index.js
var eraValues23, quarterValues23, monthValues23, formattingMonthValues6, dayValues23, formattingDayPeriodValues18, dayPeriodValues23, ordinalNumber45, localize23, localize_default24;
var init_localize24 = __esm({
  "node_modules/date-fns/esm/locale/hr/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues23 = {
      narrow: ["pr.n.e.", "AD"],
      abbreviated: ["pr. Kr.", "po. Kr."],
      wide: ["Prije Krista", "Poslije Krista"]
    };
    quarterValues23 = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues23 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["sij", "velj", "o≈æu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"],
      wide: ["sijeƒçanj", "veljaƒça", "o≈æujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac"]
    };
    formattingMonthValues6 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["sij", "velj", "o≈æu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"],
      wide: ["sijeƒçnja", "veljaƒçe", "o≈æujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca"]
    };
    dayValues23 = {
      narrow: ["N", "P", "U", "S", "ƒå", "P", "S"],
      short: ["ned", "pon", "uto", "sri", "ƒçet", "pet", "sub"],
      abbreviated: ["ned", "pon", "uto", "sri", "ƒçet", "pet", "sub"],
      wide: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "ƒçetvrtak", "petak", "subota"]
    };
    formattingDayPeriodValues18 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "naveƒçer",
        night: "noƒáu"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "naveƒçer",
        night: "noƒáu"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "naveƒçer",
        night: "noƒáu"
      }
    };
    dayPeriodValues23 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "naveƒçer",
        night: "noƒáu"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "naveƒçer",
        night: "noƒáu"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "naveƒçer",
        night: "noƒáu"
      }
    };
    ordinalNumber45 = function ordinalNumber46(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize23 = {
      ordinalNumber: ordinalNumber45,
      era: buildLocalizeFn({
        values: eraValues23,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues23,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback23(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues23,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues6,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues23,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues23,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues18,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default24 = localize23;
  }
});

// node_modules/date-fns/esm/locale/hr/_lib/match/index.js
var matchOrdinalNumberPattern23, parseOrdinalNumberPattern23, matchEraPatterns23, parseEraPatterns23, matchQuarterPatterns23, parseQuarterPatterns23, matchMonthPatterns23, parseMonthPatterns23, matchDayPatterns23, parseDayPatterns23, matchDayPeriodPatterns23, parseDayPeriodPatterns23, match23, match_default24;
var init_match24 = __esm({
  "node_modules/date-fns/esm/locale/hr/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern23 = /^(\d+)\./i;
    parseOrdinalNumberPattern23 = /\d+/i;
    matchEraPatterns23 = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
      wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
    };
    parseEraPatterns23 = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    matchQuarterPatterns23 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    parseQuarterPatterns23 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns23 = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(sij|velj|(o≈æu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
      wide: /^((sijeƒçanj|sijeƒçnja|sijecanj|sijecnja)|(veljaƒça|veljaƒçe|veljaca|veljace)|(o≈æujak|o≈æujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
    };
    parseMonthPatterns23 = {
      narrow: [/1/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i, /8/i, /9/i, /10/i, /11/i, /12/i],
      abbreviated: [/^sij/i, /^velj/i, /^(o≈æu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i],
      wide: [/^sij/i, /^velj/i, /^(o≈æu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i]
    };
    matchDayPatterns23 = {
      narrow: /^[npusƒçc]/i,
      short: /^(ned|pon|uto|sri|(ƒçet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sri|(ƒçet|cet)|pet|sub)/i,
      wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(ƒçetvrtak|cetvrtak)|petak|subota)/i
    };
    parseDayPatterns23 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    matchDayPeriodPatterns23 = {
      any: /^(am|pm|ponoc|ponoƒá|(po)?podne|navecer|naveƒçer|noƒáu|poslije podne|ujutro)/i
    };
    parseDayPeriodPatterns23 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(navece|naveƒçe)/i,
        night: /(nocu|noƒáu)/i
      }
    };
    match23 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern23,
        parsePattern: parseOrdinalNumberPattern23,
        valueCallback: function valueCallback44(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns23,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns23,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns23,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns23,
        defaultParseWidth: "any",
        valueCallback: function valueCallback45(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns23,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns23,
        defaultParseWidth: "wide"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns23,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns23,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns23,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns23,
        defaultParseWidth: "any"
      })
    };
    match_default24 = match23;
  }
});

// node_modules/date-fns/esm/locale/hr/index.js
var hr_exports = {};
__export(hr_exports, {
  default: () => hr_default
});
var locale27, hr_default;
var init_hr = __esm({
  "node_modules/date-fns/esm/locale/hr/index.js"() {
    init_formatDistance26();
    init_formatLong27();
    init_formatRelative25();
    init_localize24();
    init_match24();
    locale27 = {
      code: "hr",
      formatDistance: formatDistance_default25,
      formatLong: formatLong_default27,
      formatRelative: formatRelative_default24,
      localize: localize_default24,
      match: match_default24,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    hr_default = locale27;
  }
});

// node_modules/date-fns/esm/locale/hu/_lib/formatDistance/index.js
var translations, withoutSuffixes, withSuffixes, formatDistance50, formatDistance_default26;
var init_formatDistance27 = __esm({
  "node_modules/date-fns/esm/locale/hu/_lib/formatDistance/index.js"() {
    translations = {
      about: "k√∂r√ºlbel√ºl",
      over: "t√∂bb mint",
      almost: "majdnem",
      lessthan: "kevesebb mint"
    };
    withoutSuffixes = {
      xseconds: " m√°sodperc",
      halfaminute: "f√©l perc",
      xminutes: " perc",
      xhours: " √≥ra",
      xdays: " nap",
      xweeks: " h√©t",
      xmonths: " h√≥nap",
      xyears: " √©v"
    };
    withSuffixes = {
      xseconds: {
        "-1": " m√°sodperccel ezel≈ëtt",
        "1": " m√°sodperc m√∫lva",
        "0": " m√°sodperce"
      },
      halfaminute: {
        "-1": "f√©l perccel ezel≈ëtt",
        "1": "f√©l perc m√∫lva",
        "0": "f√©l perce"
      },
      xminutes: {
        "-1": " perccel ezel≈ëtt",
        "1": " perc m√∫lva",
        "0": " perce"
      },
      xhours: {
        "-1": " √≥r√°val ezel≈ëtt",
        "1": " √≥ra m√∫lva",
        "0": " √≥r√°ja"
      },
      xdays: {
        "-1": " nappal ezel≈ëtt",
        "1": " nap m√∫lva",
        "0": " napja"
      },
      xweeks: {
        "-1": " h√©ttel ezel≈ëtt",
        "1": " h√©t m√∫lva",
        "0": " hete"
      },
      xmonths: {
        "-1": " h√≥nappal ezel≈ëtt",
        "1": " h√≥nap m√∫lva",
        "0": " h√≥napja"
      },
      xyears: {
        "-1": " √©vvel ezel≈ëtt",
        "1": " √©v m√∫lva",
        "0": " √©ve"
      }
    };
    formatDistance50 = function formatDistance51(token, count, options) {
      var adverb = token.match(/about|over|almost|lessthan/i);
      var unit = adverb ? token.replace(adverb[0], "") : token;
      var addSuffix = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
      var key = unit.toLowerCase();
      var comparison = (options === null || options === void 0 ? void 0 : options.comparison) || 0;
      var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
      var result = key === "halfaminute" ? translated : count + translated;
      if (adverb) {
        var adv = adverb[0].toLowerCase();
        result = translations[adv] + " " + result;
      }
      return result;
    };
    formatDistance_default26 = formatDistance50;
  }
});

// node_modules/date-fns/esm/locale/hu/_lib/formatLong/index.js
var dateFormats28, timeFormats28, dateTimeFormats28, formatLong28, formatLong_default28;
var init_formatLong28 = __esm({
  "node_modules/date-fns/esm/locale/hu/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats28 = {
      full: "y. MMMM d., EEEE",
      long: "y. MMMM d.",
      medium: "y. MMM d.",
      short: "y. MM. dd."
    };
    timeFormats28 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats28 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong28 = {
      date: buildFormatLongFn({
        formats: dateFormats28,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats28,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats28,
        defaultWidth: "full"
      })
    };
    formatLong_default28 = formatLong28;
  }
});

// node_modules/date-fns/esm/locale/hu/_lib/formatRelative/index.js
function week(isFuture2) {
  return function(date) {
    var weekday = accusativeWeekdays3[date.getUTCDay()];
    var prefix = isFuture2 ? "" : "'m√∫lt' ";
    return "".concat(prefix, "'").concat(weekday, "' p'-kor'");
  };
}
var accusativeWeekdays3, formatRelativeLocale24, formatRelative48, formatRelative_default25;
var init_formatRelative26 = __esm({
  "node_modules/date-fns/esm/locale/hu/_lib/formatRelative/index.js"() {
    accusativeWeekdays3 = ["vas√°rnap", "h√©tf≈ën", "kedden", "szerd√°n", "cs√ºt√∂rt√∂k√∂n", "p√©nteken", "szombaton"];
    formatRelativeLocale24 = {
      lastWeek: week(false),
      yesterday: "'tegnap' p'-kor'",
      today: "'ma' p'-kor'",
      tomorrow: "'holnap' p'-kor'",
      nextWeek: week(true),
      other: "P"
    };
    formatRelative48 = function formatRelative49(token, date) {
      var format2 = formatRelativeLocale24[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default25 = formatRelative48;
  }
});

// node_modules/date-fns/esm/locale/hu/_lib/localize/index.js
var eraValues24, quarterValues24, formattingQuarterValues, monthValues24, dayValues24, dayPeriodValues24, ordinalNumber47, localize24, localize_default25;
var init_localize25 = __esm({
  "node_modules/date-fns/esm/locale/hu/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues24 = {
      narrow: ["ie.", "isz."],
      abbreviated: ["i. e.", "i. sz."],
      wide: ["Krisztus el≈ëtt", "id≈ësz√°m√≠t√°sunk szerint"]
    };
    quarterValues24 = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. n.√©v", "2. n.√©v", "3. n.√©v", "4. n.√©v"],
      wide: ["1. negyed√©v", "2. negyed√©v", "3. negyed√©v", "4. negyed√©v"]
    };
    formattingQuarterValues = {
      narrow: ["I.", "II.", "III.", "IV."],
      abbreviated: ["I. n.√©v", "II. n.√©v", "III. n.√©v", "IV. n.√©v"],
      wide: ["I. negyed√©v", "II. negyed√©v", "III. negyed√©v", "IV. negyed√©v"]
    };
    monthValues24 = {
      narrow: ["J", "F", "M", "√Å", "M", "J", "J", "A", "Sz", "O", "N", "D"],
      abbreviated: ["jan.", "febr.", "m√°rc.", "√°pr.", "m√°j.", "j√∫n.", "j√∫l.", "aug.", "szept.", "okt.", "nov.", "dec."],
      wide: ["janu√°r", "febru√°r", "m√°rcius", "√°prilis", "m√°jus", "j√∫nius", "j√∫lius", "augusztus", "szeptember", "okt√≥ber", "november", "december"]
    };
    dayValues24 = {
      narrow: ["V", "H", "K", "Sz", "Cs", "P", "Sz"],
      short: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
      abbreviated: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
      wide: ["vas√°rnap", "h√©tf≈ë", "kedd", "szerda", "cs√ºt√∂rt√∂k", "p√©ntek", "szombat"]
    };
    dayPeriodValues24 = {
      narrow: {
        am: "de.",
        pm: "du.",
        midnight: "√©jf√©l",
        noon: "d√©l",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "√©jjel"
      },
      abbreviated: {
        am: "de.",
        pm: "du.",
        midnight: "√©jf√©l",
        noon: "d√©l",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "√©jjel"
      },
      wide: {
        am: "de.",
        pm: "du.",
        midnight: "√©jf√©l",
        noon: "d√©l",
        morning: "reggel",
        afternoon: "d√©lut√°n",
        evening: "este",
        night: "√©jjel"
      }
    };
    ordinalNumber47 = function ordinalNumber48(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize24 = {
      ordinalNumber: ordinalNumber47,
      era: buildLocalizeFn({
        values: eraValues24,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues24,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback24(quarter) {
          return quarter - 1;
        },
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide"
      }),
      month: buildLocalizeFn({
        values: monthValues24,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues24,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues24,
        defaultWidth: "wide"
      })
    };
    localize_default25 = localize24;
  }
});

// node_modules/date-fns/esm/locale/hu/_lib/match/index.js
var matchOrdinalNumberPattern24, parseOrdinalNumberPattern24, matchEraPatterns24, parseEraPatterns24, matchQuarterPatterns24, parseQuarterPatterns24, matchMonthPatterns24, parseMonthPatterns24, matchDayPatterns24, parseDayPatterns24, matchDayPeriodPatterns24, parseDayPeriodPatterns24, match24, match_default25;
var init_match25 = __esm({
  "node_modules/date-fns/esm/locale/hu/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern24 = /^(\d+)\.?/i;
    parseOrdinalNumberPattern24 = /\d+/i;
    matchEraPatterns24 = {
      narrow: /^(ie\.|isz\.)/i,
      abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
      wide: /^(Krisztus el≈ëtt|id≈ësz√°m√≠t√°sunk el≈ëtt|id≈ësz√°m√≠t√°sunk szerint|i\. sz\.)/i
    };
    parseEraPatterns24 = {
      narrow: [/ie/i, /isz/i],
      abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
      any: [/el≈ëtt/i, /(szerint|i. sz.)/i]
    };
    matchQuarterPatterns24 = {
      narrow: /^[1234]\.?/i,
      abbreviated: /^[1234]?\.?\s?n\.√©v/i,
      wide: /^([1234]|I|II|III|IV)?\.?\s?negyed√©v/i
    };
    parseQuarterPatterns24 = {
      any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
    };
    matchMonthPatterns24 = {
      narrow: /^[jfma√°sond]|sz/i,
      abbreviated: /^(jan\.?|febr\.?|m√°rc\.?|√°pr\.?|m√°j\.?|j√∫n\.?|j√∫l\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
      wide: /^(janu√°r|febru√°r|m√°rcius|√°prilis|m√°jus|j√∫nius|j√∫lius|augusztus|szeptember|okt√≥ber|november|december)/i
    };
    parseMonthPatterns24 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a|√°/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^m√°r/i, /^√°p/i, /^m√°j/i, /^j√∫n/i, /^j√∫l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns24 = {
      narrow: /^([vhkpc]|sz|cs|sz)/i,
      short: /^([vhkp]|sze|cs|szo)/i,
      abbreviated: /^([vhkp]|sze|cs|szo)/i,
      wide: /^(vas√°rnap|h√©tf≈ë|kedd|szerda|cs√ºt√∂rt√∂k|p√©ntek|szombat)/i
    };
    parseDayPatterns24 = {
      narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
      any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
    };
    matchDayPeriodPatterns24 = {
      any: /^((de|du)\.?|√©jf√©l|d√©lut√°n|d√©l|reggel|este|√©jjel)/i
    };
    parseDayPeriodPatterns24 = {
      any: {
        am: /^de\.?/i,
        pm: /^du\.?/i,
        midnight: /^√©jf/i,
        noon: /^d√©/i,
        morning: /reg/i,
        afternoon: /^d√©lu\.?/i,
        evening: /es/i,
        night: /√©jj/i
      }
    };
    match24 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern24,
        parsePattern: parseOrdinalNumberPattern24,
        valueCallback: function valueCallback46(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns24,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns24,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns24,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns24,
        defaultParseWidth: "any",
        valueCallback: function valueCallback47(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns24,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns24,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns24,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns24,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns24,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns24,
        defaultParseWidth: "any"
      })
    };
    match_default25 = match24;
  }
});

// node_modules/date-fns/esm/locale/hu/index.js
var hu_exports = {};
__export(hu_exports, {
  default: () => hu_default
});
var locale28, hu_default;
var init_hu = __esm({
  "node_modules/date-fns/esm/locale/hu/index.js"() {
    init_formatDistance27();
    init_formatLong28();
    init_formatRelative26();
    init_localize25();
    init_match25();
    locale28 = {
      code: "hu",
      formatDistance: formatDistance_default26,
      formatLong: formatLong_default28,
      formatRelative: formatRelative_default25,
      localize: localize_default25,
      match: match_default25,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    hu_default = locale28;
  }
});

// node_modules/date-fns/esm/locale/hy/_lib/formatDistance/index.js
var formatDistanceLocale25, formatDistance52, formatDistance_default27;
var init_formatDistance28 = __esm({
  "node_modules/date-fns/esm/locale/hy/_lib/formatDistance/index.js"() {
    formatDistanceLocale25 = {
      lessThanXSeconds: {
        one: "’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ 1 ’æ’°’µ÷Ä’Ø’µ’°’∂",
        other: "’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ {{count}} ’æ’°’µ÷Ä’Ø’µ’°’∂"
      },
      xSeconds: {
        one: "1 ’æ’°’µ÷Ä’Ø’µ’°’∂",
        other: "{{count}} ’æ’°’µ÷Ä’Ø’µ’°’∂"
      },
      halfAMinute: "’Ø’•’Ω ÷Ä’∏’∫’•",
      lessThanXMinutes: {
        one: "’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ 1 ÷Ä’∏’∫’•",
        other: "’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’∂ {{count}} ÷Ä’∏’∫’•"
      },
      xMinutes: {
        one: "1 ÷Ä’∏’∫’•",
        other: "{{count}} ÷Ä’∏’∫’•"
      },
      aboutXHours: {
        one: "’¥’∏’ø 1 ’™’°’¥",
        other: "’¥’∏’ø {{count}} ’™’°’¥"
      },
      xHours: {
        one: "1 ’™’°’¥",
        other: "{{count}} ’™’°’¥"
      },
      xDays: {
        one: "1 ÷Ö÷Ä",
        other: "{{count}} ÷Ö÷Ä"
      },
      aboutXWeeks: {
        one: "’¥’∏’ø 1 ’∑’°’¢’°’©",
        other: "’¥’∏’ø {{count}} ’∑’°’¢’°’©"
      },
      xWeeks: {
        one: "1 ’∑’°’¢’°’©",
        other: "{{count}} ’∑’°’¢’°’©"
      },
      aboutXMonths: {
        one: "’¥’∏’ø 1 ’°’¥’´’Ω",
        other: "’¥’∏’ø {{count}} ’°’¥’´’Ω"
      },
      xMonths: {
        one: "1 ’°’¥’´’Ω",
        other: "{{count}} ’°’¥’´’Ω"
      },
      aboutXYears: {
        one: "’¥’∏’ø 1 ’ø’°÷Ä’´",
        other: "’¥’∏’ø {{count}} ’ø’°÷Ä’´"
      },
      xYears: {
        one: "1 ’ø’°÷Ä’´",
        other: "{{count}} ’ø’°÷Ä’´"
      },
      overXYears: {
        one: "’°’æ’•’¨’´ ÷Ñ’°’∂ 1 ’ø’°÷Ä’´",
        other: "’°’æ’•’¨’´ ÷Ñ’°’∂ {{count}} ’ø’°÷Ä’´"
      },
      almostXYears: {
        one: "’∞’°’¥’°÷Ä’µ’° 1 ’ø’°÷Ä’´",
        other: "’∞’°’¥’°÷Ä’µ’° {{count}} ’ø’°÷Ä’´"
      }
    };
    formatDistance52 = function formatDistance53(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale25[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " ’∞’•’ø’∏";
        } else {
          return result + " ’°’º’°’ª";
        }
      }
      return result;
    };
    formatDistance_default27 = formatDistance52;
  }
});

// node_modules/date-fns/esm/locale/hy/_lib/formatLong/index.js
var dateFormats29, timeFormats29, dateTimeFormats29, formatLong29, formatLong_default29;
var init_formatLong29 = __esm({
  "node_modules/date-fns/esm/locale/hy/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats29 = {
      full: "d MMMM, y, EEEE",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "dd.MM.yyyy"
    };
    timeFormats29 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats29 = {
      full: "{{date}} '’™‚Ä§'{{time}}",
      long: "{{date}} '’™‚Ä§'{{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong29 = {
      date: buildFormatLongFn({
        formats: dateFormats29,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats29,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats29,
        defaultWidth: "full"
      })
    };
    formatLong_default29 = formatLong29;
  }
});

// node_modules/date-fns/esm/locale/hy/_lib/formatRelative/index.js
var formatRelativeLocale25, formatRelative50, formatRelative_default26;
var init_formatRelative27 = __esm({
  "node_modules/date-fns/esm/locale/hy/_lib/formatRelative/index.js"() {
    formatRelativeLocale25 = {
      lastWeek: "'’∂’°’≠’∏÷Ä’§' eeee p'÷ä’´’∂'",
      yesterday: "'’•÷Ä’•’Ø' p'÷ä’´’∂'",
      today: "'’°’µ’Ω÷Ö÷Ä' p'÷ä’´’∂'",
      tomorrow: "'’æ’°’≤’®' p'÷ä’´’∂'",
      nextWeek: "'’∞’°’ª’∏÷Ä’§' eeee p'÷ä’´’∂'",
      other: "P"
    };
    formatRelative50 = function formatRelative51(token, _date, _baseDate, _options) {
      return formatRelativeLocale25[token];
    };
    formatRelative_default26 = formatRelative50;
  }
});

// node_modules/date-fns/esm/locale/hy/_lib/localize/index.js
var eraValues25, quarterValues25, monthValues25, dayValues25, dayPeriodValues25, formattingDayPeriodValues19, ordinalNumber49, localize25, localize_default26;
var init_localize26 = __esm({
  "node_modules/date-fns/esm/locale/hy/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues25 = {
      narrow: ["’î", "’Ñ"],
      abbreviated: ["’î‘±", "’Ñ‘π"],
      wide: ["’î÷Ä’´’Ω’ø’∏’Ω’´÷Å ’°’º’°’ª", "’Ñ’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’°’∂"]
    };
    quarterValues25 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["’î1", "’î2", "’î3", "’î4"],
      wide: ["1÷ä’´’∂ ÷Ñ’°’º’∏÷Ä’§", "2÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§", "3÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§", "4÷ä÷Ä’§ ÷Ñ’°’º’∏÷Ä’§"]
    };
    monthValues25 = {
      narrow: ["’Ä", "’ì", "’Ñ", "‘±", "’Ñ", "’Ä", "’Ä", "’ï", "’ç", "’Ä", "’Ü", "‘¥"],
      abbreviated: ["’∞’∏÷Ç’∂", "÷É’•’ø", "’¥’°÷Ä", "’°’∫÷Ä", "’¥’°’µ", "’∞’∏÷Ç’∂", "’∞’∏÷Ç’¨", "÷Ö’£’Ω", "’Ω’•’∫", "’∞’∏’Ø", "’∂’∏’µ", "’§’•’Ø"],
      wide: ["’∞’∏÷Ç’∂’æ’°÷Ä", "÷É’•’ø÷Ä’æ’°÷Ä", "’¥’°÷Ä’ø", "’°’∫÷Ä’´’¨", "’¥’°’µ’´’Ω", "’∞’∏÷Ç’∂’´’Ω", "’∞’∏÷Ç’¨’´’Ω", "÷Ö’£’∏’Ω’ø’∏’Ω", "’Ω’•’∫’ø’•’¥’¢’•÷Ä", "’∞’∏’Ø’ø’•’¥’¢’•÷Ä", "’∂’∏’µ’•’¥’¢’•÷Ä", "’§’•’Ø’ø’•’¥’¢’•÷Ä"]
    };
    dayValues25 = {
      narrow: ["‘ø", "‘µ", "‘µ", "’â", "’Ä", "’à", "’á"],
      short: ["’Ø÷Ä", "’•÷Ä", "’•÷Ñ", "’π÷Ñ", "’∞’£", "’∏÷Ç÷Ä", "’∑’¢"],
      abbreviated: ["’Ø’´÷Ä", "’•÷Ä’Ø", "’•÷Ä÷Ñ", "’π’∏÷Ä", "’∞’∂’£", "’∏÷Ç÷Ä’¢", "’∑’°’¢"],
      wide: ["’Ø’´÷Ä’°’Ø’´", "’•÷Ä’Ø’∏÷Ç’∑’°’¢’©’´", "’•÷Ä’•÷Ñ’∑’°’¢’©’´", "’π’∏÷Ä’•÷Ñ’∑’°’¢’©’´", "’∞’´’∂’£’∑’°’¢’©’´", "’∏÷Ç÷Ä’¢’°’©", "’∑’°’¢’°’©"]
    };
    dayPeriodValues25 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "’Ø’•’Ω’£’∑",
        noon: "’Ø’•’Ω÷Ö÷Ä",
        morning: "’°’º’°’æ’∏’ø",
        afternoon: "÷Å’•÷Ä’•’Ø",
        evening: "’•÷Ä’•’Ø’∏",
        night: "’£’´’∑’•÷Ä"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "’Ø’•’Ω’£’´’∑’•÷Ä",
        noon: "’Ø’•’Ω÷Ö÷Ä",
        morning: "’°’º’°’æ’∏’ø",
        afternoon: "÷Å’•÷Ä’•’Ø",
        evening: "’•÷Ä’•’Ø’∏",
        night: "’£’´’∑’•÷Ä"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "’Ø’•’Ω’£’´’∑’•÷Ä",
        noon: "’Ø’•’Ω÷Ö÷Ä",
        morning: "’°’º’°’æ’∏’ø",
        afternoon: "÷Å’•÷Ä’•’Ø",
        evening: "’•÷Ä’•’Ø’∏",
        night: "’£’´’∑’•÷Ä"
      }
    };
    formattingDayPeriodValues19 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "’Ø’•’Ω’£’∑",
        noon: "’Ø’•’Ω÷Ö÷Ä",
        morning: "’°’º’°’æ’∏’ø’®",
        afternoon: "÷Å’•÷Ä’•’Ø’®",
        evening: "’•÷Ä’•’Ø’∏’µ’°’∂",
        night: "’£’´’∑’•÷Ä’®"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "’Ø’•’Ω’£’´’∑’•÷Ä’´’∂",
        noon: "’Ø’•’Ω÷Ö÷Ä’´’∂",
        morning: "’°’º’°’æ’∏’ø’®",
        afternoon: "÷Å’•÷Ä’•’Ø’®",
        evening: "’•÷Ä’•’Ø’∏’µ’°’∂",
        night: "’£’´’∑’•÷Ä’®"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "’Ø’•’Ω’£’´’∑’•÷Ä’´’∂",
        noon: "’Ø’•’Ω÷Ö÷Ä’´’∂",
        morning: "’°’º’°’æ’∏’ø’®",
        afternoon: "÷Å’•÷Ä’•’Ø’®",
        evening: "’•÷Ä’•’Ø’∏’µ’°’∂",
        night: "’£’´’∑’•÷Ä’®"
      }
    };
    ordinalNumber49 = function ordinalNumber50(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 < 10) {
        if (rem100 % 10 === 1) {
          return number + "÷ä’´’∂";
        }
      }
      return number + "÷ä÷Ä’§";
    };
    localize25 = {
      ordinalNumber: ordinalNumber49,
      era: buildLocalizeFn({
        values: eraValues25,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues25,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback25(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues25,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues25,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues25,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues19,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default26 = localize25;
  }
});

// node_modules/date-fns/esm/locale/hy/_lib/match/index.js
var matchOrdinalNumberPattern25, parseOrdinalNumberPattern25, matchEraPatterns25, parseEraPatterns25, matchQuarterPatterns25, parseQuarterPatterns25, matchMonthPatterns25, parseMonthPatterns25, matchDayPatterns25, parseDayPatterns25, matchDayPeriodPatterns25, parseDayPeriodPatterns25, match25, match_default26;
var init_match26 = __esm({
  "node_modules/date-fns/esm/locale/hy/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern25 = /^(\d+)((-|÷ä)?(’´’∂|÷Ä’§))?/i;
    parseOrdinalNumberPattern25 = /\d+/i;
    matchEraPatterns25 = {
      narrow: /^(’î|’Ñ)/i,
      abbreviated: /^(’î\.?\s?‘±\.?|’Ñ\.?\s?‘π\.?\s?‘±\.?|’Ñ\.?\s?‘π\.?|’î\.?\s?’Ä\.?)/i,
      wide: /^(÷Ñ÷Ä’´’Ω’ø’∏’Ω’´÷Å ’°’º’°’ª|’¥’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’´÷Å ’°’º’°’ª|’¥’•÷Ä ’©’æ’°÷Ä’Ø’∏÷Ç’©’µ’°’∂|÷Ñ÷Ä’´’Ω’ø’∏’Ω’´÷Å ’∞’•’ø’∏)/i
    };
    parseEraPatterns25 = {
      any: [/^÷Ñ/i, /^’¥/i]
    };
    matchQuarterPatterns25 = {
      narrow: /^[1234]/i,
      abbreviated: /^÷Ñ[1234]/i,
      wide: /^[1234]((-|÷ä)?(’´’∂|÷Ä’§)) ÷Ñ’°’º’∏÷Ä’§/i
    };
    parseQuarterPatterns25 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns25 = {
      narrow: /^[’∞÷É’¥’°÷Ö’Ω’∂’§]/i,
      abbreviated: /^(’∞’∏÷Ç’∂|÷É’•’ø|’¥’°÷Ä|’°’∫÷Ä|’¥’°’µ|’∞’∏÷Ç’∂|’∞’∏÷Ç’¨|÷Ö’£’Ω|’Ω’•’∫|’∞’∏’Ø|’∂’∏’µ|’§’•’Ø)/i,
      wide: /^(’∞’∏÷Ç’∂’æ’°÷Ä|÷É’•’ø÷Ä’æ’°÷Ä|’¥’°÷Ä’ø|’°’∫÷Ä’´’¨|’¥’°’µ’´’Ω|’∞’∏÷Ç’∂’´’Ω|’∞’∏÷Ç’¨’´’Ω|÷Ö’£’∏’Ω’ø’∏’Ω|’Ω’•’∫’ø’•’¥’¢’•÷Ä|’∞’∏’Ø’ø’•’¥’¢’•÷Ä|’∂’∏’µ’•’¥’¢’•÷Ä|’§’•’Ø’ø’•’¥’¢’•÷Ä)/i
    };
    parseMonthPatterns25 = {
      narrow: [/^’∞/i, /^÷É/i, /^’¥/i, /^’°/i, /^’¥/i, /^’∞/i, /^’∞/i, /^÷Ö/i, /^’Ω/i, /^’∞/i, /^’∂/i, /^’§/i],
      any: [/^’∞’∏÷Ç/i, /^÷É/i, /^’¥’°÷Ä/i, /^’°/i, /^’¥’°’µ/i, /^’∞’∏÷Ç’∂/i, /^’∞’∏÷Ç’¨/i, /^÷Ö/i, /^’Ω/i, /^’∞’∏’Ø/i, /^’∂/i, /^’§/i]
    };
    matchDayPatterns25 = {
      narrow: /^[’•’π’∞’∏’∑’Ø]/i,
      short: /^(’Ø÷Ä|’•÷Ä|’•÷Ñ|’π÷Ñ|’∞’£|’∏÷Ç÷Ä|’∑’¢)/i,
      abbreviated: /^(’Ø’´÷Ä|’•÷Ä’Ø|’•÷Ä÷Ñ|’π’∏÷Ä|’∞’∂’£|’∏÷Ç÷Ä’¢|’∑’°’¢)/i,
      wide: /^(’Ø’´÷Ä’°’Ø’´|’•÷Ä’Ø’∏÷Ç’∑’°’¢’©’´|’•÷Ä’•÷Ñ’∑’°’¢’©’´|’π’∏÷Ä’•÷Ñ’∑’°’¢’©’´|’∞’´’∂’£’∑’°’¢’©’´|’∏÷Ç÷Ä’¢’°’©|’∑’°’¢’°’©)/i
    };
    parseDayPatterns25 = {
      narrow: [/^’Ø/i, /^’•/i, /^’•/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
      short: [/^’Ø/i, /^’•÷Ä/i, /^’•÷Ñ/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
      abbreviated: [/^’Ø/i, /^’•÷Ä’Ø/i, /^’•÷Ä÷Ñ/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i],
      wide: [/^’Ø/i, /^’•÷Ä’Ø/i, /^’•÷Ä’•/i, /^’π/i, /^’∞/i, /^(’∏|’à)/, /^’∑/i]
    };
    matchDayPeriodPatterns25 = {
      narrow: /^([ap]|’Ø’•’Ω’£’∑|’Ø’•’Ω÷Ö÷Ä|(’°’º’°’æ’∏’ø’®?|÷Å’•÷Ä’•’Ø’®?|’•÷Ä’•’Ø’∏(’µ’°’∂)?|’£’´’∑’•÷Ä’®?))/i,
      any: /^([ap]\.?\s?m\.?|’Ø’•’Ω’£’´’∑’•÷Ä(’´’∂)?|’Ø’•’Ω÷Ö÷Ä(’´’∂)?|(’°’º’°’æ’∏’ø’®?|÷Å’•÷Ä’•’Ø’®?|’•÷Ä’•’Ø’∏(’µ’°’∂)?|’£’´’∑’•÷Ä’®?))/i
    };
    parseDayPeriodPatterns25 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /’Ø’•’Ω’£’´’∑’•÷Ä/i,
        noon: /’Ø’•’Ω÷Ö÷Ä/i,
        morning: /’°’º’°’æ’∏’ø/i,
        afternoon: /÷Å’•÷Ä’•’Ø/i,
        evening: /’•÷Ä’•’Ø’∏/i,
        night: /’£’´’∑’•÷Ä/i
      }
    };
    match25 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern25,
        parsePattern: parseOrdinalNumberPattern25,
        valueCallback: function valueCallback48(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns25,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns25,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns25,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns25,
        defaultParseWidth: "any",
        valueCallback: function valueCallback49(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns25,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns25,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns25,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns25,
        defaultParseWidth: "wide"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns25,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns25,
        defaultParseWidth: "any"
      })
    };
    match_default26 = match25;
  }
});

// node_modules/date-fns/esm/locale/hy/index.js
var hy_exports = {};
__export(hy_exports, {
  default: () => hy_default
});
var locale29, hy_default;
var init_hy = __esm({
  "node_modules/date-fns/esm/locale/hy/index.js"() {
    init_formatDistance28();
    init_formatLong29();
    init_formatRelative27();
    init_localize26();
    init_match26();
    locale29 = {
      code: "hy",
      formatDistance: formatDistance_default27,
      formatLong: formatLong_default29,
      formatRelative: formatRelative_default26,
      localize: localize_default26,
      match: match_default26,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    hy_default = locale29;
  }
});

// node_modules/date-fns/esm/locale/id/_lib/formatDistance/index.js
var formatDistanceLocale26, formatDistance54, formatDistance_default28;
var init_formatDistance29 = __esm({
  "node_modules/date-fns/esm/locale/id/_lib/formatDistance/index.js"() {
    formatDistanceLocale26 = {
      lessThanXSeconds: {
        one: "kurang dari 1 detik",
        other: "kurang dari {{count}} detik"
      },
      xSeconds: {
        one: "1 detik",
        other: "{{count}} detik"
      },
      halfAMinute: "setengah menit",
      lessThanXMinutes: {
        one: "kurang dari 1 menit",
        other: "kurang dari {{count}} menit"
      },
      xMinutes: {
        one: "1 menit",
        other: "{{count}} menit"
      },
      aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
      },
      xHours: {
        one: "1 jam",
        other: "{{count}} jam"
      },
      xDays: {
        one: "1 hari",
        other: "{{count}} hari"
      },
      aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
      },
      xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
      },
      aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
      },
      xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
      },
      aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
      },
      xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
      },
      overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
      },
      almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
      }
    };
    formatDistance54 = function formatDistance55(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale26[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dalam waktu " + result;
        } else {
          return result + " yang lalu";
        }
      }
      return result;
    };
    formatDistance_default28 = formatDistance54;
  }
});

// node_modules/date-fns/esm/locale/id/_lib/formatLong/index.js
var dateFormats30, timeFormats30, dateTimeFormats30, formatLong30, formatLong_default30;
var init_formatLong30 = __esm({
  "node_modules/date-fns/esm/locale/id/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats30 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "d/M/yyyy"
    };
    timeFormats30 = {
      full: "HH.mm.ss",
      long: "HH.mm.ss",
      medium: "HH.mm",
      short: "HH.mm"
    };
    dateTimeFormats30 = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong30 = {
      date: buildFormatLongFn({
        formats: dateFormats30,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats30,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats30,
        defaultWidth: "full"
      })
    };
    formatLong_default30 = formatLong30;
  }
});

// node_modules/date-fns/esm/locale/id/_lib/formatRelative/index.js
var formatRelativeLocale26, formatRelative52, formatRelative_default27;
var init_formatRelative28 = __esm({
  "node_modules/date-fns/esm/locale/id/_lib/formatRelative/index.js"() {
    formatRelativeLocale26 = {
      lastWeek: "eeee 'lalu pukul' p",
      yesterday: "'Kemarin pukul' p",
      today: "'Hari ini pukul' p",
      tomorrow: "'Besok pukul' p",
      nextWeek: "eeee 'pukul' p",
      other: "P"
    };
    formatRelative52 = function formatRelative53(token, _date, _baseDate, _options) {
      return formatRelativeLocale26[token];
    };
    formatRelative_default27 = formatRelative52;
  }
});

// node_modules/date-fns/esm/locale/id/_lib/localize/index.js
var eraValues26, quarterValues26, monthValues26, dayValues26, dayPeriodValues26, formattingDayPeriodValues20, ordinalNumber51, localize26, localize_default27;
var init_localize27 = __esm({
  "node_modules/date-fns/esm/locale/id/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues26 = {
      narrow: ["SM", "M"],
      abbreviated: ["SM", "M"],
      wide: ["Sebelum Masehi", "Masehi"]
    };
    quarterValues26 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"]
    };
    monthValues26 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"],
      wide: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
    };
    dayValues26 = {
      narrow: ["M", "S", "S", "R", "K", "J", "S"],
      short: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
      abbreviated: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
      wide: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
    };
    dayPeriodValues26 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      }
    };
    formattingDayPeriodValues20 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      }
    };
    ordinalNumber51 = function ordinalNumber52(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return "ke-" + number;
    };
    localize26 = {
      ordinalNumber: ordinalNumber51,
      era: buildLocalizeFn({
        values: eraValues26,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues26,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback26(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues26,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues26,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues26,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues20,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default27 = localize26;
  }
});

// node_modules/date-fns/esm/locale/id/_lib/match/index.js
var matchOrdinalNumberPattern26, parseOrdinalNumberPattern26, matchEraPatterns26, parseEraPatterns26, matchQuarterPatterns26, parseQuarterPatterns26, matchMonthPatterns26, parseMonthPatterns26, matchDayPatterns26, parseDayPatterns26, matchDayPeriodPatterns26, parseDayPeriodPatterns26, match26, match_default27;
var init_match27 = __esm({
  "node_modules/date-fns/esm/locale/id/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern26 = /^ke-(\d+)?/i;
    parseOrdinalNumberPattern26 = /\d+/i;
    matchEraPatterns26 = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
      wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
    };
    parseEraPatterns26 = {
      any: [/^s/i, /^(m|e)/i]
    };
    matchQuarterPatterns26 = {
      narrow: /^[1234]/i,
      abbreviated: /^K-?\s[1234]/i,
      wide: /^Kuartal ke-?\s?[1234]/i
    };
    parseQuarterPatterns26 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns26 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
      wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
    };
    parseMonthPatterns26 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns26 = {
      narrow: /^[srkjm]/i,
      short: /^(min|sen|sel|rab|kam|jum|sab)/i,
      abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
      wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
    };
    parseDayPatterns26 = {
      narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    matchDayPeriodPatterns26 = {
      narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
    };
    parseDayPeriodPatterns26 = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pagi/i,
        afternoon: /siang/i,
        evening: /sore/i,
        night: /malam/i
      }
    };
    match26 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern26,
        parsePattern: parseOrdinalNumberPattern26,
        valueCallback: function valueCallback50(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns26,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns26,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns26,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns26,
        defaultParseWidth: "any",
        valueCallback: function valueCallback51(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns26,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns26,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns26,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns26,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns26,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns26,
        defaultParseWidth: "any"
      })
    };
    match_default27 = match26;
  }
});

// node_modules/date-fns/esm/locale/id/index.js
var id_exports = {};
__export(id_exports, {
  default: () => id_default
});
var locale30, id_default;
var init_id = __esm({
  "node_modules/date-fns/esm/locale/id/index.js"() {
    init_formatDistance29();
    init_formatLong30();
    init_formatRelative28();
    init_localize27();
    init_match27();
    locale30 = {
      code: "id",
      formatDistance: formatDistance_default28,
      formatLong: formatLong_default30,
      formatRelative: formatRelative_default27,
      localize: localize_default27,
      match: match_default27,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    id_default = locale30;
  }
});

// node_modules/date-fns/esm/locale/is/_lib/formatDistance/index.js
var formatDistanceLocale27, formatDistance56, formatDistance_default29;
var init_formatDistance30 = __esm({
  "node_modules/date-fns/esm/locale/is/_lib/formatDistance/index.js"() {
    formatDistanceLocale27 = {
      lessThanXSeconds: {
        one: "minna en 1 sek√∫nda",
        other: "minna en {{count}} sek√∫ndur"
      },
      xSeconds: {
        one: "1 sek√∫nda",
        other: "{{count}} sek√∫ndur"
      },
      halfAMinute: "h√°lf m√≠n√∫ta",
      lessThanXMinutes: {
        one: "minna en 1 m√≠n√∫ta",
        other: "minna en {{count}} m√≠n√∫tur"
      },
      xMinutes: {
        one: "1 m√≠n√∫ta",
        other: "{{count}} m√≠n√∫tur"
      },
      aboutXHours: {
        one: "u.√æ.b. 1 klukkustund",
        other: "u.√æ.b. {{count}} klukkustundir"
      },
      xHours: {
        one: "1 klukkustund",
        other: "{{count}} klukkustundir"
      },
      xDays: {
        one: "1 dagur",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "um viku",
        other: "um {{count}} vikur"
      },
      xWeeks: {
        one: "1 viku",
        other: "{{count}} vikur"
      },
      aboutXMonths: {
        one: "u.√æ.b. 1 m√°nu√∞ur",
        other: "u.√æ.b. {{count}} m√°nu√∞ir"
      },
      xMonths: {
        one: "1 m√°nu√∞ur",
        other: "{{count}} m√°nu√∞ir"
      },
      aboutXYears: {
        one: "u.√æ.b. 1 √°r",
        other: "u.√æ.b. {{count}} √°r"
      },
      xYears: {
        one: "1 √°r",
        other: "{{count}} √°r"
      },
      overXYears: {
        one: "meira en 1 √°r",
        other: "meira en {{count}} √°r"
      },
      almostXYears: {
        one: "n√¶stum 1 √°r",
        other: "n√¶stum {{count}} √°r"
      }
    };
    formatDistance56 = function formatDistance57(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale27[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "√≠ " + result;
        } else {
          return result + " s√≠√∞an";
        }
      }
      return result;
    };
    formatDistance_default29 = formatDistance56;
  }
});

// node_modules/date-fns/esm/locale/is/_lib/formatLong/index.js
var dateFormats31, timeFormats31, dateTimeFormats31, formatLong31, formatLong_default31;
var init_formatLong31 = __esm({
  "node_modules/date-fns/esm/locale/is/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats31 = {
      full: "EEEE, do MMMM y",
      long: "do MMMM y",
      medium: "do MMM y",
      short: "d.MM.y"
    };
    timeFormats31 = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats31 = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong31 = {
      date: buildFormatLongFn({
        formats: dateFormats31,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats31,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats31,
        defaultWidth: "full"
      })
    };
    formatLong_default31 = formatLong31;
  }
});

// node_modules/date-fns/esm/locale/is/_lib/formatRelative/index.js
var formatRelativeLocale27, formatRelative54, formatRelative_default28;
var init_formatRelative29 = __esm({
  "node_modules/date-fns/esm/locale/is/_lib/formatRelative/index.js"() {
    formatRelativeLocale27 = {
      lastWeek: "'s√≠√∞asta' dddd 'kl.' p",
      yesterday: "'√≠ g√¶r kl.' p",
      today: "'√≠ dag kl.' p",
      tomorrow: "'√° morgun kl.' p",
      nextWeek: "dddd 'kl.' p",
      other: "P"
    };
    formatRelative54 = function formatRelative55(token, _date, _baseDate, _options) {
      return formatRelativeLocale27[token];
    };
    formatRelative_default28 = formatRelative54;
  }
});

// node_modules/date-fns/esm/locale/is/_lib/localize/index.js
var eraValues27, quarterValues27, monthValues27, dayValues27, dayPeriodValues27, formattingDayPeriodValues21, ordinalNumber53, localize27, localize_default28;
var init_localize28 = __esm({
  "node_modules/date-fns/esm/locale/is/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues27 = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["fyrir Krist", "eftir Krist"]
    };
    quarterValues27 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1F", "2F", "3F", "4F"],
      wide: ["1. fj√≥r√∞ungur", "2. fj√≥r√∞ungur", "3. fj√≥r√∞ungur", "4. fj√≥r√∞ungur"]
    };
    monthValues27 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "√Å", "S", "√ì", "N", "D"],
      abbreviated: ["jan.", "feb.", "mars", "apr√≠l", "ma√≠", "j√∫n√≠", "j√∫l√≠", "√°g√∫st", "sept.", "okt.", "n√≥v.", "des."],
      wide: ["jan√∫ar", "febr√∫ar", "mars", "apr√≠l", "ma√≠", "j√∫n√≠", "j√∫l√≠", "√°g√∫st", "september", "okt√≥ber", "n√≥vember", "desember"]
    };
    dayValues27 = {
      narrow: ["S", "M", "√û", "M", "F", "F", "L"],
      short: ["Su", "M√°", "√ûr", "Mi", "Fi", "F√∂", "La"],
      abbreviated: ["sun.", "m√°n.", "√æri.", "mi√∞.", "fim.", "f√∂s.", "lau."],
      wide: ["sunnudagur", "m√°nudagur", "√æri√∞judagur", "mi√∞vikudagur", "fimmtudagur", "f√∂studagur", "laugardagur"]
    };
    dayPeriodValues27 = {
      narrow: {
        am: "f",
        pm: "e",
        midnight: "mi√∞n√¶tti",
        noon: "h√°degi",
        morning: "morgunn",
        afternoon: "s√≠√∞degi",
        evening: "kv√∂ld",
        night: "n√≥tt"
      },
      abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "mi√∞n√¶tti",
        noon: "h√°degi",
        morning: "morgunn",
        afternoon: "s√≠√∞degi",
        evening: "kv√∂ld",
        night: "n√≥tt"
      },
      wide: {
        am: "fyrir h√°degi",
        pm: "eftir h√°degi",
        midnight: "mi√∞n√¶tti",
        noon: "h√°degi",
        morning: "morgunn",
        afternoon: "s√≠√∞degi",
        evening: "kv√∂ld",
        night: "n√≥tt"
      }
    };
    formattingDayPeriodValues21 = {
      narrow: {
        am: "f",
        pm: "e",
        midnight: "√° mi√∞n√¶tti",
        noon: "√° h√°degi",
        morning: "a√∞ morgni",
        afternoon: "s√≠√∞degis",
        evening: "um kv√∂ld",
        night: "um n√≥tt"
      },
      abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "√° mi√∞n√¶tti",
        noon: "√° h√°degi",
        morning: "a√∞ morgni",
        afternoon: "s√≠√∞degis",
        evening: "um kv√∂ld",
        night: "um n√≥tt"
      },
      wide: {
        am: "fyrir h√°degi",
        pm: "eftir h√°degi",
        midnight: "√° mi√∞n√¶tti",
        noon: "√° h√°degi",
        morning: "a√∞ morgni",
        afternoon: "s√≠√∞degis",
        evening: "um kv√∂ld",
        night: "um n√≥tt"
      }
    };
    ordinalNumber53 = function ordinalNumber54(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize27 = {
      ordinalNumber: ordinalNumber53,
      era: buildLocalizeFn({
        values: eraValues27,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues27,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback27(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues27,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues27,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues27,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues21,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default28 = localize27;
  }
});

// node_modules/date-fns/esm/locale/is/_lib/match/index.js
var matchOrdinalNumberPattern27, parseOrdinalNumberPattern27, matchEraPatterns27, parseEraPatterns27, matchQuarterPatterns27, parseQuarterPatterns27, matchMonthPatterns27, parseMonthPatterns27, matchDayPatterns27, parseDayPatterns27, matchDayPeriodPatterns27, parseDayPeriodPatterns27, match27, match_default28;
var init_match28 = __esm({
  "node_modules/date-fns/esm/locale/is/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern27 = /^(\d+)(\.)?/i;
    parseOrdinalNumberPattern27 = /\d+(\.)?/i;
    matchEraPatterns27 = {
      narrow: /^(f\.Kr\.|e\.Kr\.)/i,
      abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
      wide: /^(fyrir Krist|eftir Krist)/i
    };
    parseEraPatterns27 = {
      any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i]
    };
    matchQuarterPatterns27 = {
      narrow: /^[1234]\.?/i,
      abbreviated: /^q[1234]\.?/i,
      wide: /^[1234]\.? fj√≥r√∞ungur/i
    };
    parseQuarterPatterns27 = {
      any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i]
    };
    matchMonthPatterns27 = {
      narrow: /^[jfm√°s√≥nd]/i,
      abbreviated: /^(jan\.|feb\.|mars\.|apr√≠l\.|ma√≠|j√∫n√≠|j√∫l√≠|√°gust|sep\.|oct\.|nov\.|dec\.)/i,
      wide: /^(januar|febr√∫ar|mars|apr√≠l|ma√≠|j√∫n√≠|j√∫l√≠|√°gust|september|okt√≥ber|n√≥vember|desember)/i
    };
    parseMonthPatterns27 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^√°/i, /^s/i, /^√≥/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^ma√≠/i, /^j√∫n/i, /^j√∫l/i, /^√°u/i, /^s/i, /^√≥/i, /^n/i, /^d/i]
    };
    matchDayPatterns27 = {
      narrow: /^[smtwf]/i,
      short: /^(su|m√°|√ær|mi|fi|f√∂|la)/i,
      abbreviated: /^(sun|m√°n|√æri|mi√∞|fim|f√∂s|lau)\.?/i,
      wide: /^(sunnudagur|m√°nudagur|√æri√∞judagur|mi√∞vikudagur|fimmtudagur|f√∂studagur|laugardagur)/i
    };
    parseDayPatterns27 = {
      narrow: [/^s/i, /^m/i, /^√æ/i, /^m/i, /^f/i, /^f/i, /^l/i],
      any: [/^su/i, /^m√°/i, /^√ær/i, /^mi/i, /^fi/i, /^f√∂/i, /^la/i]
    };
    matchDayPeriodPatterns27 = {
      narrow: /^(f|e|s√≠√∞degis|(√°|a√∞|um) (morgni|kv√∂ld|n√≥tt|mi√∞n√¶tti))/i,
      any: /^(fyrir h√°degi|eftir h√°degi|[ef]\.?h\.?|s√≠√∞degis|morgunn|(√°|a√∞|um) (morgni|kv√∂ld|n√≥tt|mi√∞n√¶tti))/i
    };
    parseDayPeriodPatterns27 = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^mi/i,
        noon: /^h√°/i,
        morning: /morgunn/i,
        afternoon: /s√≠√∞degi/i,
        evening: /kv√∂ld/i,
        night: /n√≥tt/i
      }
    };
    match27 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern27,
        parsePattern: parseOrdinalNumberPattern27,
        valueCallback: function valueCallback52(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns27,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns27,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns27,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns27,
        defaultParseWidth: "any",
        valueCallback: function valueCallback53(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns27,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns27,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns27,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns27,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns27,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns27,
        defaultParseWidth: "any"
      })
    };
    match_default28 = match27;
  }
});

// node_modules/date-fns/esm/locale/is/index.js
var is_exports = {};
__export(is_exports, {
  default: () => is_default
});
var locale31, is_default;
var init_is = __esm({
  "node_modules/date-fns/esm/locale/is/index.js"() {
    init_formatDistance30();
    init_formatLong31();
    init_formatRelative29();
    init_localize28();
    init_match28();
    locale31 = {
      code: "is",
      formatDistance: formatDistance_default29,
      formatLong: formatLong_default31,
      formatRelative: formatRelative_default28,
      localize: localize_default28,
      match: match_default28,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    is_default = locale31;
  }
});

// node_modules/date-fns/esm/locale/it/_lib/formatDistance/index.js
var formatDistanceLocale28, formatDistance58, formatDistance_default30;
var init_formatDistance31 = __esm({
  "node_modules/date-fns/esm/locale/it/_lib/formatDistance/index.js"() {
    formatDistanceLocale28 = {
      lessThanXSeconds: {
        one: "meno di un secondo",
        other: "meno di {{count}} secondi"
      },
      xSeconds: {
        one: "un secondo",
        other: "{{count}} secondi"
      },
      halfAMinute: "alcuni secondi",
      lessThanXMinutes: {
        one: "meno di un minuto",
        other: "meno di {{count}} minuti"
      },
      xMinutes: {
        one: "un minuto",
        other: "{{count}} minuti"
      },
      aboutXHours: {
        one: "circa un'ora",
        other: "circa {{count}} ore"
      },
      xHours: {
        one: "un'ora",
        other: "{{count}} ore"
      },
      xDays: {
        one: "un giorno",
        other: "{{count}} giorni"
      },
      aboutXWeeks: {
        one: "circa una settimana",
        other: "circa {{count}} settimane"
      },
      xWeeks: {
        one: "una settimana",
        other: "{{count}} settimane"
      },
      aboutXMonths: {
        one: "circa un mese",
        other: "circa {{count}} mesi"
      },
      xMonths: {
        one: "un mese",
        other: "{{count}} mesi"
      },
      aboutXYears: {
        one: "circa un anno",
        other: "circa {{count}} anni"
      },
      xYears: {
        one: "un anno",
        other: "{{count}} anni"
      },
      overXYears: {
        one: "pi√π di un anno",
        other: "pi√π di {{count}} anni"
      },
      almostXYears: {
        one: "quasi un anno",
        other: "quasi {{count}} anni"
      }
    };
    formatDistance58 = function formatDistance59(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale28[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "tra " + result;
        } else {
          return result + " fa";
        }
      }
      return result;
    };
    formatDistance_default30 = formatDistance58;
  }
});

// node_modules/date-fns/esm/locale/it/_lib/formatLong/index.js
var dateFormats32, timeFormats32, dateTimeFormats32, formatLong32, formatLong_default32;
var init_formatLong32 = __esm({
  "node_modules/date-fns/esm/locale/it/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats32 = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    timeFormats32 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats32 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong32 = {
      date: buildFormatLongFn({
        formats: dateFormats32,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats32,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats32,
        defaultWidth: "full"
      })
    };
    formatLong_default32 = formatLong32;
  }
});

// node_modules/date-fns/esm/locale/it/_lib/formatRelative/index.js
function _lastWeek(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";
    default:
      return "'" + weekdays2[day] + " scorso alle' p";
  }
}
function thisWeek3(day) {
  return "'" + weekdays2[day] + " alle' p";
}
function _nextWeek(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";
    default:
      return "'" + weekdays2[day] + " prossimo alle' p";
  }
}
var weekdays2, formatRelativeLocale28, formatRelative56, formatRelative_default29;
var init_formatRelative30 = __esm({
  "node_modules/date-fns/esm/locale/it/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    weekdays2 = ["domenica", "luned√¨", "marted√¨", "mercoled√¨", "gioved√¨", "venerd√¨", "sabato"];
    formatRelativeLocale28 = {
      lastWeek: function lastWeek5(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek3(day);
        } else {
          return _lastWeek(day);
        }
      },
      yesterday: "'ieri alle' p",
      today: "'oggi alle' p",
      tomorrow: "'domani alle' p",
      nextWeek: function nextWeek5(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek3(day);
        } else {
          return _nextWeek(day);
        }
      },
      other: "P"
    };
    formatRelative56 = function formatRelative57(token, date, baseDate, options) {
      var format2 = formatRelativeLocale28[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default29 = formatRelative56;
  }
});

// node_modules/date-fns/esm/locale/it/_lib/localize/index.js
var eraValues28, quarterValues28, monthValues28, dayValues28, dayPeriodValues28, formattingDayPeriodValues22, ordinalNumber55, localize28, localize_default29;
var init_localize29 = __esm({
  "node_modules/date-fns/esm/locale/it/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues28 = {
      narrow: ["aC", "dC"],
      abbreviated: ["a.C.", "d.C."],
      wide: ["avanti Cristo", "dopo Cristo"]
    };
    quarterValues28 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1¬∫ trimestre", "2¬∫ trimestre", "3¬∫ trimestre", "4¬∫ trimestre"]
    };
    monthValues28 = {
      narrow: ["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"],
      abbreviated: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic"],
      wide: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"]
    };
    dayValues28 = {
      narrow: ["D", "L", "M", "M", "G", "V", "S"],
      short: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
      abbreviated: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
      wide: ["domenica", "luned√¨", "marted√¨", "mercoled√¨", "gioved√¨", "venerd√¨", "sabato"]
    };
    dayPeriodValues28 = {
      narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      }
    };
    formattingDayPeriodValues22 = {
      narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      }
    };
    ordinalNumber55 = function ordinalNumber56(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return String(number);
    };
    localize28 = {
      ordinalNumber: ordinalNumber55,
      era: buildLocalizeFn({
        values: eraValues28,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues28,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback28(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues28,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues28,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues28,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues22,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default29 = localize28;
  }
});

// node_modules/date-fns/esm/locale/it/_lib/match/index.js
var matchOrdinalNumberPattern28, parseOrdinalNumberPattern28, matchEraPatterns28, parseEraPatterns28, matchQuarterPatterns28, parseQuarterPatterns28, matchMonthPatterns28, parseMonthPatterns28, matchDayPatterns28, parseDayPatterns28, matchDayPeriodPatterns28, parseDayPeriodPatterns28, match28, match_default29;
var init_match29 = __esm({
  "node_modules/date-fns/esm/locale/it/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern28 = /^(\d+)(¬∫)?/i;
    parseOrdinalNumberPattern28 = /\d+/i;
    matchEraPatterns28 = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
      wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
    };
    parseEraPatterns28 = {
      any: [/^a/i, /^(d|e)/i]
    };
    matchQuarterPatterns28 = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](¬∫)? trimestre/i
    };
    parseQuarterPatterns28 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns28 = {
      narrow: /^[gfmalsond]/i,
      abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
      wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
    };
    parseMonthPatterns28 = {
      narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns28 = {
      narrow: /^[dlmgvs]/i,
      short: /^(do|lu|ma|me|gi|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
      wide: /^(domenica|luned[i|√¨]|marted[i|√¨]|mercoled[i|√¨]|gioved[i|√¨]|venerd[i|√¨]|sabato)/i
    };
    parseDayPatterns28 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
    };
    matchDayPeriodPatterns28 = {
      narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
      any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
    };
    parseDayPeriodPatterns28 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mezza/i,
        noon: /^mezzo/i,
        morning: /mattina/i,
        afternoon: /pomeriggio/i,
        evening: /sera/i,
        night: /notte/i
      }
    };
    match28 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern28,
        parsePattern: parseOrdinalNumberPattern28,
        valueCallback: function valueCallback54(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns28,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns28,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns28,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns28,
        defaultParseWidth: "any",
        valueCallback: function valueCallback55(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns28,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns28,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns28,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns28,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns28,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns28,
        defaultParseWidth: "any"
      })
    };
    match_default29 = match28;
  }
});

// node_modules/date-fns/esm/locale/it/index.js
var it_exports = {};
__export(it_exports, {
  default: () => it_default
});
var locale32, it_default;
var init_it = __esm({
  "node_modules/date-fns/esm/locale/it/index.js"() {
    init_formatDistance31();
    init_formatLong32();
    init_formatRelative30();
    init_localize29();
    init_match29();
    locale32 = {
      code: "it",
      formatDistance: formatDistance_default30,
      formatLong: formatLong_default32,
      formatRelative: formatRelative_default29,
      localize: localize_default29,
      match: match_default29,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    it_default = locale32;
  }
});

// node_modules/date-fns/esm/locale/ja/_lib/formatDistance/index.js
var formatDistanceLocale29, formatDistance60, formatDistance_default31;
var init_formatDistance32 = __esm({
  "node_modules/date-fns/esm/locale/ja/_lib/formatDistance/index.js"() {
    formatDistanceLocale29 = {
      lessThanXSeconds: {
        one: "1ÁßíÊú™Ê∫Ä",
        other: "{{count}}ÁßíÊú™Ê∫Ä",
        oneWithSuffix: "Á¥Ñ1Áßí",
        otherWithSuffix: "Á¥Ñ{{count}}Áßí"
      },
      xSeconds: {
        one: "1Áßí",
        other: "{{count}}Áßí"
      },
      halfAMinute: "30Áßí",
      lessThanXMinutes: {
        one: "1ÂàÜÊú™Ê∫Ä",
        other: "{{count}}ÂàÜÊú™Ê∫Ä",
        oneWithSuffix: "Á¥Ñ1ÂàÜ",
        otherWithSuffix: "Á¥Ñ{{count}}ÂàÜ"
      },
      xMinutes: {
        one: "1ÂàÜ",
        other: "{{count}}ÂàÜ"
      },
      aboutXHours: {
        one: "Á¥Ñ1ÊôÇÈñì",
        other: "Á¥Ñ{{count}}ÊôÇÈñì"
      },
      xHours: {
        one: "1ÊôÇÈñì",
        other: "{{count}}ÊôÇÈñì"
      },
      xDays: {
        one: "1Êó•",
        other: "{{count}}Êó•"
      },
      aboutXWeeks: {
        one: "Á¥Ñ1ÈÄ±Èñì",
        other: "Á¥Ñ{{count}}ÈÄ±Èñì"
      },
      xWeeks: {
        one: "1ÈÄ±Èñì",
        other: "{{count}}ÈÄ±Èñì"
      },
      aboutXMonths: {
        one: "Á¥Ñ1„ÅãÊúà",
        other: "Á¥Ñ{{count}}„ÅãÊúà"
      },
      xMonths: {
        one: "1„ÅãÊúà",
        other: "{{count}}„ÅãÊúà"
      },
      aboutXYears: {
        one: "Á¥Ñ1Âπ¥",
        other: "Á¥Ñ{{count}}Âπ¥"
      },
      xYears: {
        one: "1Âπ¥",
        other: "{{count}}Âπ¥"
      },
      overXYears: {
        one: "1Âπ¥‰ª•‰∏ä",
        other: "{{count}}Âπ¥‰ª•‰∏ä"
      },
      almostXYears: {
        one: "1Âπ¥Ëøë„Åè",
        other: "{{count}}Âπ¥Ëøë„Åè"
      }
    };
    formatDistance60 = function formatDistance61(token, count, options) {
      options = options || {};
      var result;
      var tokenValue = formatDistanceLocale29[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options.addSuffix && tokenValue.oneWithSuffix) {
          result = tokenValue.oneWithSuffix;
        } else {
          result = tokenValue.one;
        }
      } else {
        if (options.addSuffix && tokenValue.otherWithSuffix) {
          result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
        } else {
          result = tokenValue.other.replace("{{count}}", String(count));
        }
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "Âæå";
        } else {
          return result + "Ââç";
        }
      }
      return result;
    };
    formatDistance_default31 = formatDistance60;
  }
});

// node_modules/date-fns/esm/locale/ja/_lib/formatLong/index.js
var dateFormats33, timeFormats33, dateTimeFormats33, formatLong33, formatLong_default33;
var init_formatLong33 = __esm({
  "node_modules/date-fns/esm/locale/ja/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats33 = {
      full: "yÂπ¥MÊúàdÊó•EEEE",
      long: "yÂπ¥MÊúàdÊó•",
      medium: "y/MM/dd",
      short: "y/MM/dd"
    };
    timeFormats33 = {
      full: "HÊôÇmmÂàÜssÁßí zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats33 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong33 = {
      date: buildFormatLongFn({
        formats: dateFormats33,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats33,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats33,
        defaultWidth: "full"
      })
    };
    formatLong_default33 = formatLong33;
  }
});

// node_modules/date-fns/esm/locale/ja/_lib/formatRelative/index.js
var formatRelativeLocale29, formatRelative58, formatRelative_default30;
var init_formatRelative31 = __esm({
  "node_modules/date-fns/esm/locale/ja/_lib/formatRelative/index.js"() {
    formatRelativeLocale29 = {
      lastWeek: "ÂÖàÈÄ±„ÅÆeeee„ÅÆp",
      yesterday: "Êò®Êó•„ÅÆp",
      today: "‰ªäÊó•„ÅÆp",
      tomorrow: "ÊòéÊó•„ÅÆp",
      nextWeek: "ÁøåÈÄ±„ÅÆeeee„ÅÆp",
      other: "P"
    };
    formatRelative58 = function formatRelative59(token, _date, _baseDate, _options) {
      return formatRelativeLocale29[token];
    };
    formatRelative_default30 = formatRelative58;
  }
});

// node_modules/date-fns/esm/locale/ja/_lib/localize/index.js
var eraValues29, quarterValues29, monthValues29, dayValues29, dayPeriodValues29, formattingDayPeriodValues23, ordinalNumber57, localize29, localize_default30;
var init_localize30 = __esm({
  "node_modules/date-fns/esm/locale/ja/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues29 = {
      narrow: ["BC", "AC"],
      abbreviated: ["Á¥ÄÂÖÉÂâç", "Ë•øÊö¶"],
      wide: ["Á¥ÄÂÖÉÂâç", "Ë•øÊö¶"]
    };
    quarterValues29 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["Á¨¨1ÂõõÂçäÊúü", "Á¨¨2ÂõõÂçäÊúü", "Á¨¨3ÂõõÂçäÊúü", "Á¨¨4ÂõõÂçäÊúü"]
    };
    monthValues29 = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: ["1Êúà", "2Êúà", "3Êúà", "4Êúà", "5Êúà", "6Êúà", "7Êúà", "8Êúà", "9Êúà", "10Êúà", "11Êúà", "12Êúà"],
      wide: ["1Êúà", "2Êúà", "3Êúà", "4Êúà", "5Êúà", "6Êúà", "7Êúà", "8Êúà", "9Êúà", "10Êúà", "11Êúà", "12Êúà"]
    };
    dayValues29 = {
      narrow: ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"],
      short: ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"],
      abbreviated: ["Êó•", "Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü"],
      wide: ["Êó•ÊõúÊó•", "ÊúàÊõúÊó•", "ÁÅ´ÊõúÊó•", "Ê∞¥ÊõúÊó•", "Êú®ÊõúÊó•", "ÈáëÊõúÊó•", "ÂúüÊõúÊó•"]
    };
    dayPeriodValues29 = {
      narrow: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      },
      abbreviated: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      },
      wide: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      }
    };
    formattingDayPeriodValues23 = {
      narrow: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      },
      abbreviated: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      },
      wide: {
        am: "ÂçàÂâç",
        pm: "ÂçàÂæå",
        midnight: "Ê∑±Â§ú",
        noon: "Ê≠£Âçà",
        morning: "Êúù",
        afternoon: "ÂçàÂæå",
        evening: "Â§ú",
        night: "Ê∑±Â§ú"
      }
    };
    ordinalNumber57 = function ordinalNumber58(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = String(options === null || options === void 0 ? void 0 : options.unit);
      switch (unit) {
        case "year":
          return "".concat(number, "Âπ¥");
        case "quarter":
          return "Á¨¨".concat(number, "ÂõõÂçäÊúü");
        case "month":
          return "".concat(number, "Êúà");
        case "week":
          return "Á¨¨".concat(number, "ÈÄ±");
        case "date":
          return "".concat(number, "Êó•");
        case "hour":
          return "".concat(number, "ÊôÇ");
        case "minute":
          return "".concat(number, "ÂàÜ");
        case "second":
          return "".concat(number, "Áßí");
        default:
          return "".concat(number);
      }
    };
    localize29 = {
      ordinalNumber: ordinalNumber57,
      era: buildLocalizeFn({
        values: eraValues29,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues29,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback29(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues29,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues29,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues29,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues23,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default30 = localize29;
  }
});

// node_modules/date-fns/esm/locale/ja/_lib/match/index.js
var matchOrdinalNumberPattern29, parseOrdinalNumberPattern29, matchEraPatterns29, parseEraPatterns29, matchQuarterPatterns29, parseQuarterPatterns29, matchMonthPatterns29, parseMonthPatterns29, matchDayPatterns29, parseDayPatterns29, matchDayPeriodPatterns29, parseDayPeriodPatterns29, match29, match_default30;
var init_match30 = __esm({
  "node_modules/date-fns/esm/locale/ja/_lib/match/index.js"() {
    init_buildMatchPatternFn();
    init_buildMatchFn();
    matchOrdinalNumberPattern29 = /^Á¨¨?\d+(Âπ¥|ÂõõÂçäÊúü|Êúà|ÈÄ±|Êó•|ÊôÇ|ÂàÜ|Áßí)?/i;
    parseOrdinalNumberPattern29 = /\d+/i;
    matchEraPatterns29 = {
      narrow: /^(B\.?C\.?|A\.?D\.?)/i,
      abbreviated: /^(Á¥ÄÂÖÉ[ÂâçÂæå]|Ë•øÊö¶)/i,
      wide: /^(Á¥ÄÂÖÉ[ÂâçÂæå]|Ë•øÊö¶)/i
    };
    parseEraPatterns29 = {
      narrow: [/^B/i, /^A/i],
      any: [/^(Á¥ÄÂÖÉÂâç)/i, /^(Ë•øÊö¶|Á¥ÄÂÖÉÂæå)/i]
    };
    matchQuarterPatterns29 = {
      narrow: /^[1234]/i,
      abbreviated: /^Q[1234]/i,
      wide: /^Á¨¨[1234‰∏Ä‰∫å‰∏âÂõõÔºëÔºíÔºìÔºî]ÂõõÂçäÊúü/i
    };
    parseQuarterPatterns29 = {
      any: [/(1|‰∏Ä|Ôºë)/i, /(2|‰∫å|Ôºí)/i, /(3|‰∏â|Ôºì)/i, /(4|Âõõ|Ôºî)/i]
    };
    matchMonthPatterns29 = {
      narrow: /^([123456789]|1[012])/,
      abbreviated: /^([123456789]|1[012])Êúà/i,
      wide: /^([123456789]|1[012])Êúà/i
    };
    parseMonthPatterns29 = {
      any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
    };
    matchDayPatterns29 = {
      narrow: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
      short: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
      abbreviated: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]/,
      wide: /^[Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]ÊõúÊó•/
    };
    parseDayPatterns29 = {
      any: [/^Êó•/, /^Êúà/, /^ÁÅ´/, /^Ê∞¥/, /^Êú®/, /^Èáë/, /^Âúü/]
    };
    matchDayPeriodPatterns29 = {
      any: /^(AM|PM|ÂçàÂâç|ÂçàÂæå|Ê≠£Âçà|Ê∑±Â§ú|ÁúüÂ§ú‰∏≠|Â§ú|Êúù)/i
    };
    parseDayPeriodPatterns29 = {
      any: {
        am: /^(A|ÂçàÂâç)/i,
        pm: /^(P|ÂçàÂæå)/i,
        midnight: /^Ê∑±Â§ú|ÁúüÂ§ú‰∏≠/i,
        noon: /^Ê≠£Âçà/i,
        morning: /^Êúù/i,
        afternoon: /^ÂçàÂæå/i,
        evening: /^Â§ú/i,
        night: /^Ê∑±Â§ú/i
      }
    };
    match29 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern29,
        parsePattern: parseOrdinalNumberPattern29,
        valueCallback: function valueCallback56(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns29,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns29,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns29,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns29,
        defaultParseWidth: "any",
        valueCallback: function valueCallback57(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns29,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns29,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns29,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns29,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns29,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns29,
        defaultParseWidth: "any"
      })
    };
    match_default30 = match29;
  }
});

// node_modules/date-fns/esm/locale/ja/index.js
var ja_exports = {};
__export(ja_exports, {
  default: () => ja_default
});
var locale33, ja_default;
var init_ja = __esm({
  "node_modules/date-fns/esm/locale/ja/index.js"() {
    init_formatDistance32();
    init_formatLong33();
    init_formatRelative31();
    init_localize30();
    init_match30();
    locale33 = {
      code: "ja",
      formatDistance: formatDistance_default31,
      formatLong: formatLong_default33,
      formatRelative: formatRelative_default30,
      localize: localize_default30,
      match: match_default30,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    ja_default = locale33;
  }
});

// node_modules/date-fns/esm/locale/ka/_lib/formatDistance/index.js
var formatDistanceLocale30, formatDistance62, formatDistance_default32;
var init_formatDistance33 = __esm({
  "node_modules/date-fns/esm/locale/ka/_lib/formatDistance/index.js"() {
    formatDistanceLocale30 = {
      lessThanXSeconds: {
        past: "{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò",
        future: "{{count}} ·É¨·Éê·Éõ·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·É®·Éò"
      },
      xSeconds: {
        past: "{{count}} ·É¨·Éê·Éõ·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·Éê·Éõ·Éò",
        future: "{{count}} ·É¨·Éê·Éõ·É®·Éò"
      },
      halfAMinute: {
        past: "·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·Éò·É° ·É¨·Éò·Éú",
        present: "·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·Éò",
        future: "·Éú·Éê·ÉÆ·Éî·Éï·Éê·É†·Éò ·É¨·É£·Éó·É®·Éò"
      },
      lessThanXMinutes: {
        past: "{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·Éò",
        future: "{{count}} ·É¨·É£·Éó·Éñ·Éî ·Éú·Éê·Éô·Éö·Éî·Éë·É®·Éò"
      },
      xMinutes: {
        past: "{{count}} ·É¨·É£·Éó·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·É£·Éó·Éò",
        future: "{{count}} ·É¨·É£·Éó·É®·Éò"
      },
      aboutXHours: {
        past: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·Éò·É° ·É¨·Éò·Éú",
        present: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·Éò",
        future: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É°·Éê·Éê·Éó·É®·Éò"
      },
      xHours: {
        past: "{{count}} ·É°·Éê·Éê·Éó·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É°·Éê·Éê·Éó·Éò",
        future: "{{count}} ·É°·Éê·Éê·Éó·É®·Éò"
      },
      xDays: {
        past: "{{count}} ·Éì·É¶·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·Éì·É¶·Éî",
        future: "{{count}} ·Éì·É¶·Éî·É®·Éò"
      },
      aboutXWeeks: {
        past: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê·É° ·É¨·Éò·Éú",
        present: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê",
        future: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éô·Éï·Éò·É†·Éê·É®·Éò"
      },
      xWeeks: {
        past: "{{count}} ·Éô·Éï·Éò·É†·Éê·É° ·Éô·Éï·Éò·É†·Éê",
        present: "{{count}} ·Éô·Éï·Éò·É†·Éê",
        future: "{{count}} ·Éô·Éï·Éò·É†·Éê·É®·Éò"
      },
      aboutXMonths: {
        past: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éò·É° ·É¨·Éò·Éú",
        present: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éî",
        future: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·Éó·Éï·Éî·É®·Éò"
      },
      xMonths: {
        past: "{{count}} ·Éó·Éï·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·Éó·Éï·Éî",
        future: "{{count}} ·Éó·Éï·Éî·É®·Éò"
      },
      aboutXYears: {
        past: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú",
        present: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éî·Éö·Éò",
        future: "·Éì·Éê·Éê·ÉÆ·Éö·Éù·Éî·Éë·Éò·Éó {{count}} ·É¨·Éî·Éö·É®·Éò"
      },
      xYears: {
        past: "{{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·Éî·Éö·Éò",
        future: "{{count}} ·É¨·Éî·Éö·É®·Éò"
      },
      overXYears: {
        past: "{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò ·ÉÆ·Éú·Éò·É° ·É¨·Éò·Éú",
        present: "{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò",
        future: "{{count}} ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò ·ÉÆ·Éú·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí"
      },
      almostXYears: {
        past: "·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éö·Éò·É° ·É¨·Éò·Éú",
        present: "·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éî·Éö·Éò",
        future: "·Éó·Éò·Éó·É•·Éõ·Éò·É° {{count}} ·É¨·Éî·Éö·É®·Éò"
      }
    };
    formatDistance62 = function formatDistance63(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale30[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (options !== null && options !== void 0 && options.addSuffix && options.comparison && options.comparison > 0) {
        result = tokenValue.future.replace("{{count}}", String(count));
      } else if (options !== null && options !== void 0 && options.addSuffix) {
        result = tokenValue.past.replace("{{count}}", String(count));
      } else {
        result = tokenValue.present.replace("{{count}}", String(count));
      }
      return result;
    };
    formatDistance_default32 = formatDistance62;
  }
});

// node_modules/date-fns/esm/locale/ka/_lib/formatLong/index.js
var dateFormats34, timeFormats34, dateTimeFormats34, formatLong34, formatLong_default34;
var init_formatLong34 = __esm({
  "node_modules/date-fns/esm/locale/ka/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats34 = {
      full: "EEEE, do MMMM, y",
      long: "do, MMMM, y",
      medium: "d, MMM, y",
      short: "dd/MM/yyyy"
    };
    timeFormats34 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats34 = {
      full: "{{date}} {{time}}'-·Éñ·Éî'",
      long: "{{date}} {{time}}'-·Éñ·Éî'",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong34 = {
      date: buildFormatLongFn({
        formats: dateFormats34,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats34,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats34,
        defaultWidth: "full"
      })
    };
    formatLong_default34 = formatLong34;
  }
});

// node_modules/date-fns/esm/locale/ka/_lib/formatRelative/index.js
var formatRelativeLocale30, formatRelative60, formatRelative_default31;
var init_formatRelative32 = __esm({
  "node_modules/date-fns/esm/locale/ka/_lib/formatRelative/index.js"() {
    formatRelativeLocale30 = {
      lastWeek: "'·É¨·Éò·Éú·Éê' eeee p'-·Éñ·Éî'",
      yesterday: "'·Éí·É£·É®·Éò·Éú' p'-·Éñ·Éî'",
      today: "'·Éì·É¶·Éî·É°' p'-·Éñ·Éî'",
      tomorrow: "'·ÉÆ·Éï·Éê·Éö' p'-·Éñ·Éî'",
      nextWeek: "'·É®·Éî·Éõ·Éì·Éî·Éí·Éò' eeee p'-·Éñ·Éî'",
      other: "P"
    };
    formatRelative60 = function formatRelative61(token, _date, _baseDate, _options) {
      return formatRelativeLocale30[token];
    };
    formatRelative_default31 = formatRelative60;
  }
});

// node_modules/date-fns/esm/locale/ka/_lib/localize/index.js
var eraValues30, quarterValues30, monthValues30, dayValues30, dayPeriodValues30, formattingDayPeriodValues24, ordinalNumber59, localize30, localize_default31;
var init_localize31 = __esm({
  "node_modules/date-fns/esm/locale/ka/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues30 = {
      narrow: ["·É©.·É¨-·Éõ·Éì·Éî", "·É©.·É¨"],
      abbreviated: ["·É©·Éï.·É¨-·Éõ·Éì·Éî", "·É©·Éï.·É¨"],
      wide: ["·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî", "·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó"]
    };
    quarterValues30 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-·Éö·Éò ·Éô·Éï", "2-·Éî ·Éô·Éï", "3-·Éî ·Éô·Éï", "4-·Éî ·Éô·Éï"],
      wide: ["1-·Éö·Éò ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò", "2-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò", "3-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò", "4-·Éî ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò"]
    };
    monthValues30 = {
      narrow: ["·Éò·Éê", "·Éó·Éî", "·Éõ·Éê", "·Éê·Éû", "·Éõ·É°", "·Éï·Éú", "·Éï·Éö", "·Éê·Éí", "·É°·Éî", "·Éù·É•", "·Éú·Éù", "·Éì·Éî"],
      abbreviated: ["·Éò·Éê·Éú", "·Éó·Éî·Éë", "·Éõ·Éê·É†", "·Éê·Éû·É†", "·Éõ·Éê·Éò", "·Éò·Éï·Éú", "·Éò·Éï·Éö", "·Éê·Éí·Éï", "·É°·Éî·É•", "·Éù·É•·É¢", "·Éú·Éù·Éî", "·Éì·Éî·Éô"],
      wide: ["·Éò·Éê·Éú·Éï·Éê·É†·Éò", "·Éó·Éî·Éë·Éî·É†·Éï·Éê·Éö·Éò", "·Éõ·Éê·É†·É¢·Éò", "·Éê·Éû·É†·Éò·Éö·Éò", "·Éõ·Éê·Éò·É°·Éò", "·Éò·Éï·Éú·Éò·É°·Éò", "·Éò·Éï·Éö·Éò·É°·Éò", "·Éê·Éí·Éï·Éò·É°·É¢·Éù", "·É°·Éî·É•·É¢·Éî·Éõ·Éë·Éî·É†·Éò", "·Éù·É•·É¢·Éù·Éõ·Éë·Éî·É†·Éò", "·Éú·Éù·Éî·Éõ·Éë·Éî·É†·Éò", "·Éì·Éî·Éô·Éî·Éõ·Éë·Éî·É†·Éò"]
    };
    dayValues30 = {
      narrow: ["·Éô·Éï", "·Éù·É†", "·É°·Éê", "·Éù·Éó", "·ÉÆ·É£", "·Éû·Éê", "·É®·Éê"],
      short: ["·Éô·Éï·Éò", "·Éù·É†·É®", "·É°·Éê·Éõ", "·Éù·Éó·ÉÆ", "·ÉÆ·É£·Éó", "·Éû·Éê·É†", "·É®·Éê·Éë"],
      abbreviated: ["·Éô·Éï·Éò", "·Éù·É†·É®", "·É°·Éê·Éõ", "·Éù·Éó·ÉÆ", "·ÉÆ·É£·Éó", "·Éû·Éê·É†", "·É®·Éê·Éë"],
      wide: ["·Éô·Éï·Éò·É†·Éê", "·Éù·É†·É®·Éê·Éë·Éê·Éó·Éò", "·É°·Éê·Éõ·É®·Éê·Éë·Éê·Éó·Éò", "·Éù·Éó·ÉÆ·É®·Éê·Éë·Éê·Éó·Éò", "·ÉÆ·É£·Éó·É®·Éê·Éë·Éê·Éó·Éò", "·Éû·Éê·É†·Éê·É°·Éô·Éî·Éï·Éò", "·É®·Éê·Éë·Éê·Éó·Éò"]
    };
    dayPeriodValues30 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éî",
        noon: "·É®·É£·Éê·Éì·É¶·Éî",
        morning: "·Éì·Éò·Éö·Éê",
        afternoon: "·É°·Éê·É¶·Éê·Éõ·Éù",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù",
        night: "·É¶·Éê·Éõ·Éî"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éî",
        noon: "·É®·É£·Éê·Éì·É¶·Éî",
        morning: "·Éì·Éò·Éö·Éê",
        afternoon: "·É°·Éê·É¶·Éê·Éõ·Éù",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù",
        night: "·É¶·Éê·Éõ·Éî"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éî",
        noon: "·É®·É£·Éê·Éì·É¶·Éî",
        morning: "·Éì·Éò·Éö·Éê",
        afternoon: "·É°·Éê·É¶·Éê·Éõ·Éù",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù",
        night: "·É¶·Éê·Éõ·Éî"
      }
    };
    formattingDayPeriodValues24 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó",
        noon: "·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°",
        morning: "·Éì·Éò·Éö·Éò·Éó",
        afternoon: "·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù·É°",
        night: "·É¶·Éê·Éõ·Éò·Éó"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó",
        noon: "·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°",
        morning: "·Éì·Éò·Éö·Éò·Éó",
        afternoon: "·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù·É°",
        night: "·É¶·Éê·Éõ·Éò·Éó"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "·É®·É£·Éê·É¶·Éê·Éõ·Éò·Éó",
        noon: "·É®·É£·Éê·Éì·É¶·Éò·É°·Éê·É°",
        morning: "·Éì·Éò·Éö·Éò·Éó",
        afternoon: "·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°",
        evening: "·É°·Éê·É¶·Éê·Éõ·Éù·É°",
        night: "·É¶·Éê·Éõ·Éò·Éó"
      }
    };
    ordinalNumber59 = function ordinalNumber60(dirtyNumber) {
      var number = Number(dirtyNumber);
      if (number === 1) {
        return number + "-·Éö·Éò";
      }
      return number + "-·Éî";
    };
    localize30 = {
      ordinalNumber: ordinalNumber59,
      era: buildLocalizeFn({
        values: eraValues30,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues30,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback30(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues30,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues30,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues30,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues24,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default31 = localize30;
  }
});

// node_modules/date-fns/esm/locale/ka/_lib/match/index.js
var matchOrdinalNumberPattern30, parseOrdinalNumberPattern30, matchEraPatterns30, parseEraPatterns30, matchQuarterPatterns30, parseQuarterPatterns30, matchMonthPatterns30, parseMonthPatterns30, matchDayPatterns30, parseDayPatterns30, matchDayPeriodPatterns30, parseDayPeriodPatterns30, match30, match_default31;
var init_match31 = __esm({
  "node_modules/date-fns/esm/locale/ka/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern30 = /^(\d+)(-·Éö·Éò|-·Éî)?/i;
    parseOrdinalNumberPattern30 = /\d+/i;
    matchEraPatterns30 = {
      narrow: /^(·É©·Éï?\.·É¨)/i,
      abbreviated: /^(·É©·Éï?\.·É¨)/i,
      wide: /^(·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éê·Éõ·Éì·Éî|·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éò·Éì·Éê·Éú)/i
    };
    parseEraPatterns30 = {
      any: [/^(·É©·Éï·Éî·Éú·É° ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éê·Éõ·Éì·Éî|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éê·Éõ·Éì·Éî)/i, /^(·É©·Éï·Éî·Éú·Éò ·É¨·Éî·Éö·Éó·Éê·É¶·É†·Éò·É™·ÉÆ·Éï·Éò·Éó|·É•·É†·Éò·É°·É¢·Éî·É®·Éù·Éë·Éò·Éì·Éê·Éú)/i]
    };
    matchQuarterPatterns30 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]-(·Éö·Éò|·Éî)? ·Éô·Éï/i,
      wide: /^[1234]-(·Éö·Éò|·Éî)? ·Éô·Éï·Éê·É†·É¢·Éê·Éö·Éò/i
    };
    parseQuarterPatterns30 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns30 = {
      any: /^(·Éò·Éê|·Éó·Éî|·Éõ·Éê|·Éê·Éû|·Éõ·É°|·Éï·Éú|·Éï·Éö|·Éê·Éí|·É°·Éî|·Éù·É•|·Éú·Éù|·Éì·Éî)/i
    };
    parseMonthPatterns30 = {
      any: [/^·Éò·Éê/i, /^·Éó/i, /^·Éõ·Éê·É†/i, /^·Éê·Éû/i, /^·Éõ·Éê·Éò/i, /^·Éò?·Éï·Éú/i, /^·Éò?·Éï·Éö/i, /^·Éê·Éí/i, /^·É°/i, /^·Éù/i, /^·Éú/i, /^·Éì/i]
    };
    matchDayPatterns30 = {
      narrow: /^(·Éô·Éï|·Éù·É†|·É°·Éê|·Éù·Éó|·ÉÆ·É£|·Éû·Éê|·É®·Éê)/i,
      short: /^(·Éô·Éï·Éò|·Éù·É†·É®|·É°·Éê·Éõ|·Éù·Éó·ÉÆ|·ÉÆ·É£·Éó|·Éû·Éê·É†|·É®·Éê·Éë)/i,
      wide: /^(·Éô·Éï·Éò·É†·Éê|·Éù·É†·É®·Éê·Éë·Éê·Éó·Éò|·É°·Éê·Éõ·É®·Éê·Éë·Éê·Éó·Éò|·Éù·Éó·ÉÆ·É®·Éê·Éë·Éê·Éó·Éò|·ÉÆ·É£·Éó·É®·Éê·Éë·Éê·Éó·Éò|·Éû·Éê·É†·Éê·É°·Éô·Éî·Éï·Éò|·É®·Éê·Éë·Éê·Éó·Éò)/i
    };
    parseDayPatterns30 = {
      any: [/^·Éô·Éï/i, /^·Éù·É†/i, /^·É°·Éê/i, /^·Éù·Éó/i, /^·ÉÆ·É£/i, /^·Éû·Éê/i, /^·É®·Éê/i]
    };
    matchDayPeriodPatterns30 = {
      any: /^([ap]\.?\s?m\.?|·É®·É£·Éê·É¶|·Éì·Éò·Éö)/i
    };
    parseDayPeriodPatterns30 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^·É®·É£·Éê·É¶/i,
        noon: /^·É®·É£·Éê·Éì·É¶/i,
        morning: /^·Éì·Éò·Éö/i,
        afternoon: /·Éú·Éê·É®·É£·Éê·Éì·É¶·Éî·Éï·É°/i,
        evening: /·É°·Éê·É¶·Éê·Éõ·Éù/i,
        night: /·É¶·Éê·Éõ/i
      }
    };
    match30 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern30,
        parsePattern: parseOrdinalNumberPattern30,
        valueCallback: function valueCallback58(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns30,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns30,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns30,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns30,
        defaultParseWidth: "any",
        valueCallback: function valueCallback59(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns30,
        defaultMatchWidth: "any",
        parsePatterns: parseMonthPatterns30,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns30,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns30,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns30,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns30,
        defaultParseWidth: "any"
      })
    };
    match_default31 = match30;
  }
});

// node_modules/date-fns/esm/locale/ka/index.js
var ka_exports = {};
__export(ka_exports, {
  default: () => ka_default
});
var locale34, ka_default;
var init_ka = __esm({
  "node_modules/date-fns/esm/locale/ka/index.js"() {
    init_formatDistance33();
    init_formatLong34();
    init_formatRelative32();
    init_localize31();
    init_match31();
    locale34 = {
      code: "ka",
      formatDistance: formatDistance_default32,
      formatLong: formatLong_default34,
      formatRelative: formatRelative_default31,
      localize: localize_default31,
      match: match_default31,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    ka_default = locale34;
  }
});

// node_modules/date-fns/esm/locale/kk/_lib/formatDistance/index.js
function declension2(scheme, count) {
  if (scheme.one && count === 1)
    return scheme.one;
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
var formatDistanceLocale31, formatDistance64, formatDistance_default33;
var init_formatDistance34 = __esm({
  "node_modules/date-fns/esm/locale/kk/_lib/formatDistance/index.js"() {
    formatDistanceLocale31 = {
      lessThanXSeconds: {
        regular: {
          one: "1 —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑",
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∞–∑"
        },
        future: {
          one: "–±—ñ—Ä —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      xSeconds: {
        regular: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥"
        },
        past: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥ –±“±—Ä—ã–Ω"
        },
        future: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      halfAMinute: function halfAMinute3(options) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            return "–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç —ñ—à—ñ–Ω–¥–µ";
          } else {
            return "–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω";
          }
        }
        return "–∂–∞—Ä—Ç—ã –º–∏–Ω—É—Ç";
      },
      lessThanXMinutes: {
        regular: {
          one: "1 –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑",
          singularNominative: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∞–∑"
        },
        future: {
          one: "–º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º ",
          singularNominative: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–º"
        }
      },
      xMinutes: {
        regular: {
          singularNominative: "{{count}} –º–∏–Ω—É—Ç",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç"
        },
        past: {
          singularNominative: "{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç –±“±—Ä—ã–Ω"
        },
        future: {
          singularNominative: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      aboutXHours: {
        regular: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç"
        },
        future: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      xHours: {
        regular: {
          singularNominative: "{{count}} —Å–∞“ì–∞—Ç",
          singularGenitive: "{{count}} —Å–∞“ì–∞—Ç",
          pluralGenitive: "{{count}} —Å–∞“ì–∞—Ç"
        }
      },
      xDays: {
        regular: {
          singularNominative: "{{count}} –∫“Ø–Ω",
          singularGenitive: "{{count}} –∫“Ø–Ω",
          pluralGenitive: "{{count}} –∫“Ø–Ω"
        },
        future: {
          singularNominative: "{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} –∫“Ø–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω"
        }
      },
      aboutXWeeks: {
        type: "weeks",
        one: "—à–∞–º–∞–º–µ–Ω 1 –∞–ø—Ç–∞",
        other: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–ø—Ç–∞"
      },
      xWeeks: {
        type: "weeks",
        one: "1 –∞–ø—Ç–∞",
        other: "{{count}} –∞–ø—Ç–∞"
      },
      aboutXMonths: {
        regular: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π"
        },
        future: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∞–π–¥–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      xMonths: {
        regular: {
          singularNominative: "{{count}} –∞–π",
          singularGenitive: "{{count}} –∞–π",
          pluralGenitive: "{{count}} –∞–π"
        }
      },
      aboutXYears: {
        regular: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª"
        },
        future: {
          singularNominative: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "—à–∞–º–∞–º–µ–Ω {{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      xYears: {
        regular: {
          singularNominative: "{{count}} –∂—ã–ª",
          singularGenitive: "{{count}} –∂—ã–ª",
          pluralGenitive: "{{count}} –∂—ã–ª"
        },
        future: {
          singularNominative: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω"
        }
      },
      overXYears: {
        regular: {
          singularNominative: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º",
          singularGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º",
          pluralGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º"
        },
        future: {
          singularNominative: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º",
          singularGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º",
          pluralGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∞—Å—Ç–∞–º"
        }
      },
      almostXYears: {
        regular: {
          singularNominative: "{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω",
          singularGenitive: "{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω",
          pluralGenitive: "{{count}} –∂—ã–ª“ì–∞ –∂–∞“õ—ã–Ω"
        },
        future: {
          singularNominative: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          singularGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω",
          pluralGenitive: "{{count}} –∂—ã–ª–¥–∞–Ω –∫–µ–π—ñ–Ω"
        }
      }
    };
    formatDistance64 = function formatDistance65(token, count, options) {
      var tokenValue = formatDistanceLocale31[token];
      if (typeof tokenValue === "function")
        return tokenValue(options);
      if (tokenValue.type === "weeks") {
        return count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          if (tokenValue.future) {
            return declension2(tokenValue.future, count);
          } else {
            return declension2(tokenValue.regular, count) + " –∫–µ–π—ñ–Ω";
          }
        } else {
          if (tokenValue.past) {
            return declension2(tokenValue.past, count);
          } else {
            return declension2(tokenValue.regular, count) + " –±“±—Ä—ã–Ω";
          }
        }
      } else {
        return declension2(tokenValue.regular, count);
      }
    };
    formatDistance_default33 = formatDistance64;
  }
});

// node_modules/date-fns/esm/locale/kk/_lib/formatLong/index.js
var dateFormats35, timeFormats35, dateTimeFormats35, formatLong35, formatLong_default35;
var init_formatLong35 = __esm({
  "node_modules/date-fns/esm/locale/kk/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats35 = {
      full: "EEEE, do MMMM y '–∂.'",
      long: "do MMMM y '–∂.'",
      medium: "d MMM y '–∂.'",
      short: "dd.MM.yyyy"
    };
    timeFormats35 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats35 = {
      any: "{{date}}, {{time}}"
    };
    formatLong35 = {
      date: buildFormatLongFn({
        formats: dateFormats35,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats35,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats35,
        defaultWidth: "any"
      })
    };
    formatLong_default35 = formatLong35;
  }
});

// node_modules/date-fns/esm/locale/kk/_lib/formatRelative/index.js
function _lastWeek2(day) {
  var weekday = accusativeWeekdays4[day];
  return "'”©—Ç–∫–µ–Ω " + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
function thisWeek4(day) {
  var weekday = accusativeWeekdays4[day];
  return "'" + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
function _nextWeek2(day) {
  var weekday = accusativeWeekdays4[day];
  return "'–∫–µ–ª–µ—Å—ñ " + weekday + " —Å–∞“ì–∞—Ç' p'-–¥–µ'";
}
var accusativeWeekdays4, formatRelativeLocale31, formatRelative62, formatRelative_default32;
var init_formatRelative33 = __esm({
  "node_modules/date-fns/esm/locale/kk/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    accusativeWeekdays4 = ["–∂–µ–∫—Å–µ–Ω–±—ñ–¥–µ", "–¥“Ø–π—Å–µ–Ω–±—ñ–¥–µ", "—Å–µ–π—Å–µ–Ω–±—ñ–¥–µ", "—Å”ô—Ä—Å–µ–Ω–±—ñ–¥–µ", "–±–µ–π—Å–µ–Ω–±—ñ–¥–µ", "–∂“±–º–∞–¥–∞", "—Å–µ–Ω–±—ñ–¥–µ"];
    formatRelativeLocale31 = {
      lastWeek: function lastWeek6(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek4(day);
        } else {
          return _lastWeek2(day);
        }
      },
      yesterday: "'–∫–µ—à–µ —Å–∞“ì–∞—Ç' p'-–¥–µ'",
      today: "'–±“Ø–≥—ñ–Ω —Å–∞“ì–∞—Ç' p'-–¥–µ'",
      tomorrow: "'–µ—Ä—Ç–µ“£ —Å–∞“ì–∞—Ç' p'-–¥–µ'",
      nextWeek: function nextWeek6(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek4(day);
        } else {
          return _nextWeek2(day);
        }
      },
      other: "P"
    };
    formatRelative62 = function formatRelative63(token, date, baseDate, options) {
      var format2 = formatRelativeLocale31[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default32 = formatRelative62;
  }
});

// node_modules/date-fns/esm/locale/kk/_lib/localize/index.js
var eraValues31, quarterValues31, monthValues31, formattingMonthValues7, dayValues31, dayPeriodValues31, formattingDayPeriodValues25, suffixes, ordinalNumber61, localize31, localize_default32;
var init_localize32 = __esm({
  "node_modules/date-fns/esm/locale/kk/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues31 = {
      narrow: ["–±.–∑.–¥.", "–±.–∑."],
      abbreviated: ["–±.–∑.–¥.", "–±.–∑."],
      wide: ["–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω", "–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑"]
    };
    quarterValues31 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-—à—ñ —Ç–æ“õ.", "2-—à—ñ —Ç–æ“õ.", "3-—à—ñ —Ç–æ“õ.", "4-—à—ñ —Ç–æ“õ."],
      wide: ["1-—à—ñ —Ç–æ“õ—Å–∞–Ω", "2-—à—ñ —Ç–æ“õ—Å–∞–Ω", "3-—à—ñ —Ç–æ“õ—Å–∞–Ω", "4-—à—ñ —Ç–æ“õ—Å–∞–Ω"]
    };
    monthValues31 = {
      narrow: ["“ö", "–ê", "–ù", "–°", "–ú", "–ú", "–®", "–¢", "“ö", "“ö", "“ö", "–ñ"],
      abbreviated: ["“õ–∞“£", "–∞“õ–ø", "–Ω–∞—É", "—Å”ô—É", "–º–∞–º", "–º–∞—É", "—à—ñ–ª", "—Ç–∞–º", "“õ—ã—Ä", "“õ–∞–∑", "“õ–∞—Ä", "–∂–µ–ª"],
      wide: ["“õ–∞“£—Ç–∞—Ä", "–∞“õ–ø–∞–Ω", "–Ω–∞—É—Ä—ã–∑", "—Å”ô—É—ñ—Ä", "–º–∞–º—ã—Ä", "–º–∞—É—Å—ã–º", "—à—ñ–ª–¥–µ", "—Ç–∞–º—ã–∑", "“õ—ã—Ä–∫“Ø–π–µ–∫", "“õ–∞–∑–∞–Ω", "“õ–∞—Ä–∞—à–∞", "–∂–µ–ª—Ç–æ“õ—Å–∞–Ω"]
    };
    formattingMonthValues7 = {
      narrow: ["“ö", "–ê", "–ù", "–°", "–ú", "–ú", "–®", "–¢", "“ö", "“ö", "“ö", "–ñ"],
      abbreviated: ["“õ–∞“£", "–∞“õ–ø", "–Ω–∞—É", "—Å”ô—É", "–º–∞–º", "–º–∞—É", "—à—ñ–ª", "—Ç–∞–º", "“õ—ã—Ä", "“õ–∞–∑", "“õ–∞—Ä", "–∂–µ–ª"],
      wide: ["“õ–∞“£—Ç–∞—Ä", "–∞“õ–ø–∞–Ω", "–Ω–∞—É—Ä—ã–∑", "—Å”ô—É—ñ—Ä", "–º–∞–º—ã—Ä", "–º–∞—É—Å—ã–º", "—à—ñ–ª–¥–µ", "—Ç–∞–º—ã–∑", "“õ—ã—Ä–∫“Ø–π–µ–∫", "“õ–∞–∑–∞–Ω", "“õ–∞—Ä–∞—à–∞", "–∂–µ–ª—Ç–æ“õ—Å–∞–Ω"]
    };
    dayValues31 = {
      narrow: ["–ñ", "–î", "–°", "–°", "–ë", "–ñ", "–°"],
      short: ["–∂—Å", "–¥—Å", "—Å—Å", "—Å—Ä", "–±—Å", "–∂–º", "—Å–±"],
      abbreviated: ["–∂—Å", "–¥—Å", "—Å—Å", "—Å—Ä", "–±—Å", "–∂–º", "—Å–±"],
      wide: ["–∂–µ–∫—Å–µ–Ω–±—ñ", "–¥“Ø–π—Å–µ–Ω–±—ñ", "—Å–µ–π—Å–µ–Ω–±—ñ", "—Å”ô—Ä—Å–µ–Ω–±—ñ", "–±–µ–π—Å–µ–Ω–±—ñ", "–∂“±–º–∞", "—Å–µ–Ω–±—ñ"]
    };
    dayPeriodValues31 = {
      narrow: {
        am: "–¢–î",
        pm: "–¢–ö",
        midnight: "—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã",
        noon: "—Ç“Ø—Å",
        morning: "—Ç–∞“£",
        afternoon: "–∫“Ø–Ω–¥—ñ–∑",
        evening: "–∫–µ—à",
        night: "—Ç“Ø–Ω"
      },
      wide: {
        am: "–¢–î",
        pm: "–¢–ö",
        midnight: "—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã",
        noon: "—Ç“Ø—Å",
        morning: "—Ç–∞“£",
        afternoon: "–∫“Ø–Ω–¥—ñ–∑",
        evening: "–∫–µ—à",
        night: "—Ç“Ø–Ω"
      }
    };
    formattingDayPeriodValues25 = {
      narrow: {
        am: "–¢–î",
        pm: "–¢–ö",
        midnight: "—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞",
        noon: "—Ç“Ø—Å",
        morning: "—Ç–∞“£",
        afternoon: "–∫“Ø–Ω",
        evening: "–∫–µ—à",
        night: "—Ç“Ø–Ω"
      },
      wide: {
        am: "–¢–î",
        pm: "–¢–ö",
        midnight: "—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞",
        noon: "—Ç“Ø—Å—Ç–µ",
        morning: "—Ç–∞“£–µ—Ä—Ç–µ“£",
        afternoon: "–∫“Ø–Ω–¥—ñ–∑",
        evening: "–∫–µ—à—Ç–µ",
        night: "—Ç“Ø–Ω–¥–µ"
      }
    };
    suffixes = {
      0: "-—à—ñ",
      1: "-—à—ñ",
      2: "-—à—ñ",
      3: "-—à—ñ",
      4: "-—à—ñ",
      5: "-—à—ñ",
      6: "-—à—ã",
      7: "-—à—ñ",
      8: "-—à—ñ",
      9: "-—à—ã",
      10: "-—à—ã",
      20: "-—à—ã",
      30: "-—à—ã",
      40: "-—à—ã",
      50: "-—à—ñ",
      60: "-—à—ã",
      70: "-—à—ñ",
      80: "-—à—ñ",
      90: "-—à—ã",
      100: "-—à—ñ"
    };
    ordinalNumber61 = function ordinalNumber62(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      var mod10 = number % 10;
      var b = number >= 100 ? 100 : null;
      var suffix = suffixes[number] || suffixes[mod10] || b && suffixes[b] || "";
      return number + suffix;
    };
    localize31 = {
      ordinalNumber: ordinalNumber61,
      era: buildLocalizeFn({
        values: eraValues31,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues31,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback31(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues31,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues7,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues31,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues31,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues25,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default32 = localize31;
  }
});

// node_modules/date-fns/esm/locale/kk/_lib/match/index.js
var matchOrdinalNumberPattern31, parseOrdinalNumberPattern31, matchEraPatterns31, parseEraPatterns31, matchQuarterPatterns31, parseQuarterPatterns31, matchMonthPatterns31, parseMonthPatterns31, matchDayPatterns31, parseDayPatterns31, matchDayPeriodPatterns31, parseDayPeriodPatterns31, match31, match_default32;
var init_match32 = __esm({
  "node_modules/date-fns/esm/locale/kk/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern31 = /^(\d+)(-?(—à—ñ|—à—ã))?/i;
    parseOrdinalNumberPattern31 = /\d+/i;
    matchEraPatterns31 = {
      narrow: /^((–± )?–∑\.?\s?–¥\.?)/i,
      abbreviated: /^((–± )?–∑\.?\s?–¥\.?)/i,
      wide: /^(–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑“ì–∞ –¥–µ–π—ñ–Ω|–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑|–±—ñ–∑–¥—ñ“£ –∑–∞–º–∞–Ω—ã–º—ã–∑–¥–∞–Ω)/i
    };
    parseEraPatterns31 = {
      any: [/^–±/i, /^–∑/i]
    };
    matchQuarterPatterns31 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?—à—ñ)? —Ç–æ“õ.?/i,
      wide: /^[1234](-?—à—ñ)? —Ç–æ“õ—Å–∞–Ω/i
    };
    parseQuarterPatterns31 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns31 = {
      narrow: /^(“õ|–∞|–Ω|—Å|–º|–º–∞—É|—à|—Ç|“õ—ã—Ä|“õ–∞–∑|“õ–∞—Ä|–∂)/i,
      abbreviated: /^(“õ–∞“£|–∞“õ–ø|–Ω–∞—É|—Å”ô—É|–º–∞–º|–º–∞—É|—à—ñ–ª|—Ç–∞–º|“õ—ã—Ä|“õ–∞–∑|“õ–∞—Ä|–∂–µ–ª)/i,
      wide: /^(“õ–∞“£—Ç–∞—Ä|–∞“õ–ø–∞–Ω|–Ω–∞—É—Ä—ã–∑|—Å”ô—É—ñ—Ä|–º–∞–º—ã—Ä|–º–∞—É—Å—ã–º|—à—ñ–ª–¥–µ|—Ç–∞–º—ã–∑|“õ—ã—Ä–∫“Ø–π–µ–∫|“õ–∞–∑–∞–Ω|“õ–∞—Ä–∞—à–∞|–∂–µ–ª—Ç–æ“õ—Å–∞–Ω)/i
    };
    parseMonthPatterns31 = {
      narrow: [/^“õ/i, /^–∞/i, /^–Ω/i, /^—Å/i, /^–º/i, /^–º/i, /^—à/i, /^—Ç/i, /^“õ/i, /^“õ/i, /^“õ/i, /^–∂/i],
      abbreviated: [/^“õ–∞“£/i, /^–∞“õ–ø/i, /^–Ω–∞—É/i, /^—Å”ô—É/i, /^–º–∞–º/i, /^–º–∞—É/i, /^—à—ñ–ª/i, /^—Ç–∞–º/i, /^“õ—ã—Ä/i, /^“õ–∞–∑/i, /^“õ–∞—Ä/i, /^–∂–µ–ª/i],
      any: [/^“õ/i, /^–∞/i, /^–Ω/i, /^—Å/i, /^–º/i, /^–º/i, /^—à/i, /^—Ç/i, /^“õ/i, /^“õ/i, /^“õ/i, /^–∂/i]
    };
    matchDayPatterns31 = {
      narrow: /^(–∂|–¥|—Å|—Å|–±|–∂|—Å)/i,
      short: /^(–∂—Å|–¥—Å|—Å—Å|—Å—Ä|–±—Å|–∂–º|—Å–±)/i,
      wide: /^(–∂–µ–∫—Å–µ–Ω–±—ñ|–¥“Ø–π—Å–µ–Ω–±—ñ|—Å–µ–π—Å–µ–Ω–±—ñ|—Å”ô—Ä—Å–µ–Ω–±—ñ|–±–µ–π—Å–µ–Ω–±—ñ|–∂“±–º–∞|—Å–µ–Ω–±—ñ)/i
    };
    parseDayPatterns31 = {
      narrow: [/^–∂/i, /^–¥/i, /^—Å/i, /^—Å/i, /^–±/i, /^–∂/i, /^—Å/i],
      short: [/^–∂—Å/i, /^–¥—Å/i, /^—Å—Å/i, /^—Å—Ä/i, /^–±—Å/i, /^–∂–º/i, /^—Å–±/i],
      any: [/^–∂[–µ–∫]/i, /^–¥[“Ø–π]/i, /^—Åe[–π]/i, /^—Å”ô[—Ä]/i, /^–±[–µ–π]/i, /^–∂[“±–º]/i, /^—Å–µ[–Ω]/i]
    };
    matchDayPeriodPatterns31 = {
      narrow: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i,
      wide: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i,
      any: /^–¢\.?\s?[–î–ö]\.?|—Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞|((—Ç“Ø—Å—Ç–µ|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–¥–∞|—Ç–∞“£–µ—Ä—Ç–µ“£|—Ç–∞“£–º–µ–Ω|—Ç–∞“£|–∫“Ø–Ω–¥—ñ–∑|–∫“Ø–Ω|–∫–µ—à—Ç–µ|–∫–µ—à|—Ç“Ø–Ω–¥–µ|—Ç“Ø–Ω)\.?)/i
    };
    parseDayPeriodPatterns31 = {
      any: {
        am: /^–¢–î/i,
        pm: /^–¢–ö/i,
        midnight: /^—Ç“Ø–Ω –æ—Ä—Ç–∞/i,
        noon: /^–∫“Ø–Ω–¥—ñ–∑/i,
        morning: /—Ç–∞“£/i,
        afternoon: /—Ç“Ø—Å/i,
        evening: /–∫–µ—à/i,
        night: /—Ç“Ø–Ω/i
      }
    };
    match31 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern31,
        parsePattern: parseOrdinalNumberPattern31,
        valueCallback: function valueCallback60(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns31,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns31,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns31,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns31,
        defaultParseWidth: "any",
        valueCallback: function valueCallback61(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns31,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns31,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns31,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns31,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns31,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns31,
        defaultParseWidth: "any"
      })
    };
    match_default32 = match31;
  }
});

// node_modules/date-fns/esm/locale/kk/index.js
var kk_exports = {};
__export(kk_exports, {
  default: () => kk_default
});
var locale35, kk_default;
var init_kk = __esm({
  "node_modules/date-fns/esm/locale/kk/index.js"() {
    init_formatDistance34();
    init_formatLong35();
    init_formatRelative33();
    init_localize32();
    init_match32();
    locale35 = {
      code: "kk",
      formatDistance: formatDistance_default33,
      formatLong: formatLong_default35,
      formatRelative: formatRelative_default32,
      localize: localize_default32,
      match: match_default32,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    kk_default = locale35;
  }
});

// node_modules/date-fns/esm/locale/ko/_lib/formatDistance/index.js
var formatDistanceLocale32, formatDistance66, formatDistance_default34;
var init_formatDistance35 = __esm({
  "node_modules/date-fns/esm/locale/ko/_lib/formatDistance/index.js"() {
    formatDistanceLocale32 = {
      lessThanXSeconds: {
        one: "1Ï¥à ÎØ∏Îßå",
        other: "{{count}}Ï¥à ÎØ∏Îßå"
      },
      xSeconds: {
        one: "1Ï¥à",
        other: "{{count}}Ï¥à"
      },
      halfAMinute: "30Ï¥à",
      lessThanXMinutes: {
        one: "1Î∂Ñ ÎØ∏Îßå",
        other: "{{count}}Î∂Ñ ÎØ∏Îßå"
      },
      xMinutes: {
        one: "1Î∂Ñ",
        other: "{{count}}Î∂Ñ"
      },
      aboutXHours: {
        one: "ÏïΩ 1ÏãúÍ∞Ñ",
        other: "ÏïΩ {{count}}ÏãúÍ∞Ñ"
      },
      xHours: {
        one: "1ÏãúÍ∞Ñ",
        other: "{{count}}ÏãúÍ∞Ñ"
      },
      xDays: {
        one: "1Ïùº",
        other: "{{count}}Ïùº"
      },
      aboutXWeeks: {
        one: "ÏïΩ 1Ï£º",
        other: "ÏïΩ {{count}}Ï£º"
      },
      xWeeks: {
        one: "1Ï£º",
        other: "{{count}}Ï£º"
      },
      aboutXMonths: {
        one: "ÏïΩ 1Í∞úÏõî",
        other: "ÏïΩ {{count}}Í∞úÏõî"
      },
      xMonths: {
        one: "1Í∞úÏõî",
        other: "{{count}}Í∞úÏõî"
      },
      aboutXYears: {
        one: "ÏïΩ 1ÎÖÑ",
        other: "ÏïΩ {{count}}ÎÖÑ"
      },
      xYears: {
        one: "1ÎÖÑ",
        other: "{{count}}ÎÖÑ"
      },
      overXYears: {
        one: "1ÎÖÑ Ïù¥ÏÉÅ",
        other: "{{count}}ÎÖÑ Ïù¥ÏÉÅ"
      },
      almostXYears: {
        one: "Í±∞Ïùò 1ÎÖÑ",
        other: "Í±∞Ïùò {{count}}ÎÖÑ"
      }
    };
    formatDistance66 = function formatDistance67(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale32[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " ÌõÑ";
        } else {
          return result + " Ï†Ñ";
        }
      }
      return result;
    };
    formatDistance_default34 = formatDistance66;
  }
});

// node_modules/date-fns/esm/locale/ko/_lib/formatLong/index.js
var dateFormats36, timeFormats36, dateTimeFormats36, formatLong36, formatLong_default36;
var init_formatLong36 = __esm({
  "node_modules/date-fns/esm/locale/ko/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats36 = {
      full: "yÎÖÑ MÏõî dÏùº EEEE",
      long: "yÎÖÑ MÏõî dÏùº",
      medium: "y.MM.dd",
      short: "y.MM.dd"
    };
    timeFormats36 = {
      full: "a HÏãú mmÎ∂Ñ ssÏ¥à zzzz",
      long: "a H:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats36 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong36 = {
      date: buildFormatLongFn({
        formats: dateFormats36,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats36,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats36,
        defaultWidth: "full"
      })
    };
    formatLong_default36 = formatLong36;
  }
});

// node_modules/date-fns/esm/locale/ko/_lib/formatRelative/index.js
var formatRelativeLocale32, formatRelative64, formatRelative_default33;
var init_formatRelative34 = __esm({
  "node_modules/date-fns/esm/locale/ko/_lib/formatRelative/index.js"() {
    formatRelativeLocale32 = {
      lastWeek: "'ÏßÄÎÇú' eeee p",
      yesterday: "'Ïñ¥Ï†ú' p",
      today: "'Ïò§Îäò' p",
      tomorrow: "'ÎÇ¥Ïùº' p",
      nextWeek: "'Îã§Ïùå' eeee p",
      other: "P"
    };
    formatRelative64 = function formatRelative65(token, _date, _baseDate, _options) {
      return formatRelativeLocale32[token];
    };
    formatRelative_default33 = formatRelative64;
  }
});

// node_modules/date-fns/esm/locale/ko/_lib/localize/index.js
var eraValues32, quarterValues32, monthValues32, dayValues32, dayPeriodValues32, formattingDayPeriodValues26, ordinalNumber63, localize32, localize_default33;
var init_localize33 = __esm({
  "node_modules/date-fns/esm/locale/ko/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues32 = {
      narrow: ["BC", "AD"],
      abbreviated: ["BC", "AD"],
      wide: ["Í∏∞ÏõêÏ†Ñ", "ÏÑúÍ∏∞"]
    };
    quarterValues32 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1Î∂ÑÍ∏∞", "2Î∂ÑÍ∏∞", "3Î∂ÑÍ∏∞", "4Î∂ÑÍ∏∞"]
    };
    monthValues32 = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: ["1Ïõî", "2Ïõî", "3Ïõî", "4Ïõî", "5Ïõî", "6Ïõî", "7Ïõî", "8Ïõî", "9Ïõî", "10Ïõî", "11Ïõî", "12Ïõî"],
      wide: ["1Ïõî", "2Ïõî", "3Ïõî", "4Ïõî", "5Ïõî", "6Ïõî", "7Ïõî", "8Ïõî", "9Ïõî", "10Ïõî", "11Ïõî", "12Ïõî"]
    };
    dayValues32 = {
      narrow: ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"],
      short: ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"],
      abbreviated: ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"],
      wide: ["ÏùºÏöîÏùº", "ÏõîÏöîÏùº", "ÌôîÏöîÏùº", "ÏàòÏöîÏùº", "Î™©ÏöîÏùº", "Í∏àÏöîÏùº", "ÌÜ†ÏöîÏùº"]
    };
    dayPeriodValues32 = {
      narrow: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      },
      abbreviated: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      },
      wide: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      }
    };
    formattingDayPeriodValues26 = {
      narrow: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      },
      abbreviated: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      },
      wide: {
        am: "Ïò§Ï†Ñ",
        pm: "Ïò§ÌõÑ",
        midnight: "ÏûêÏ†ï",
        noon: "Ï†ïÏò§",
        morning: "ÏïÑÏπ®",
        afternoon: "Ïò§ÌõÑ",
        evening: "Ï†ÄÎÖÅ",
        night: "Î∞§"
      }
    };
    ordinalNumber63 = function ordinalNumber64(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = String(options === null || options === void 0 ? void 0 : options.unit);
      switch (unit) {
        case "minute":
        case "second":
          return String(number);
        case "date":
          return number + "Ïùº";
        default:
          return number + "Î≤àÏß∏";
      }
    };
    localize32 = {
      ordinalNumber: ordinalNumber63,
      era: buildLocalizeFn({
        values: eraValues32,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues32,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback32(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues32,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues32,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues32,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues26,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default33 = localize32;
  }
});

// node_modules/date-fns/esm/locale/ko/_lib/match/index.js
var matchOrdinalNumberPattern32, parseOrdinalNumberPattern32, matchEraPatterns32, parseEraPatterns32, matchQuarterPatterns32, parseQuarterPatterns32, matchMonthPatterns32, parseMonthPatterns32, matchDayPatterns32, parseDayPatterns32, matchDayPeriodPatterns32, parseDayPeriodPatterns32, match32, match_default33;
var init_match33 = __esm({
  "node_modules/date-fns/esm/locale/ko/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern32 = /^(\d+)(Ïùº|Î≤àÏß∏)?/i;
    parseOrdinalNumberPattern32 = /\d+/i;
    matchEraPatterns32 = {
      narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(Í∏∞ÏõêÏ†Ñ|ÏÑúÍ∏∞)/i
    };
    parseEraPatterns32 = {
      any: [/^(bc|Í∏∞ÏõêÏ†Ñ)/i, /^(ad|ÏÑúÍ∏∞)/i]
    };
    matchQuarterPatterns32 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]ÏÇ¨?Î∂ÑÍ∏∞/i
    };
    parseQuarterPatterns32 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns32 = {
      narrow: /^(1[012]|[123456789])/,
      abbreviated: /^(1[012]|[123456789])Ïõî/i,
      wide: /^(1[012]|[123456789])Ïõî/i
    };
    parseMonthPatterns32 = {
      any: [/^1Ïõî?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
    };
    matchDayPatterns32 = {
      narrow: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
      short: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
      abbreviated: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]/,
      wide: /^[ÏùºÏõîÌôîÏàòÎ™©Í∏àÌÜ†]ÏöîÏùº/
    };
    parseDayPatterns32 = {
      any: [/^Ïùº/, /^Ïõî/, /^Ìôî/, /^Ïàò/, /^Î™©/, /^Í∏à/, /^ÌÜ†/]
    };
    matchDayPeriodPatterns32 = {
      any: /^(am|pm|Ïò§Ï†Ñ|Ïò§ÌõÑ|ÏûêÏ†ï|Ï†ïÏò§|ÏïÑÏπ®|Ï†ÄÎÖÅ|Î∞§)/i
    };
    parseDayPeriodPatterns32 = {
      any: {
        am: /^(am|Ïò§Ï†Ñ)/i,
        pm: /^(pm|Ïò§ÌõÑ)/i,
        midnight: /^ÏûêÏ†ï/i,
        noon: /^Ï†ïÏò§/i,
        morning: /^ÏïÑÏπ®/i,
        afternoon: /^Ïò§ÌõÑ/i,
        evening: /^Ï†ÄÎÖÅ/i,
        night: /^Î∞§/i
      }
    };
    match32 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern32,
        parsePattern: parseOrdinalNumberPattern32,
        valueCallback: function valueCallback62(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns32,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns32,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns32,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns32,
        defaultParseWidth: "any",
        valueCallback: function valueCallback63(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns32,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns32,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns32,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns32,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns32,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns32,
        defaultParseWidth: "any"
      })
    };
    match_default33 = match32;
  }
});

// node_modules/date-fns/esm/locale/ko/index.js
var ko_exports = {};
__export(ko_exports, {
  default: () => ko_default
});
var locale36, ko_default;
var init_ko = __esm({
  "node_modules/date-fns/esm/locale/ko/index.js"() {
    init_formatDistance35();
    init_formatLong36();
    init_formatRelative34();
    init_localize33();
    init_match33();
    locale36 = {
      code: "ko",
      formatDistance: formatDistance_default34,
      formatLong: formatLong_default36,
      formatRelative: formatRelative_default33,
      localize: localize_default33,
      match: match_default33,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    ko_default = locale36;
  }
});

// node_modules/date-fns/esm/locale/lt/_lib/formatDistance/index.js
function special(number) {
  return number % 10 === 0 || number > 10 && number < 20;
}
function forms(key) {
  return translations2[key].split("_");
}
var translations2, translateSeconds, translateSingular, translate, formatDistanceLocale33, formatDistance68, formatDistance_default35;
var init_formatDistance36 = __esm({
  "node_modules/date-fns/esm/locale/lt/_lib/formatDistance/index.js"() {
    translations2 = {
      xseconds_other: "sekundƒó_sekund≈æi≈≥_sekundes",
      xminutes_one: "minutƒó_minutƒós_minutƒô",
      xminutes_other: "minutƒós_minuƒçi≈≥_minutes",
      xhours_one: "valanda_valandos_valandƒÖ",
      xhours_other: "valandos_valand≈≥_valandas",
      xdays_one: "diena_dienos_dienƒÖ",
      xdays_other: "dienos_dien≈≥_dienas",
      xweeks_one: "savaitƒó_savaitƒós_savaitƒô",
      xweeks_other: "savaitƒós_savaiƒçi≈≥_savaites",
      xmonths_one: "mƒónuo_mƒónesio_mƒónesƒØ",
      xmonths_other: "mƒónesiai_mƒónesi≈≥_mƒónesius",
      xyears_one: "metai_met≈≥_metus",
      xyears_other: "metai_met≈≥_metus",
      about: "apie",
      over: "daugiau nei",
      almost: "beveik",
      lessthan: "ma≈æiau nei"
    };
    translateSeconds = function translateSeconds2(_number, addSuffix, _key, isFuture2) {
      if (!addSuffix) {
        return "kelios sekundƒós";
      } else {
        return isFuture2 ? "keli≈≥ sekund≈æi≈≥" : "kelias sekundes";
      }
    };
    translateSingular = function translateSingular2(_number, addSuffix, key, isFuture2) {
      return !addSuffix ? forms(key)[0] : isFuture2 ? forms(key)[1] : forms(key)[2];
    };
    translate = function translate2(number, addSuffix, key, isFuture2) {
      var result = number + " ";
      if (number === 1) {
        return result + translateSingular(number, addSuffix, key, isFuture2);
      } else if (!addSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
      } else {
        if (isFuture2) {
          return result + forms(key)[1];
        } else {
          return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
      }
    };
    formatDistanceLocale33 = {
      lessThanXSeconds: {
        one: translateSeconds,
        other: translate
      },
      xSeconds: {
        one: translateSeconds,
        other: translate
      },
      halfAMinute: "pusƒó minutƒós",
      lessThanXMinutes: {
        one: translateSingular,
        other: translate
      },
      xMinutes: {
        one: translateSingular,
        other: translate
      },
      aboutXHours: {
        one: translateSingular,
        other: translate
      },
      xHours: {
        one: translateSingular,
        other: translate
      },
      xDays: {
        one: translateSingular,
        other: translate
      },
      aboutXWeeks: {
        one: translateSingular,
        other: translate
      },
      xWeeks: {
        one: translateSingular,
        other: translate
      },
      aboutXMonths: {
        one: translateSingular,
        other: translate
      },
      xMonths: {
        one: translateSingular,
        other: translate
      },
      aboutXYears: {
        one: translateSingular,
        other: translate
      },
      xYears: {
        one: translateSingular,
        other: translate
      },
      overXYears: {
        one: translateSingular,
        other: translate
      },
      almostXYears: {
        one: translateSingular,
        other: translate
      }
    };
    formatDistance68 = function formatDistance69(token, count, options) {
      var adverb = token.match(/about|over|almost|lessthan/i);
      var unit = adverb ? token.replace(adverb[0], "") : token;
      var isFuture2 = (options === null || options === void 0 ? void 0 : options.comparison) !== void 0 && options.comparison > 0;
      var result;
      var tokenValue = formatDistanceLocale33[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + "_one", isFuture2);
      } else {
        result = tokenValue.other(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + "_other", isFuture2);
      }
      if (adverb) {
        var _key2 = adverb[0].toLowerCase();
        result = translations2[_key2] + " " + result;
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "po " + result;
        } else {
          return "prie≈° " + result;
        }
      }
      return result;
    };
    formatDistance_default35 = formatDistance68;
  }
});

// node_modules/date-fns/esm/locale/lt/_lib/formatLong/index.js
var dateFormats37, timeFormats37, dateTimeFormats37, formatLong37, formatLong_default37;
var init_formatLong37 = __esm({
  "node_modules/date-fns/esm/locale/lt/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats37 = {
      full: "y 'm'. MMMM d 'd'., EEEE",
      long: "y 'm'. MMMM d 'd'.",
      medium: "y-MM-dd",
      short: "y-MM-dd"
    };
    timeFormats37 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats37 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong37 = {
      date: buildFormatLongFn({
        formats: dateFormats37,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats37,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats37,
        defaultWidth: "full"
      })
    };
    formatLong_default37 = formatLong37;
  }
});

// node_modules/date-fns/esm/locale/lt/_lib/formatRelative/index.js
var formatRelativeLocale33, formatRelative66, formatRelative_default34;
var init_formatRelative35 = __esm({
  "node_modules/date-fns/esm/locale/lt/_lib/formatRelative/index.js"() {
    formatRelativeLocale33 = {
      lastWeek: "'PraƒójusƒØ' eeee p",
      yesterday: "'Vakar' p",
      today: "'≈†iandien' p",
      tomorrow: "'Rytoj' p",
      nextWeek: "eeee p",
      other: "P"
    };
    formatRelative66 = function formatRelative67(token, _date, _baseDate, _options) {
      return formatRelativeLocale33[token];
    };
    formatRelative_default34 = formatRelative66;
  }
});

// node_modules/date-fns/esm/locale/lt/_lib/localize/index.js
var eraValues33, quarterValues33, formattingQuarterValues2, monthValues33, formattingMonthValues8, dayValues33, formattingDayValues2, dayPeriodValues33, formattingDayPeriodValues27, ordinalNumber65, localize33, localize_default34;
var init_localize34 = __esm({
  "node_modules/date-fns/esm/locale/lt/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues33 = {
      narrow: ["pr. Kr.", "po Kr."],
      abbreviated: ["pr. Kr.", "po Kr."],
      wide: ["prie≈° Krist≈≥", "po Kristaus"]
    };
    quarterValues33 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I ketv.", "II ketv.", "III ketv.", "IV ketv."],
      wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
    };
    formattingQuarterValues2 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I k.", "II k.", "III k.", "IV k."],
      wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
    };
    monthValues33 = {
      narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
      abbreviated: ["saus.", "vas.", "kov.", "bal.", "geg.", "bir≈æ.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."],
      wide: ["sausis", "vasaris", "kovas", "balandis", "gegu≈æƒó", "bir≈æelis", "liepa", "rugpj≈´tis", "rugsƒójis", "spalis", "lapkritis", "gruodis"]
    };
    formattingMonthValues8 = {
      narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
      abbreviated: ["saus.", "vas.", "kov.", "bal.", "geg.", "bir≈æ.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."],
      wide: ["sausio", "vasario", "kovo", "baland≈æio", "gegu≈æƒós", "bir≈æelio", "liepos", "rugpj≈´ƒçio", "rugsƒójo", "spalio", "lapkriƒçio", "gruod≈æio"]
    };
    dayValues33 = {
      narrow: ["S", "P", "A", "T", "K", "P", "≈†"],
      short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "≈†t"],
      abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "≈°t"],
      wide: ["sekmadienis", "pirmadienis", "antradienis", "treƒçiadienis", "ketvirtadienis", "penktadienis", "≈°e≈°tadienis"]
    };
    formattingDayValues2 = {
      narrow: ["S", "P", "A", "T", "K", "P", "≈†"],
      short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "≈†t"],
      abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "≈°t"],
      wide: ["sekmadienƒØ", "pirmadienƒØ", "antradienƒØ", "treƒçiadienƒØ", "ketvirtadienƒØ", "penktadienƒØ", "≈°e≈°tadienƒØ"]
    };
    dayPeriodValues33 = {
      narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      },
      abbreviated: {
        am: "prie≈°piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      },
      wide: {
        am: "prie≈°piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      }
    };
    formattingDayPeriodValues27 = {
      narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietƒó",
        evening: "vakaras",
        night: "naktis"
      },
      abbreviated: {
        am: "prie≈°piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietƒó",
        evening: "vakaras",
        night: "naktis"
      },
      wide: {
        am: "prie≈°piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietƒó",
        evening: "vakaras",
        night: "naktis"
      }
    };
    ordinalNumber65 = function ordinalNumber66(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "-oji";
    };
    localize33 = {
      ordinalNumber: ordinalNumber65,
      era: buildLocalizeFn({
        values: eraValues33,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues33,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues2,
        defaultFormattingWidth: "wide",
        argumentCallback: function argumentCallback33(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues33,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues8,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues33,
        defaultWidth: "wide",
        formattingValues: formattingDayValues2,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues33,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues27,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default34 = localize33;
  }
});

// node_modules/date-fns/esm/locale/lt/_lib/match/index.js
var matchOrdinalNumberPattern33, parseOrdinalNumberPattern33, matchEraPatterns33, parseEraPatterns33, matchQuarterPatterns33, parseQuarterPatterns33, matchMonthPatterns33, parseMonthPatterns33, matchDayPatterns33, parseDayPatterns33, matchDayPeriodPatterns33, parseDayPeriodPatterns33, match33, match_default34;
var init_match34 = __esm({
  "node_modules/date-fns/esm/locale/lt/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern33 = /^(\d+)(-oji)?/i;
    parseOrdinalNumberPattern33 = /\d+/i;
    matchEraPatterns33 = {
      narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
      abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|m≈´s≈≥ eroje)/i,
      wide: /^(prie≈° Krist≈≥|prie≈° m≈´s≈≥ erƒÖ|po Kristaus|m≈´s≈≥ eroje)/i
    };
    parseEraPatterns33 = {
      wide: [/prie≈°/i, /(po|m≈´s≈≥)/i],
      any: [/^pr/i, /^(po|m)/i]
    };
    matchQuarterPatterns33 = {
      narrow: /^([1234])/i,
      abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
      wide: /^(I|II|III|IV)\s?ketvirtis/i
    };
    parseQuarterPatterns33 = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/I$/i, /II$/i, /III/i, /IV/i]
    };
    matchMonthPatterns33 = {
      narrow: /^[svkbglr]/i,
      abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|bir≈æ\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
      wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|baland≈æ?i(s|o)|gegu≈æƒós?|bir≈æeli(s|o)|liep(a|os)|rugpj≈´(t|ƒç)i(s|o)|rugsƒój(is|o)|spali(s|o)|lapkri(t|ƒç)i(s|o)|gruod≈æ?i(s|o))/i
    };
    parseMonthPatterns33 = {
      narrow: [/^s/i, /^v/i, /^k/i, /^b/i, /^g/i, /^b/i, /^l/i, /^r/i, /^r/i, /^s/i, /^l/i, /^g/i],
      any: [/^saus/i, /^vas/i, /^kov/i, /^bal/i, /^geg/i, /^bir≈æ/i, /^liep/i, /^rugp/i, /^rugs/i, /^spal/i, /^lapkr/i, /^gruod/i]
    };
    matchDayPatterns33 = {
      narrow: /^[spatk≈°]/i,
      short: /^(sk|pr|an|tr|kt|pn|≈°t)/i,
      abbreviated: /^(sk|pr|an|tr|kt|pn|≈°t)/i,
      wide: /^(sekmadien(is|ƒØ)|pirmadien(is|ƒØ)|antradien(is|ƒØ)|treƒçiadien(is|ƒØ)|ketvirtadien(is|ƒØ)|penktadien(is|ƒØ)|≈°e≈°tadien(is|ƒØ))/i
    };
    parseDayPatterns33 = {
      narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^≈°/i],
      wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^≈°e/i],
      any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^≈°t/i]
    };
    matchDayPeriodPatterns33 = {
      narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietƒó)|vakaras|naktis)/i,
      any: /^(prie≈°piet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietƒó)|vakaras|naktis)/i
    };
    parseDayPeriodPatterns33 = {
      narrow: {
        am: /^pr/i,
        pm: /^pop./i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietƒó)/i,
        evening: /vakaras/i,
        night: /naktis/i
      },
      any: {
        am: /^pr/i,
        pm: /^popiet$/i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietƒó)/i,
        evening: /vakaras/i,
        night: /naktis/i
      }
    };
    match33 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern33,
        parsePattern: parseOrdinalNumberPattern33,
        valueCallback: function valueCallback64(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns33,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns33,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns33,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns33,
        defaultParseWidth: "any",
        valueCallback: function valueCallback65(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns33,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns33,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns33,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns33,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns33,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns33,
        defaultParseWidth: "any"
      })
    };
    match_default34 = match33;
  }
});

// node_modules/date-fns/esm/locale/lt/index.js
var lt_exports = {};
__export(lt_exports, {
  default: () => lt_default
});
var locale37, lt_default;
var init_lt = __esm({
  "node_modules/date-fns/esm/locale/lt/index.js"() {
    init_formatDistance36();
    init_formatLong37();
    init_formatRelative35();
    init_localize34();
    init_match34();
    locale37 = {
      code: "lt",
      formatDistance: formatDistance_default35,
      formatLong: formatLong_default37,
      formatRelative: formatRelative_default34,
      localize: localize_default34,
      match: match_default34,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    lt_default = locale37;
  }
});

// node_modules/date-fns/esm/locale/lv/_lib/formatDistance/index.js
function buildLocalizeTokenFn2(schema) {
  return function(count, options) {
    if (count === 1) {
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.one[0].replace("{{time}}", schema.one[2]);
      } else {
        return schema.one[0].replace("{{time}}", schema.one[1]);
      }
    } else {
      var rem = count % 10 === 1 && count % 100 !== 11;
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.other[0].replace("{{time}}", rem ? schema.other[3] : schema.other[4]).replace("{{count}}", String(count));
      } else {
        return schema.other[0].replace("{{time}}", rem ? schema.other[1] : schema.other[2]).replace("{{count}}", String(count));
      }
    }
  };
}
var formatDistanceLocale34, formatDistance70, formatDistance_default36;
var init_formatDistance37 = __esm({
  "node_modules/date-fns/esm/locale/lv/_lib/formatDistance/index.js"() {
    formatDistanceLocale34 = {
      lessThanXSeconds: buildLocalizeTokenFn2({
        one: ["mazƒÅk par {{time}}", "sekundi", "sekundi"],
        other: ["mazƒÅk nekƒÅ {{count}} {{time}}", "sekunde", "sekundes", "sekundes", "sekundƒìm"]
      }),
      xSeconds: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "sekunde", "sekundes"],
        other: ["{{count}} {{time}}", "sekunde", "sekundes", "sekundes", "sekundƒìm"]
      }),
      halfAMinute: function halfAMinute4(_count, options) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          return "pusmin≈´tes";
        } else {
          return "pusmin≈´te";
        }
      },
      lessThanXMinutes: buildLocalizeTokenFn2({
        one: ["mazƒÅk par {{time}}", "min≈´ti", "min≈´ti"],
        other: ["mazƒÅk nekƒÅ {{count}} {{time}}", "min≈´te", "min≈´tes", "min≈´tes", "min≈´tƒìm"]
      }),
      xMinutes: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "min≈´te", "min≈´tes"],
        other: ["{{count}} {{time}}", "min≈´te", "min≈´tes", "min≈´tes", "min≈´tƒìm"]
      }),
      aboutXHours: buildLocalizeTokenFn2({
        one: ["apmƒìram 1 {{time}}", "stunda", "stundas"],
        other: ["apmƒìram {{count}} {{time}}", "stunda", "stundas", "stundas", "stundƒÅm"]
      }),
      xHours: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "stunda", "stundas"],
        other: ["{{count}} {{time}}", "stunda", "stundas", "stundas", "stundƒÅm"]
      }),
      xDays: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "diena", "dienas"],
        other: ["{{count}} {{time}}", "diena", "dienas", "dienas", "dienƒÅm"]
      }),
      aboutXWeeks: buildLocalizeTokenFn2({
        one: ["apmƒìram 1 {{time}}", "nedƒìƒºa", "nedƒìƒºas"],
        other: ["apmƒìram {{count}} {{time}}", "nedƒìƒºa", "nedƒìƒºu", "nedƒìƒºas", "nedƒìƒºƒÅm"]
      }),
      xWeeks: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "nedƒìƒºa", "nedƒìƒºas"],
        other: [
          "{{count}} {{time}}",
          // TODO
          "nedƒìƒºa",
          "nedƒìƒºu",
          "nedƒìƒºas",
          "nedƒìƒºƒÅm"
        ]
      }),
      aboutXMonths: buildLocalizeTokenFn2({
        one: ["apmƒìram 1 {{time}}", "mƒìnesis", "mƒìne≈°a"],
        other: ["apmƒìram {{count}} {{time}}", "mƒìnesis", "mƒìne≈°i", "mƒìne≈°a", "mƒìne≈°iem"]
      }),
      xMonths: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "mƒìnesis", "mƒìne≈°a"],
        other: ["{{count}} {{time}}", "mƒìnesis", "mƒìne≈°i", "mƒìne≈°a", "mƒìne≈°iem"]
      }),
      aboutXYears: buildLocalizeTokenFn2({
        one: ["apmƒìram 1 {{time}}", "gads", "gada"],
        other: ["apmƒìram {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      xYears: buildLocalizeTokenFn2({
        one: ["1 {{time}}", "gads", "gada"],
        other: ["{{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      overXYears: buildLocalizeTokenFn2({
        one: ["ilgƒÅk par 1 {{time}}", "gadu", "gadu"],
        other: ["vairƒÅk nekƒÅ {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      almostXYears: buildLocalizeTokenFn2({
        one: ["gandrƒ´z 1 {{time}}", "gads", "gada"],
        other: ["vairƒÅk nekƒÅ {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      })
    };
    formatDistance70 = function formatDistance71(token, count, options) {
      var result = formatDistanceLocale34[token](count, options);
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "pƒìc " + result;
        } else {
          return "pirms " + result;
        }
      }
      return result;
    };
    formatDistance_default36 = formatDistance70;
  }
});

// node_modules/date-fns/esm/locale/lv/_lib/formatLong/index.js
var dateFormats38, timeFormats38, dateTimeFormats38, formatLong38, formatLong_default38;
var init_formatLong38 = __esm({
  "node_modules/date-fns/esm/locale/lv/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats38 = {
      full: "EEEE, y. 'gada' d. MMMM",
      long: "y. 'gada' d. MMMM",
      medium: "dd.MM.y.",
      short: "dd.MM.y."
    };
    timeFormats38 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats38 = {
      full: "{{date}} 'plkst.' {{time}}",
      long: "{{date}} 'plkst.' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong38 = {
      date: buildFormatLongFn({
        formats: dateFormats38,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats38,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats38,
        defaultWidth: "full"
      })
    };
    formatLong_default38 = formatLong38;
  }
});

// node_modules/date-fns/esm/locale/lv/_lib/formatRelative/index.js
var weekdays3, formatRelativeLocale34, formatRelative68, formatRelative_default35;
var init_formatRelative36 = __esm({
  "node_modules/date-fns/esm/locale/lv/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    weekdays3 = ["svƒìtdienƒÅ", "pirmdienƒÅ", "otrdienƒÅ", "tre≈°dienƒÅ", "ceturtdienƒÅ", "piektdienƒÅ", "sestdienƒÅ"];
    formatRelativeLocale34 = {
      lastWeek: function lastWeek7(date, baseDate, options) {
        if (isSameUTCWeek(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }
        var weekday = weekdays3[date.getUTCDay()];
        return "'PagƒÅju≈°ƒÅ " + weekday + " plkst.' p";
      },
      yesterday: "'Vakar plkst.' p",
      today: "'≈†odien plkst.' p",
      tomorrow: "'Rƒ´t plkst.' p",
      nextWeek: function nextWeek7(date, baseDate, options) {
        if (isSameUTCWeek(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }
        var weekday = weekdays3[date.getUTCDay()];
        return "'NƒÅkamajƒÅ " + weekday + " plkst.' p";
      },
      other: "P"
    };
    formatRelative68 = function formatRelative69(token, date, baseDate, options) {
      var format2 = formatRelativeLocale34[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default35 = formatRelative68;
  }
});

// node_modules/date-fns/esm/locale/lv/_lib/localize/index.js
var eraValues34, quarterValues34, formattingQuarterValues3, monthValues34, formattingMonthValues9, dayValues34, formattingDayValues3, dayPeriodValues34, formattingDayPeriodValues28, ordinalNumber67, localize34, localize_default35;
var init_localize35 = __esm({
  "node_modules/date-fns/esm/locale/lv/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues34 = {
      narrow: ["p.m.ƒì", "m.ƒì"],
      abbreviated: ["p. m. ƒì.", "m. ƒì."],
      wide: ["pirms m≈´su ƒìras", "m≈´su ƒìrƒÅ"]
    };
    quarterValues34 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
      wide: ["pirmais ceturksnis", "otrais ceturksnis", "tre≈°ais ceturksnis", "ceturtais ceturksnis"]
    };
    formattingQuarterValues3 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
      wide: ["pirmajƒÅ ceturksnƒ´", "otrajƒÅ ceturksnƒ´", "tre≈°ajƒÅ ceturksnƒ´", "ceturtajƒÅ ceturksnƒ´"]
    };
    monthValues34 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["janv.", "febr.", "marts", "apr.", "maijs", "j≈´n.", "j≈´l.", "aug.", "sept.", "okt.", "nov.", "dec."],
      wide: ["janvƒÅris", "februƒÅris", "marts", "aprƒ´lis", "maijs", "j≈´nijs", "j≈´lijs", "augusts", "septembris", "oktobris", "novembris", "decembris"]
    };
    formattingMonthValues9 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["janv.", "febr.", "martƒÅ", "apr.", "maijs", "j≈´n.", "j≈´l.", "aug.", "sept.", "okt.", "nov.", "dec."],
      wide: ["janvƒÅrƒ´", "februƒÅrƒ´", "martƒÅ", "aprƒ´lƒ´", "maijƒÅ", "j≈´nijƒÅ", "j≈´lijƒÅ", "augustƒÅ", "septembrƒ´", "oktobrƒ´", "novembrƒ´", "decembrƒ´"]
    };
    dayValues34 = {
      narrow: ["S", "P", "O", "T", "C", "P", "S"],
      short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
      abbreviated: ["svƒìtd.", "pirmd.", "otrd.", "tre≈°d.", "ceturtd.", "piektd.", "sestd."],
      wide: ["svƒìtdiena", "pirmdiena", "otrdiena", "tre≈°diena", "ceturtdiena", "piektdiena", "sestdiena"]
    };
    formattingDayValues3 = {
      narrow: ["S", "P", "O", "T", "C", "P", "S"],
      short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
      abbreviated: ["svƒìtd.", "pirmd.", "otrd.", "tre≈°d.", "ceturtd.", "piektd.", "sestd."],
      wide: ["svƒìtdienƒÅ", "pirmdienƒÅ", "otrdienƒÅ", "tre≈°dienƒÅ", "ceturtdienƒÅ", "piektdienƒÅ", "sestdienƒÅ"]
    };
    dayPeriodValues34 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rƒ´ts",
        afternoon: "diena",
        evening: "vakars",
        night: "nakts"
      },
      abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rƒ´ts",
        afternoon: "pƒìcpusd.",
        evening: "vakars",
        night: "nakts"
      },
      wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnakts",
        noon: "pusdienlaiks",
        morning: "rƒ´ts",
        afternoon: "pƒìcpusdiena",
        evening: "vakars",
        night: "nakts"
      }
    };
    formattingDayPeriodValues28 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rƒ´tƒÅ",
        afternoon: "dienƒÅ",
        evening: "vakarƒÅ",
        night: "naktƒ´"
      },
      abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rƒ´tƒÅ",
        afternoon: "pƒìcpusd.",
        evening: "vakarƒÅ",
        night: "naktƒ´"
      },
      wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnaktƒ´",
        noon: "pusdienlaikƒÅ",
        morning: "rƒ´tƒÅ",
        afternoon: "pƒìcpusdienƒÅ",
        evening: "vakarƒÅ",
        night: "naktƒ´"
      }
    };
    ordinalNumber67 = function ordinalNumber68(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize34 = {
      ordinalNumber: ordinalNumber67,
      era: buildLocalizeFn({
        values: eraValues34,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues34,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues3,
        defaultFormattingWidth: "wide",
        argumentCallback: function argumentCallback34(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues34,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues9,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues34,
        defaultWidth: "wide",
        formattingValues: formattingDayValues3,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues34,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues28,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default35 = localize34;
  }
});

// node_modules/date-fns/esm/locale/lv/_lib/match/index.js
var matchOrdinalNumberPattern34, parseOrdinalNumberPattern34, matchEraPatterns34, parseEraPatterns34, matchQuarterPatterns34, parseQuarterPatterns34, matchMonthPatterns34, parseMonthPatterns34, matchDayPatterns34, parseDayPatterns34, matchDayPeriodPatterns34, parseDayPeriodPatterns34, match34, match_default35;
var init_match35 = __esm({
  "node_modules/date-fns/esm/locale/lv/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern34 = /^(\d+)\./i;
    parseOrdinalNumberPattern34 = /\d+/i;
    matchEraPatterns34 = {
      narrow: /^(p\.m\.ƒì|m\.ƒì)/i,
      abbreviated: /^(p\. m\. ƒì\.|m\. ƒì\.)/i,
      wide: /^(pirms m≈´su ƒìras|m≈´su ƒìrƒÅ)/i
    };
    parseEraPatterns34 = {
      any: [/^p/i, /^m/i]
    };
    matchQuarterPatterns34 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](\. cet\.)/i,
      wide: /^(pirma(is|jƒÅ)|otra(is|jƒÅ)|tre≈°a(is|jƒÅ)|ceturta(is|jƒÅ)) ceturksn(is|ƒ´)/i
    };
    parseQuarterPatterns34 = {
      narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
      abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
      wide: [/^p/i, /^o/i, /^t/i, /^c/i]
    };
    matchMonthPatterns34 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|j≈´n\.|j≈´l\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
      wide: /^(janvƒÅr(is|ƒ´)|februƒÅr(is|ƒ´)|mart[sƒÅ]|aprƒ´l(is|ƒ´)|maij[sƒÅ]|j≈´nij[sƒÅ]|j≈´lij[sƒÅ]|august[sƒÅ]|septembr(is|ƒ´)|oktobr(is|ƒ´)|novembr(is|ƒ´)|decembr(is|ƒ´))/i
    };
    parseMonthPatterns34 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^j≈´n/i, /^j≈´l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns34 = {
      narrow: /^[spotc]/i,
      short: /^(sv|pi|o|t|c|pk|s)/i,
      abbreviated: /^(svƒìtd\.|pirmd\.|otrd.\|tre≈°d\.|ceturtd\.|piektd\.|sestd\.)/i,
      wide: /^(svƒìtdien(a|ƒÅ)|pirmdien(a|ƒÅ)|otrdien(a|ƒÅ)|tre≈°dien(a|ƒÅ)|ceturtdien(a|ƒÅ)|piektdien(a|ƒÅ)|sestdien(a|ƒÅ))/i
    };
    parseDayPatterns34 = {
      narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
      any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
    };
    matchDayPeriodPatterns34 = {
      narrow: /^(am|pm|pusn\.|pusd\.|rƒ´t(s|ƒÅ)|dien(a|ƒÅ)|vakar(s|ƒÅ)|nakt(s|ƒ´))/,
      abbreviated: /^(am|pm|pusn\.|pusd\.|rƒ´t(s|ƒÅ)|pƒìcpusd\.|vakar(s|ƒÅ)|nakt(s|ƒ´))/,
      wide: /^(am|pm|pusnakt(s|ƒ´)|pusdienlaik(s|ƒÅ)|rƒ´t(s|ƒÅ)|pƒìcpusdien(a|ƒÅ)|vakar(s|ƒÅ)|nakt(s|ƒ´))/i
    };
    parseDayPeriodPatterns34 = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^pusn/i,
        noon: /^pusd/i,
        morning: /^r/i,
        afternoon: /^(d|pƒìc)/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    match34 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern34,
        parsePattern: parseOrdinalNumberPattern34,
        valueCallback: function valueCallback66(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns34,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns34,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns34,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns34,
        defaultParseWidth: "wide",
        valueCallback: function valueCallback67(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns34,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns34,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns34,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns34,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns34,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns34,
        defaultParseWidth: "any"
      })
    };
    match_default35 = match34;
  }
});

// node_modules/date-fns/esm/locale/lv/index.js
var lv_exports = {};
__export(lv_exports, {
  default: () => lv_default
});
var locale38, lv_default;
var init_lv = __esm({
  "node_modules/date-fns/esm/locale/lv/index.js"() {
    init_formatDistance37();
    init_formatLong38();
    init_formatRelative36();
    init_localize35();
    init_match35();
    locale38 = {
      code: "lv",
      formatDistance: formatDistance_default36,
      formatLong: formatLong_default38,
      formatRelative: formatRelative_default35,
      localize: localize_default35,
      match: match_default35,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    lv_default = locale38;
  }
});

// node_modules/date-fns/esm/locale/ms/_lib/formatDistance/index.js
var formatDistanceLocale35, formatDistance72, formatDistance_default37;
var init_formatDistance38 = __esm({
  "node_modules/date-fns/esm/locale/ms/_lib/formatDistance/index.js"() {
    formatDistanceLocale35 = {
      lessThanXSeconds: {
        one: "kurang dari 1 saat",
        other: "kurang dari {{count}} saat"
      },
      xSeconds: {
        one: "1 saat",
        other: "{{count}} saat"
      },
      halfAMinute: "setengah minit",
      lessThanXMinutes: {
        one: "kurang dari 1 minit",
        other: "kurang dari {{count}} minit"
      },
      xMinutes: {
        one: "1 minit",
        other: "{{count}} minit"
      },
      aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
      },
      xHours: {
        one: "1 jam",
        other: "{{count}} jam"
      },
      xDays: {
        one: "1 hari",
        other: "{{count}} hari"
      },
      aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
      },
      xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
      },
      aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
      },
      xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
      },
      aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
      },
      xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
      },
      overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
      },
      almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
      }
    };
    formatDistance72 = function formatDistance73(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale35[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dalam masa " + result;
        } else {
          return result + " yang lalu";
        }
      }
      return result;
    };
    formatDistance_default37 = formatDistance72;
  }
});

// node_modules/date-fns/esm/locale/ms/_lib/formatLong/index.js
var dateFormats39, timeFormats39, dateTimeFormats39, formatLong39, formatLong_default39;
var init_formatLong39 = __esm({
  "node_modules/date-fns/esm/locale/ms/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats39 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "d/M/yyyy"
    };
    timeFormats39 = {
      full: "HH.mm.ss",
      long: "HH.mm.ss",
      medium: "HH.mm",
      short: "HH.mm"
    };
    dateTimeFormats39 = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong39 = {
      date: buildFormatLongFn({
        formats: dateFormats39,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats39,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats39,
        defaultWidth: "full"
      })
    };
    formatLong_default39 = formatLong39;
  }
});

// node_modules/date-fns/esm/locale/ms/_lib/formatRelative/index.js
var formatRelativeLocale35, formatRelative70, formatRelative_default36;
var init_formatRelative37 = __esm({
  "node_modules/date-fns/esm/locale/ms/_lib/formatRelative/index.js"() {
    formatRelativeLocale35 = {
      lastWeek: "eeee 'lepas pada jam' p",
      yesterday: "'Semalam pada jam' p",
      today: "'Hari ini pada jam' p",
      tomorrow: "'Esok pada jam' p",
      nextWeek: "eeee 'pada jam' p",
      other: "P"
    };
    formatRelative70 = function formatRelative71(token, _date, _baseDate, _options) {
      return formatRelativeLocale35[token];
    };
    formatRelative_default36 = formatRelative70;
  }
});

// node_modules/date-fns/esm/locale/ms/_lib/localize/index.js
var eraValues35, quarterValues35, monthValues35, dayValues35, dayPeriodValues35, formattingDayPeriodValues29, ordinalNumber69, localize35, localize_default36;
var init_localize36 = __esm({
  "node_modules/date-fns/esm/locale/ms/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues35 = {
      narrow: ["SM", "M"],
      abbreviated: ["SM", "M"],
      wide: ["Sebelum Masihi", "Masihi"]
    };
    quarterValues35 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["S1", "S2", "S3", "S4"],
      wide: ["Suku pertama", "Suku kedua", "Suku ketiga", "Suku keempat"]
    };
    monthValues35 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"],
      wide: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"]
    };
    dayValues35 = {
      narrow: ["A", "I", "S", "R", "K", "J", "S"],
      short: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
      abbreviated: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
      wide: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"]
    };
    dayPeriodValues35 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "tgh malam",
        noon: "tgh hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      }
    };
    formattingDayPeriodValues29 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      }
    };
    ordinalNumber69 = function ordinalNumber70(dirtyNumber, _options) {
      return "ke-" + Number(dirtyNumber);
    };
    localize35 = {
      ordinalNumber: ordinalNumber69,
      era: buildLocalizeFn({
        values: eraValues35,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues35,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback35(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues35,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues35,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues35,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues29,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default36 = localize35;
  }
});

// node_modules/date-fns/esm/locale/ms/_lib/match/index.js
var matchOrdinalNumberPattern35, parseOrdinalNumberPattern35, matchEraPatterns35, parseEraPatterns35, matchQuarterPatterns35, parseQuarterPatterns35, matchMonthPatterns35, parseMonthPatterns35, matchDayPatterns35, parseDayPatterns35, matchDayPeriodPatterns35, parseDayPeriodPatterns35, match35, match_default36;
var init_match36 = __esm({
  "node_modules/date-fns/esm/locale/ms/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern35 = /^ke-(\d+)?/i;
    parseOrdinalNumberPattern35 = /petama|\d+/i;
    matchEraPatterns35 = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
      wide: /^(sebelum masihi|masihi)/i
    };
    parseEraPatterns35 = {
      any: [/^s/i, /^(m)/i]
    };
    matchQuarterPatterns35 = {
      narrow: /^[1234]/i,
      abbreviated: /^S[1234]/i,
      wide: /Suku (pertama|kedua|ketiga|keempat)/i
    };
    parseQuarterPatterns35 = {
      any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
    };
    matchMonthPatterns35 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
      wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
    };
    parseMonthPatterns35 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
    };
    matchDayPatterns35 = {
      narrow: /^[aisrkj]/i,
      short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
    };
    parseDayPatterns35 = {
      narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    matchDayPeriodPatterns35 = {
      narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
    };
    parseDayPeriodPatterns35 = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pa/i,
        afternoon: /tengah h/i,
        evening: /pe/i,
        night: /m/i
      }
    };
    match35 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern35,
        parsePattern: parseOrdinalNumberPattern35,
        valueCallback: function valueCallback68(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns35,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns35,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns35,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns35,
        defaultParseWidth: "any",
        valueCallback: function valueCallback69(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns35,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns35,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns35,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns35,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns35,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns35,
        defaultParseWidth: "any"
      })
    };
    match_default36 = match35;
  }
});

// node_modules/date-fns/esm/locale/ms/index.js
var ms_exports = {};
__export(ms_exports, {
  default: () => ms_default
});
var locale39, ms_default;
var init_ms = __esm({
  "node_modules/date-fns/esm/locale/ms/index.js"() {
    init_formatDistance38();
    init_formatLong39();
    init_formatRelative37();
    init_localize36();
    init_match36();
    locale39 = {
      code: "ms",
      formatDistance: formatDistance_default37,
      formatLong: formatLong_default39,
      formatRelative: formatRelative_default36,
      localize: localize_default36,
      match: match_default36,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    ms_default = locale39;
  }
});

// node_modules/date-fns/esm/locale/nb/_lib/formatDistance/index.js
var formatDistanceLocale36, formatDistance74, formatDistance_default38;
var init_formatDistance39 = __esm({
  "node_modules/date-fns/esm/locale/nb/_lib/formatDistance/index.js"() {
    formatDistanceLocale36 = {
      lessThanXSeconds: {
        one: "mindre enn ett sekund",
        other: "mindre enn {{count}} sekunder"
      },
      xSeconds: {
        one: "ett sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "et halvt minutt",
      lessThanXMinutes: {
        one: "mindre enn ett minutt",
        other: "mindre enn {{count}} minutter"
      },
      xMinutes: {
        one: "ett minutt",
        other: "{{count}} minutter"
      },
      aboutXHours: {
        one: "omtrent en time",
        other: "omtrent {{count}} timer"
      },
      xHours: {
        one: "en time",
        other: "{{count}} timer"
      },
      xDays: {
        one: "en dag",
        other: "{{count}} dager"
      },
      aboutXWeeks: {
        one: "omtrent en uke",
        other: "omtrent {{count}} uker"
      },
      xWeeks: {
        one: "en uke",
        other: "{{count}} uker"
      },
      aboutXMonths: {
        one: "omtrent en m√•ned",
        other: "omtrent {{count}} m√•neder"
      },
      xMonths: {
        one: "en m√•ned",
        other: "{{count}} m√•neder"
      },
      aboutXYears: {
        one: "omtrent ett √•r",
        other: "omtrent {{count}} √•r"
      },
      xYears: {
        one: "ett √•r",
        other: "{{count}} √•r"
      },
      overXYears: {
        one: "over ett √•r",
        other: "over {{count}} √•r"
      },
      almostXYears: {
        one: "nesten ett √•r",
        other: "nesten {{count}} √•r"
      }
    };
    formatDistance74 = function formatDistance75(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale36[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " siden";
        }
      }
      return result;
    };
    formatDistance_default38 = formatDistance74;
  }
});

// node_modules/date-fns/esm/locale/nb/_lib/formatLong/index.js
var dateFormats40, timeFormats40, dateTimeFormats40, formatLong40, formatLong_default40;
var init_formatLong40 = __esm({
  "node_modules/date-fns/esm/locale/nb/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats40 = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    timeFormats40 = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats40 = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong40 = {
      date: buildFormatLongFn({
        formats: dateFormats40,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats40,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats40,
        defaultWidth: "full"
      })
    };
    formatLong_default40 = formatLong40;
  }
});

// node_modules/date-fns/esm/locale/nb/_lib/formatRelative/index.js
var formatRelativeLocale36, formatRelative72, formatRelative_default37;
var init_formatRelative38 = __esm({
  "node_modules/date-fns/esm/locale/nb/_lib/formatRelative/index.js"() {
    formatRelativeLocale36 = {
      lastWeek: "'forrige' eeee 'kl.' p",
      yesterday: "'i g√•r kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    formatRelative72 = function formatRelative73(token, _date, _baseDate, _options) {
      return formatRelativeLocale36[token];
    };
    formatRelative_default37 = formatRelative72;
  }
});

// node_modules/date-fns/esm/locale/nb/_lib/localize/index.js
var eraValues36, quarterValues36, monthValues36, dayValues36, dayPeriodValues36, ordinalNumber71, localize36, localize_default37;
var init_localize37 = __esm({
  "node_modules/date-fns/esm/locale/nb/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues36 = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["f√∏r Kristus", "etter Kristus"]
    };
    quarterValues36 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues36 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
      wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
    };
    dayValues36 = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["s√∏", "ma", "ti", "on", "to", "fr", "l√∏"],
      abbreviated: ["s√∏n", "man", "tir", "ons", "tor", "fre", "l√∏r"],
      wide: ["s√∏ndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "l√∏rdag"]
    };
    dayPeriodValues36 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• etterm.",
        evening: "p√• kvelden",
        night: "p√• natten"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• etterm.",
        evening: "p√• kvelden",
        night: "p√• natten"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morgenen",
        afternoon: "p√• ettermiddagen",
        evening: "p√• kvelden",
        night: "p√• natten"
      }
    };
    ordinalNumber71 = function ordinalNumber72(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize36 = {
      ordinalNumber: ordinalNumber71,
      era: buildLocalizeFn({
        values: eraValues36,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues36,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback36(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues36,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues36,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues36,
        defaultWidth: "wide"
      })
    };
    localize_default37 = localize36;
  }
});

// node_modules/date-fns/esm/locale/nb/_lib/match/index.js
var matchOrdinalNumberPattern36, parseOrdinalNumberPattern36, matchEraPatterns36, parseEraPatterns36, matchQuarterPatterns36, parseQuarterPatterns36, matchMonthPatterns36, parseMonthPatterns36, matchDayPatterns36, parseDayPatterns36, matchDayPeriodPatterns36, parseDayPeriodPatterns36, match36, match_default37;
var init_match37 = __esm({
  "node_modules/date-fns/esm/locale/nb/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern36 = /^(\d+)\.?/i;
    parseOrdinalNumberPattern36 = /\d+/i;
    matchEraPatterns36 = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(f√∏r Kristus|f√∏r v√•r tid|etter Kristus|v√•r tid)/i
    };
    parseEraPatterns36 = {
      any: [/^f/i, /^e/i]
    };
    matchQuarterPatterns36 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    parseQuarterPatterns36 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns36 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    parseMonthPatterns36 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns36 = {
      narrow: /^[smtofl]/i,
      short: /^(s√∏|ma|ti|on|to|fr|l√∏)/i,
      abbreviated: /^(s√∏n|man|tir|ons|tor|fre|l√∏r)/i,
      wide: /^(s√∏ndag|mandag|tirsdag|onsdag|torsdag|fredag|l√∏rdag)/i
    };
    parseDayPatterns36 = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    matchDayPeriodPatterns36 = {
      narrow: /^(midnatt|middag|(p√•) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(p√•) (morgenen|ettermiddagen|kvelden|natten))/i
    };
    parseDayPeriodPatterns36 = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgen/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    match36 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern36,
        parsePattern: parseOrdinalNumberPattern36,
        valueCallback: function valueCallback70(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns36,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns36,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns36,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns36,
        defaultParseWidth: "any",
        valueCallback: function valueCallback71(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns36,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns36,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns36,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns36,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns36,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns36,
        defaultParseWidth: "any"
      })
    };
    match_default37 = match36;
  }
});

// node_modules/date-fns/esm/locale/nb/index.js
var nb_exports = {};
__export(nb_exports, {
  default: () => nb_default
});
var locale40, nb_default;
var init_nb = __esm({
  "node_modules/date-fns/esm/locale/nb/index.js"() {
    init_formatDistance39();
    init_formatLong40();
    init_formatRelative38();
    init_localize37();
    init_match37();
    locale40 = {
      code: "nb",
      formatDistance: formatDistance_default38,
      formatLong: formatLong_default40,
      formatRelative: formatRelative_default37,
      localize: localize_default37,
      match: match_default37,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    nb_default = locale40;
  }
});

// node_modules/date-fns/esm/locale/nl/_lib/formatDistance/index.js
var formatDistanceLocale37, formatDistance76, formatDistance_default39;
var init_formatDistance40 = __esm({
  "node_modules/date-fns/esm/locale/nl/_lib/formatDistance/index.js"() {
    formatDistanceLocale37 = {
      lessThanXSeconds: {
        one: "minder dan een seconde",
        other: "minder dan {{count}} seconden"
      },
      xSeconds: {
        one: "1 seconde",
        other: "{{count}} seconden"
      },
      halfAMinute: "een halve minuut",
      lessThanXMinutes: {
        one: "minder dan een minuut",
        other: "minder dan {{count}} minuten"
      },
      xMinutes: {
        one: "een minuut",
        other: "{{count}} minuten"
      },
      aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} uur"
      },
      xHours: {
        one: "1 uur",
        other: "{{count}} uur"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dagen"
      },
      aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weken"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weken"
      },
      aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maanden"
      },
      xMonths: {
        one: "1 maand",
        other: "{{count}} maanden"
      },
      aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
      },
      xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
      },
      overXYears: {
        one: "meer dan 1 jaar",
        other: "meer dan {{count}} jaar"
      },
      almostXYears: {
        one: "bijna 1 jaar",
        other: "bijna {{count}} jaar"
      }
    };
    formatDistance76 = function formatDistance77(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale37[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "over " + result;
        } else {
          return result + " geleden";
        }
      }
      return result;
    };
    formatDistance_default39 = formatDistance76;
  }
});

// node_modules/date-fns/esm/locale/nl/_lib/formatLong/index.js
var dateFormats41, timeFormats41, dateTimeFormats41, formatLong41, formatLong_default41;
var init_formatLong41 = __esm({
  "node_modules/date-fns/esm/locale/nl/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats41 = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd-MM-y"
    };
    timeFormats41 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats41 = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong41 = {
      date: buildFormatLongFn({
        formats: dateFormats41,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats41,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats41,
        defaultWidth: "full"
      })
    };
    formatLong_default41 = formatLong41;
  }
});

// node_modules/date-fns/esm/locale/nl/_lib/formatRelative/index.js
var formatRelativeLocale37, formatRelative74, formatRelative_default38;
var init_formatRelative39 = __esm({
  "node_modules/date-fns/esm/locale/nl/_lib/formatRelative/index.js"() {
    formatRelativeLocale37 = {
      lastWeek: "'afgelopen' eeee 'om' p",
      yesterday: "'gisteren om' p",
      today: "'vandaag om' p",
      tomorrow: "'morgen om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    formatRelative74 = function formatRelative75(token, _date, _baseDate, _options) {
      return formatRelativeLocale37[token];
    };
    formatRelative_default38 = formatRelative74;
  }
});

// node_modules/date-fns/esm/locale/nl/_lib/localize/index.js
var eraValues37, quarterValues37, monthValues37, dayValues37, dayPeriodValues37, ordinalNumber73, localize37, localize_default38;
var init_localize38 = __esm({
  "node_modules/date-fns/esm/locale/nl/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues37 = {
      narrow: ["v.C.", "n.C."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["voor Christus", "na Christus"]
    };
    quarterValues37 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"]
    };
    monthValues37 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan.", "feb.", "mrt.", "apr.", "mei", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."],
      wide: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"]
    };
    dayValues37 = {
      narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
      short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
      abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
      wide: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"]
    };
    dayPeriodValues37 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      }
    };
    ordinalNumber73 = function ordinalNumber74(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "e";
    };
    localize37 = {
      ordinalNumber: ordinalNumber73,
      era: buildLocalizeFn({
        values: eraValues37,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues37,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback37(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues37,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues37,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues37,
        defaultWidth: "wide"
      })
    };
    localize_default38 = localize37;
  }
});

// node_modules/date-fns/esm/locale/nl/_lib/match/index.js
var matchOrdinalNumberPattern37, parseOrdinalNumberPattern37, matchEraPatterns37, parseEraPatterns37, matchQuarterPatterns37, parseQuarterPatterns37, matchMonthPatterns37, parseMonthPatterns37, matchDayPatterns37, parseDayPatterns37, matchDayPeriodPatterns37, parseDayPeriodPatterns37, match37, match_default38;
var init_match38 = __esm({
  "node_modules/date-fns/esm/locale/nl/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern37 = /^(\d+)e?/i;
    parseOrdinalNumberPattern37 = /\d+/i;
    matchEraPatterns37 = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?Chr\.?)/,
      wide: /^((voor|na) Christus)/
    };
    parseEraPatterns37 = {
      any: [/^v/, /^n/]
    };
    matchQuarterPatterns37 = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e kwartaal/i
    };
    parseQuarterPatterns37 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns37 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
    };
    parseMonthPatterns37 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
    };
    matchDayPatterns37 = {
      narrow: /^[zmdwv]/i,
      short: /^(zo|ma|di|wo|do|vr|za)/i,
      abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
      wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
    };
    parseDayPatterns37 = {
      narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
      any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
    };
    matchDayPeriodPatterns37 = {
      any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
    };
    parseDayPeriodPatterns37 = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
      }
    };
    match37 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern37,
        parsePattern: parseOrdinalNumberPattern37,
        valueCallback: function valueCallback72(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns37,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns37,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns37,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns37,
        defaultParseWidth: "any",
        valueCallback: function valueCallback73(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns37,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns37,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns37,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns37,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns37,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns37,
        defaultParseWidth: "any"
      })
    };
    match_default38 = match37;
  }
});

// node_modules/date-fns/esm/locale/nl/index.js
var nl_exports = {};
__export(nl_exports, {
  default: () => nl_default
});
var locale41, nl_default;
var init_nl = __esm({
  "node_modules/date-fns/esm/locale/nl/index.js"() {
    init_formatDistance40();
    init_formatLong41();
    init_formatRelative39();
    init_localize38();
    init_match38();
    locale41 = {
      code: "nl",
      formatDistance: formatDistance_default39,
      formatLong: formatLong_default41,
      formatRelative: formatRelative_default38,
      localize: localize_default38,
      match: match_default38,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    nl_default = locale41;
  }
});

// node_modules/date-fns/esm/locale/nn/_lib/formatDistance/index.js
var formatDistanceLocale38, wordMapping, formatDistance78, formatDistance_default40;
var init_formatDistance41 = __esm({
  "node_modules/date-fns/esm/locale/nn/_lib/formatDistance/index.js"() {
    formatDistanceLocale38 = {
      lessThanXSeconds: {
        one: "mindre enn eitt sekund",
        other: "mindre enn {{count}} sekund"
      },
      xSeconds: {
        one: "eitt sekund",
        other: "{{count}} sekund"
      },
      halfAMinute: "eit halvt minutt",
      lessThanXMinutes: {
        one: "mindre enn eitt minutt",
        other: "mindre enn {{count}} minutt"
      },
      xMinutes: {
        one: "eitt minutt",
        other: "{{count}} minutt"
      },
      aboutXHours: {
        one: "omtrent ein time",
        other: "omtrent {{count}} timar"
      },
      xHours: {
        one: "ein time",
        other: "{{count}} timar"
      },
      xDays: {
        one: "ein dag",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "omtrent ei veke",
        other: "omtrent {{count}} veker"
      },
      xWeeks: {
        one: "ei veke",
        other: "{{count}} veker"
      },
      aboutXMonths: {
        one: "omtrent ein m√•nad",
        other: "omtrent {{count}} m√•nader"
      },
      xMonths: {
        one: "ein m√•nad",
        other: "{{count}} m√•nader"
      },
      aboutXYears: {
        one: "omtrent eitt √•r",
        other: "omtrent {{count}} √•r"
      },
      xYears: {
        one: "eitt √•r",
        other: "{{count}} √•r"
      },
      overXYears: {
        one: "over eitt √•r",
        other: "over {{count}} √•r"
      },
      almostXYears: {
        one: "nesten eitt √•r",
        other: "nesten {{count}} √•r"
      }
    };
    wordMapping = ["null", "ein", "to", "tre", "fire", "fem", "seks", "sju", "√•tte", "ni", "ti", "elleve", "tolv"];
    formatDistance78 = function formatDistance79(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale38[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        if (options && options.onlyNumeric) {
          result = tokenValue.other.replace("{{count}}", String(count));
        } else {
          result = tokenValue.other.replace("{{count}}", count < 13 ? wordMapping[count] : String(count));
        }
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " sidan";
        }
      }
      return result;
    };
    formatDistance_default40 = formatDistance78;
  }
});

// node_modules/date-fns/esm/locale/nn/_lib/formatLong/index.js
var dateFormats42, timeFormats42, dateTimeFormats42, formatLong42, formatLong_default42;
var init_formatLong42 = __esm({
  "node_modules/date-fns/esm/locale/nn/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats42 = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    timeFormats42 = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats42 = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong42 = {
      date: buildFormatLongFn({
        formats: dateFormats42,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats42,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats42,
        defaultWidth: "full"
      })
    };
    formatLong_default42 = formatLong42;
  }
});

// node_modules/date-fns/esm/locale/nn/_lib/formatRelative/index.js
var formatRelativeLocale38, formatRelative76, formatRelative_default39;
var init_formatRelative40 = __esm({
  "node_modules/date-fns/esm/locale/nn/_lib/formatRelative/index.js"() {
    formatRelativeLocale38 = {
      lastWeek: "'f√∏rre' eeee 'kl.' p",
      yesterday: "'i g√•r kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    formatRelative76 = function formatRelative77(token, _date, _baseDate, _options) {
      return formatRelativeLocale38[token];
    };
    formatRelative_default39 = formatRelative76;
  }
});

// node_modules/date-fns/esm/locale/nn/_lib/localize/index.js
var eraValues38, quarterValues38, monthValues38, dayValues38, dayPeriodValues38, ordinalNumber75, localize38, localize_default39;
var init_localize39 = __esm({
  "node_modules/date-fns/esm/locale/nn/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues38 = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["f√∏r Kristus", "etter Kristus"]
    };
    quarterValues38 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues38 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
      wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
    };
    dayValues38 = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["su", "m√•", "ty", "on", "to", "fr", "lau"],
      abbreviated: ["sun", "m√•n", "tys", "ons", "tor", "fre", "laur"],
      wide: ["sundag", "m√•ndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"]
    };
    dayPeriodValues38 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• etterm.",
        evening: "p√• kvelden",
        night: "p√• natta"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• etterm.",
        evening: "p√• kvelden",
        night: "p√• natta"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morgonen",
        afternoon: "p√• ettermiddagen",
        evening: "p√• kvelden",
        night: "p√• natta"
      }
    };
    ordinalNumber75 = function ordinalNumber76(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize38 = {
      ordinalNumber: ordinalNumber75,
      era: buildLocalizeFn({
        values: eraValues38,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues38,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback38(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues38,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues38,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues38,
        defaultWidth: "wide"
      })
    };
    localize_default39 = localize38;
  }
});

// node_modules/date-fns/esm/locale/nn/_lib/match/index.js
var matchOrdinalNumberPattern38, parseOrdinalNumberPattern38, matchEraPatterns38, parseEraPatterns38, matchQuarterPatterns38, parseQuarterPatterns38, matchMonthPatterns38, parseMonthPatterns38, matchDayPatterns38, parseDayPatterns38, matchDayPeriodPatterns38, parseDayPeriodPatterns38, match38, match_default39;
var init_match39 = __esm({
  "node_modules/date-fns/esm/locale/nn/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern38 = /^(\d+)\.?/i;
    parseOrdinalNumberPattern38 = /\d+/i;
    matchEraPatterns38 = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(f√∏r Kristus|f√∏r v√•r tid|etter Kristus|v√•r tid)/i
    };
    parseEraPatterns38 = {
      any: [/^f/i, /^e/i]
    };
    matchQuarterPatterns38 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    parseQuarterPatterns38 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns38 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    parseMonthPatterns38 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns38 = {
      narrow: /^[smtofl]/i,
      short: /^(su|m√•|ty|on|to|fr|la)/i,
      abbreviated: /^(sun|m√•n|tys|ons|tor|fre|laur)/i,
      wide: /^(sundag|m√•ndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
    };
    parseDayPatterns38 = {
      any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    matchDayPeriodPatterns38 = {
      narrow: /^(midnatt|middag|(p√•) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(p√•) (morgonen|ettermiddagen|kvelden|natta))/i
    };
    parseDayPeriodPatterns38 = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    match38 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern38,
        parsePattern: parseOrdinalNumberPattern38,
        valueCallback: function valueCallback74(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns38,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns38,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns38,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns38,
        defaultParseWidth: "any",
        valueCallback: function valueCallback75(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns38,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns38,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns38,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns38,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns38,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns38,
        defaultParseWidth: "any"
      })
    };
    match_default39 = match38;
  }
});

// node_modules/date-fns/esm/locale/nn/index.js
var nn_exports = {};
__export(nn_exports, {
  default: () => nn_default
});
var locale42, nn_default;
var init_nn = __esm({
  "node_modules/date-fns/esm/locale/nn/index.js"() {
    init_formatDistance41();
    init_formatLong42();
    init_formatRelative40();
    init_localize39();
    init_match39();
    locale42 = {
      code: "nn",
      formatDistance: formatDistance_default40,
      formatLong: formatLong_default42,
      formatRelative: formatRelative_default39,
      localize: localize_default39,
      match: match_default39,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    nn_default = locale42;
  }
});

// node_modules/date-fns/esm/locale/pl/_lib/formatDistance/index.js
function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }
  var rem100 = count % 100;
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }
  var rem10 = rem100 % 10;
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function declension3(scheme, count, time) {
  var group = declensionGroup(scheme, count);
  var finalText = typeof group === "string" ? group : group[time];
  return finalText.replace("{{count}}", String(count));
}
var formatDistanceLocale39, formatDistance80, formatDistance_default41;
var init_formatDistance42 = __esm({
  "node_modules/date-fns/esm/locale/pl/_lib/formatDistance/index.js"() {
    formatDistanceLocale39 = {
      lessThanXSeconds: {
        one: {
          regular: "mniej ni≈º sekunda",
          past: "mniej ni≈º sekundƒô",
          future: "mniej ni≈º sekundƒô"
        },
        twoFour: "mniej ni≈º {{count}} sekundy",
        other: "mniej ni≈º {{count}} sekund"
      },
      xSeconds: {
        one: {
          regular: "sekunda",
          past: "sekundƒô",
          future: "sekundƒô"
        },
        twoFour: "{{count}} sekundy",
        other: "{{count}} sekund"
      },
      halfAMinute: {
        one: "p√≥≈Ç minuty",
        twoFour: "p√≥≈Ç minuty",
        other: "p√≥≈Ç minuty"
      },
      lessThanXMinutes: {
        one: {
          regular: "mniej ni≈º minuta",
          past: "mniej ni≈º minutƒô",
          future: "mniej ni≈º minutƒô"
        },
        twoFour: "mniej ni≈º {{count}} minuty",
        other: "mniej ni≈º {{count}} minut"
      },
      xMinutes: {
        one: {
          regular: "minuta",
          past: "minutƒô",
          future: "minutƒô"
        },
        twoFour: "{{count}} minuty",
        other: "{{count}} minut"
      },
      aboutXHours: {
        one: {
          regular: "oko≈Ço godziny",
          past: "oko≈Ço godziny",
          future: "oko≈Ço godzinƒô"
        },
        twoFour: "oko≈Ço {{count}} godziny",
        other: "oko≈Ço {{count}} godzin"
      },
      xHours: {
        one: {
          regular: "godzina",
          past: "godzinƒô",
          future: "godzinƒô"
        },
        twoFour: "{{count}} godziny",
        other: "{{count}} godzin"
      },
      xDays: {
        one: {
          regular: "dzie≈Ñ",
          past: "dzie≈Ñ",
          future: "1 dzie≈Ñ"
        },
        twoFour: "{{count}} dni",
        other: "{{count}} dni"
      },
      aboutXWeeks: {
        one: "oko≈Ço tygodnia",
        twoFour: "oko≈Ço {{count}} tygodni",
        other: "oko≈Ço {{count}} tygodni"
      },
      xWeeks: {
        one: "tydzie≈Ñ",
        twoFour: "{{count}} tygodnie",
        other: "{{count}} tygodni"
      },
      aboutXMonths: {
        one: "oko≈Ço miesiƒÖc",
        twoFour: "oko≈Ço {{count}} miesiƒÖce",
        other: "oko≈Ço {{count}} miesiƒôcy"
      },
      xMonths: {
        one: "miesiƒÖc",
        twoFour: "{{count}} miesiƒÖce",
        other: "{{count}} miesiƒôcy"
      },
      aboutXYears: {
        one: "oko≈Ço rok",
        twoFour: "oko≈Ço {{count}} lata",
        other: "oko≈Ço {{count}} lat"
      },
      xYears: {
        one: "rok",
        twoFour: "{{count}} lata",
        other: "{{count}} lat"
      },
      overXYears: {
        one: "ponad rok",
        twoFour: "ponad {{count}} lata",
        other: "ponad {{count}} lat"
      },
      almostXYears: {
        one: "prawie rok",
        twoFour: "prawie {{count}} lata",
        other: "prawie {{count}} lat"
      }
    };
    formatDistance80 = function formatDistance81(token, count, options) {
      var scheme = formatDistanceLocale39[token];
      if (!(options !== null && options !== void 0 && options.addSuffix)) {
        return declension3(scheme, count, "regular");
      }
      if (options.comparison && options.comparison > 0) {
        return "za " + declension3(scheme, count, "future");
      } else {
        return declension3(scheme, count, "past") + " temu";
      }
    };
    formatDistance_default41 = formatDistance80;
  }
});

// node_modules/date-fns/esm/locale/pl/_lib/formatLong/index.js
var dateFormats43, timeFormats43, dateTimeFormats43, formatLong43, formatLong_default43;
var init_formatLong43 = __esm({
  "node_modules/date-fns/esm/locale/pl/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats43 = {
      full: "EEEE, do MMMM y",
      long: "do MMMM y",
      medium: "do MMM y",
      short: "dd.MM.y"
    };
    timeFormats43 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats43 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong43 = {
      date: buildFormatLongFn({
        formats: dateFormats43,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats43,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats43,
        defaultWidth: "full"
      })
    };
    formatLong_default43 = formatLong43;
  }
});

// node_modules/date-fns/esm/locale/pl/_lib/formatRelative/index.js
function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjectives;
  if (isSameUTCWeek(date, baseDate, options)) {
    adjectives = adjectivesThisWeek;
  } else if (token === "lastWeek") {
    adjectives = adjectivesLastWeek;
  } else if (token === "nextWeek") {
    adjectives = adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
  var day = date.getUTCDay();
  var grammaticalGender = dayGrammaticalGender[day];
  var adjective = adjectives[grammaticalGender];
  return "'".concat(adjective, "' eeee 'o' p");
}
var adjectivesLastWeek, adjectivesThisWeek, adjectivesNextWeek, dayGrammaticalGender, formatRelativeLocale39, formatRelative78, formatRelative_default40;
var init_formatRelative41 = __esm({
  "node_modules/date-fns/esm/locale/pl/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    adjectivesLastWeek = {
      masculine: "ostatni",
      feminine: "ostatnia"
    };
    adjectivesThisWeek = {
      masculine: "ten",
      feminine: "ta"
    };
    adjectivesNextWeek = {
      masculine: "nastƒôpny",
      feminine: "nastƒôpna"
    };
    dayGrammaticalGender = {
      0: "feminine",
      1: "masculine",
      2: "masculine",
      3: "feminine",
      4: "masculine",
      5: "masculine",
      6: "feminine"
    };
    formatRelativeLocale39 = {
      lastWeek: dayAndTimeWithAdjective,
      yesterday: "'wczoraj o' p",
      today: "'dzisiaj o' p",
      tomorrow: "'jutro o' p",
      nextWeek: dayAndTimeWithAdjective,
      other: "P"
    };
    formatRelative78 = function formatRelative79(token, date, baseDate, options) {
      var format2 = formatRelativeLocale39[token];
      if (typeof format2 === "function") {
        return format2(token, date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default40 = formatRelative78;
  }
});

// node_modules/date-fns/esm/locale/pl/_lib/localize/index.js
var eraValues39, quarterValues39, monthValues39, monthFormattingValues, dayValues39, dayFormattingValues, dayPeriodValues39, dayPeriodFormattingValues, ordinalNumber77, localize39, localize_default40;
var init_localize40 = __esm({
  "node_modules/date-fns/esm/locale/pl/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues39 = {
      narrow: ["p.n.e.", "n.e."],
      abbreviated: ["p.n.e.", "n.e."],
      wide: ["przed naszƒÖ erƒÖ", "naszej ery"]
    };
    quarterValues39 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I kw.", "II kw.", "III kw.", "IV kw."],
      wide: ["I kwarta≈Ç", "II kwarta≈Ç", "III kwarta≈Ç", "IV kwarta≈Ç"]
    };
    monthValues39 = {
      narrow: ["S", "L", "M", "K", "M", "C", "L", "S", "W", "P", "L", "G"],
      abbreviated: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "pa≈∫", "lis", "gru"],
      wide: ["stycze≈Ñ", "luty", "marzec", "kwiecie≈Ñ", "maj", "czerwiec", "lipiec", "sierpie≈Ñ", "wrzesie≈Ñ", "pa≈∫dziernik", "listopad", "grudzie≈Ñ"]
    };
    monthFormattingValues = {
      narrow: ["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"],
      abbreviated: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "pa≈∫", "lis", "gru"],
      wide: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "wrze≈õnia", "pa≈∫dziernika", "listopada", "grudnia"]
    };
    dayValues39 = {
      narrow: ["N", "P", "W", "≈ö", "C", "P", "S"],
      short: ["nie", "pon", "wto", "≈õro", "czw", "piƒÖ", "sob"],
      abbreviated: ["niedz.", "pon.", "wt.", "≈õr.", "czw.", "pt.", "sob."],
      wide: ["niedziela", "poniedzia≈Çek", "wtorek", "≈õroda", "czwartek", "piƒÖtek", "sobota"]
    };
    dayFormattingValues = {
      narrow: ["n", "p", "w", "≈õ", "c", "p", "s"],
      short: ["nie", "pon", "wto", "≈õro", "czw", "piƒÖ", "sob"],
      abbreviated: ["niedz.", "pon.", "wt.", "≈õr.", "czw.", "pt.", "sob."],
      wide: ["niedziela", "poniedzia≈Çek", "wtorek", "≈õroda", "czwartek", "piƒÖtek", "sobota"]
    };
    dayPeriodValues39 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "p√≥≈Çn.",
        noon: "po≈Ç",
        morning: "rano",
        afternoon: "popo≈Ç.",
        evening: "wiecz.",
        night: "noc"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "p√≥≈Çnoc",
        noon: "po≈Çudnie",
        morning: "rano",
        afternoon: "popo≈Çudnie",
        evening: "wiecz√≥r",
        night: "noc"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "p√≥≈Çnoc",
        noon: "po≈Çudnie",
        morning: "rano",
        afternoon: "popo≈Çudnie",
        evening: "wiecz√≥r",
        night: "noc"
      }
    };
    dayPeriodFormattingValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "o p√≥≈Çn.",
        noon: "w po≈Ç.",
        morning: "rano",
        afternoon: "po po≈Ç.",
        evening: "wiecz.",
        night: "w nocy"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o p√≥≈Çnocy",
        noon: "w po≈Çudnie",
        morning: "rano",
        afternoon: "po po≈Çudniu",
        evening: "wieczorem",
        night: "w nocy"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "o p√≥≈Çnocy",
        noon: "w po≈Çudnie",
        morning: "rano",
        afternoon: "po po≈Çudniu",
        evening: "wieczorem",
        night: "w nocy"
      }
    };
    ordinalNumber77 = function ordinalNumber78(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize39 = {
      ordinalNumber: ordinalNumber77,
      era: buildLocalizeFn({
        values: eraValues39,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues39,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback39(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues39,
        defaultWidth: "wide",
        formattingValues: monthFormattingValues,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues39,
        defaultWidth: "wide",
        formattingValues: dayFormattingValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues39,
        defaultWidth: "wide",
        formattingValues: dayPeriodFormattingValues,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default40 = localize39;
  }
});

// node_modules/date-fns/esm/locale/pl/_lib/match/index.js
var matchOrdinalNumberPattern39, parseOrdinalNumberPattern39, matchEraPatterns39, parseEraPatterns39, matchQuarterPatterns39, parseQuarterPatterns39, matchMonthPatterns39, parseMonthPatterns39, matchDayPatterns39, parseDayPatterns39, matchDayPeriodPatterns39, parseDayPeriodPatterns39, match39, match_default40;
var init_match40 = __esm({
  "node_modules/date-fns/esm/locale/pl/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern39 = /^(\d+)?/i;
    parseOrdinalNumberPattern39 = /\d+/i;
    matchEraPatterns39 = {
      narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      wide: /^(przed\s*nasz(ƒÖ|a)\s*er(ƒÖ|a)|naszej\s*ery)/i
    };
    parseEraPatterns39 = {
      any: [/^p/i, /^n/i]
    };
    matchQuarterPatterns39 = {
      narrow: /^[1234]/i,
      abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
      wide: /^(I|II|III|IV)\s*kwarta(≈Ç|l)/i
    };
    parseQuarterPatterns39 = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
    };
    matchMonthPatterns39 = {
      narrow: /^[slmkcwpg]/i,
      abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(≈∫|z)|lis|gru)/i,
      wide: /^(stycznia|stycze(≈Ñ|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(≈Ñ|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(≈Ñ|n)|wrze(≈õ|s)nia|wrzesie(≈Ñ|n)|pa(≈∫|z)dziernika|pa(≈∫|z)dziernik|listopada|listopad|grudnia|grudzie(≈Ñ|n))/i
    };
    parseMonthPatterns39 = {
      narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
      any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
    };
    matchDayPatterns39 = {
      narrow: /^[npw≈õcs]/i,
      short: /^(nie|pon|wto|(≈õ|s)ro|czw|pi(ƒÖ|a)|sob)/i,
      abbreviated: /^(niedz|pon|wt|(≈õ|s)r|czw|pt|sob)\.?/i,
      wide: /^(niedziela|poniedzia(≈Ç|l)ek|wtorek|(≈õ|s)roda|czwartek|pi(ƒÖ|a)tek|sobota)/i
    };
    parseDayPatterns39 = {
      narrow: [/^n/i, /^p/i, /^w/i, /^≈õ/i, /^c/i, /^p/i, /^s/i],
      abbreviated: [/^n/i, /^po/i, /^w/i, /^(≈õ|s)r/i, /^c/i, /^pt/i, /^so/i],
      any: [/^n/i, /^po/i, /^w/i, /^(≈õ|s)r/i, /^c/i, /^pi/i, /^so/i]
    };
    matchDayPeriodPatterns39 = {
      narrow: /^(^a$|^p$|p√≥(≈Ç|l)n\.?|o\s*p√≥(≈Ç|l)n\.?|po(≈Ç|l)\.?|w\s*po(≈Ç|l)\.?|po\s*po(≈Ç|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
      any: /^(am|pm|p√≥(≈Ç|l)noc|o\s*p√≥(≈Ç|l)nocy|po(≈Ç|l)udnie|w\s*po(≈Ç|l)udnie|popo(≈Ç|l)udnie|po\s*po(≈Ç|l)udniu|rano|wiecz√≥r|wieczorem|noc|w\s*nocy)/i
    };
    parseDayPeriodPatterns39 = {
      narrow: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /p√≥(≈Ç|l)n/i,
        noon: /po(≈Ç|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(≈Ç|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      },
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /p√≥(≈Ç|l)n/i,
        noon: /po(≈Ç|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(≈Ç|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      }
    };
    match39 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern39,
        parsePattern: parseOrdinalNumberPattern39,
        valueCallback: function valueCallback76(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns39,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns39,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns39,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns39,
        defaultParseWidth: "any",
        valueCallback: function valueCallback77(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns39,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns39,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns39,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns39,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns39,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns39,
        defaultParseWidth: "any"
      })
    };
    match_default40 = match39;
  }
});

// node_modules/date-fns/esm/locale/pl/index.js
var pl_exports = {};
__export(pl_exports, {
  default: () => pl_default
});
var locale43, pl_default;
var init_pl = __esm({
  "node_modules/date-fns/esm/locale/pl/index.js"() {
    init_formatDistance42();
    init_formatLong43();
    init_formatRelative41();
    init_localize40();
    init_match40();
    locale43 = {
      code: "pl",
      formatDistance: formatDistance_default41,
      formatLong: formatLong_default43,
      formatRelative: formatRelative_default40,
      localize: localize_default40,
      match: match_default40,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    pl_default = locale43;
  }
});

// node_modules/date-fns/esm/locale/pt/_lib/formatDistance/index.js
var formatDistanceLocale40, formatDistance82, formatDistance_default42;
var init_formatDistance43 = __esm({
  "node_modules/date-fns/esm/locale/pt/_lib/formatDistance/index.js"() {
    formatDistanceLocale40 = {
      lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "meio minuto",
      lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "aproximadamente 1 hora",
        other: "aproximadamente {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dias"
      },
      aboutXWeeks: {
        one: "aproximadamente 1 semana",
        other: "aproximadamente {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "aproximadamente 1 m√™s",
        other: "aproximadamente {{count}} meses"
      },
      xMonths: {
        one: "1 m√™s",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "aproximadamente 1 ano",
        other: "aproximadamente {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
      },
      almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
      }
    };
    formatDistance82 = function formatDistance83(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale40[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "daqui a " + result;
        } else {
          return "h√° " + result;
        }
      }
      return result;
    };
    formatDistance_default42 = formatDistance82;
  }
});

// node_modules/date-fns/esm/locale/pt/_lib/formatLong/index.js
var dateFormats44, timeFormats44, dateTimeFormats44, formatLong44, formatLong_default44;
var init_formatLong44 = __esm({
  "node_modules/date-fns/esm/locale/pt/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats44 = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d 'de' MMM 'de' y",
      short: "dd/MM/y"
    };
    timeFormats44 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats44 = {
      full: "{{date}} '√†s' {{time}}",
      long: "{{date}} '√†s' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong44 = {
      date: buildFormatLongFn({
        formats: dateFormats44,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats44,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats44,
        defaultWidth: "full"
      })
    };
    formatLong_default44 = formatLong44;
  }
});

// node_modules/date-fns/esm/locale/pt/_lib/formatRelative/index.js
var formatRelativeLocale40, formatRelative80, formatRelative_default41;
var init_formatRelative42 = __esm({
  "node_modules/date-fns/esm/locale/pt/_lib/formatRelative/index.js"() {
    formatRelativeLocale40 = {
      lastWeek: function lastWeek8(date) {
        var weekday = date.getUTCDay();
        var last = weekday === 0 || weekday === 6 ? "√∫ltimo" : "√∫ltima";
        return "'" + last + "' eeee '√†s' p";
      },
      yesterday: "'ontem √†s' p",
      today: "'hoje √†s' p",
      tomorrow: "'amanh√£ √†s' p",
      nextWeek: "eeee '√†s' p",
      other: "P"
    };
    formatRelative80 = function formatRelative81(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale40[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default41 = formatRelative80;
  }
});

// node_modules/date-fns/esm/locale/pt/_lib/localize/index.js
var eraValues40, quarterValues40, monthValues40, dayValues40, dayPeriodValues40, formattingDayPeriodValues30, ordinalNumber79, localize40, localize_default41;
var init_localize41 = __esm({
  "node_modules/date-fns/esm/locale/pt/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues40 = {
      narrow: ["aC", "dC"],
      abbreviated: ["a.C.", "d.C."],
      wide: ["antes de Cristo", "depois de Cristo"]
    };
    quarterValues40 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1¬∫ trimestre", "2¬∫ trimestre", "3¬∫ trimestre", "4¬∫ trimestre"]
    };
    monthValues40 = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"],
      wide: ["janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
    };
    dayValues40 = {
      narrow: ["d", "s", "t", "q", "q", "s", "s"],
      short: ["dom", "seg", "ter", "qua", "qui", "sex", "s√°b"],
      abbreviated: ["dom", "seg", "ter", "qua", "qui", "sex", "s√°b"],
      wide: ["domingo", "segunda-feira", "ter√ßa-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s√°bado"]
    };
    dayPeriodValues40 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      }
    };
    formattingDayPeriodValues30 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      }
    };
    ordinalNumber79 = function ordinalNumber80(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "¬∫";
    };
    localize40 = {
      ordinalNumber: ordinalNumber79,
      era: buildLocalizeFn({
        values: eraValues40,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues40,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback40(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues40,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues40,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues40,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues30,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default41 = localize40;
  }
});

// node_modules/date-fns/esm/locale/pt/_lib/match/index.js
var matchOrdinalNumberPattern40, parseOrdinalNumberPattern40, matchEraPatterns40, parseEraPatterns40, matchQuarterPatterns40, parseQuarterPatterns40, matchMonthPatterns40, parseMonthPatterns40, matchDayPatterns40, parseDayPatterns40, matchDayPeriodPatterns40, parseDayPeriodPatterns40, match40, match_default41;
var init_match41 = __esm({
  "node_modules/date-fns/esm/locale/pt/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern40 = /^(\d+)(¬∫|¬™)?/i;
    parseOrdinalNumberPattern40 = /\d+/i;
    matchEraPatterns40 = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
    };
    parseEraPatterns40 = {
      any: [/^ac/i, /^dc/i],
      wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
    };
    matchQuarterPatterns40 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](¬∫|¬™)? trimestre/i
    };
    parseQuarterPatterns40 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns40 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    parseMonthPatterns40 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns40 = {
      narrow: /^[dstq]/i,
      short: /^(dom|seg|ter|qua|qui|sex|s[√°a]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[√°a]b)/i,
      wide: /^(domingo|segunda-?\s?feira|ter√ßa-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[√°a]bado)/i
    };
    parseDayPatterns40 = {
      narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[√°a]/i]
    };
    matchDayPeriodPatterns40 = {
      narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[√£a]|tarde|noite|madrugada))/i,
      any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[√£a]|tarde|noite|madrugada))/i
    };
    parseDayPeriodPatterns40 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^meia/i,
        noon: /^meio/i,
        morning: /manh[√£a]/i,
        afternoon: /tarde/i,
        evening: /noite/i,
        night: /madrugada/i
      }
    };
    match40 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern40,
        parsePattern: parseOrdinalNumberPattern40,
        valueCallback: function valueCallback78(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns40,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns40,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns40,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns40,
        defaultParseWidth: "any",
        valueCallback: function valueCallback79(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns40,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns40,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns40,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns40,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns40,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns40,
        defaultParseWidth: "any"
      })
    };
    match_default41 = match40;
  }
});

// node_modules/date-fns/esm/locale/pt/index.js
var pt_exports = {};
__export(pt_exports, {
  default: () => pt_default
});
var locale44, pt_default;
var init_pt = __esm({
  "node_modules/date-fns/esm/locale/pt/index.js"() {
    init_formatDistance43();
    init_formatLong44();
    init_formatRelative42();
    init_localize41();
    init_match41();
    locale44 = {
      code: "pt",
      formatDistance: formatDistance_default42,
      formatLong: formatLong_default44,
      formatRelative: formatRelative_default41,
      localize: localize_default41,
      match: match_default41,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    pt_default = locale44;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/_lib/formatDistance/index.js
var formatDistanceLocale41, formatDistance84, formatDistance_default43;
var init_formatDistance44 = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/_lib/formatDistance/index.js"() {
    formatDistanceLocale41 = {
      lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "meio minuto",
      lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "cerca de 1 hora",
        other: "cerca de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dias"
      },
      aboutXWeeks: {
        one: "cerca de 1 semana",
        other: "cerca de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "cerca de 1 m√™s",
        other: "cerca de {{count}} meses"
      },
      xMonths: {
        one: "1 m√™s",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "cerca de 1 ano",
        other: "cerca de {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
      },
      almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
      }
    };
    formatDistance84 = function formatDistance85(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale41[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "em " + result;
        } else {
          return "h√° " + result;
        }
      }
      return result;
    };
    formatDistance_default43 = formatDistance84;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/_lib/formatLong/index.js
var dateFormats45, timeFormats45, dateTimeFormats45, formatLong45, formatLong_default45;
var init_formatLong45 = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats45 = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    timeFormats45 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats45 = {
      full: "{{date}} '√†s' {{time}}",
      long: "{{date}} '√†s' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong45 = {
      date: buildFormatLongFn({
        formats: dateFormats45,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats45,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats45,
        defaultWidth: "full"
      })
    };
    formatLong_default45 = formatLong45;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/_lib/formatRelative/index.js
var formatRelativeLocale41, formatRelative82, formatRelative_default42;
var init_formatRelative43 = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/_lib/formatRelative/index.js"() {
    formatRelativeLocale41 = {
      lastWeek: function lastWeek9(date) {
        var weekday = date.getUTCDay();
        var last = weekday === 0 || weekday === 6 ? "√∫ltimo" : "√∫ltima";
        return "'" + last + "' eeee '√†s' p";
      },
      yesterday: "'ontem √†s' p",
      today: "'hoje √†s' p",
      tomorrow: "'amanh√£ √†s' p",
      nextWeek: "eeee '√†s' p",
      other: "P"
    };
    formatRelative82 = function formatRelative83(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale41[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default42 = formatRelative82;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/_lib/localize/index.js
var eraValues41, quarterValues41, monthValues41, dayValues41, dayPeriodValues41, formattingDayPeriodValues31, ordinalNumber81, localize41, localize_default42;
var init_localize42 = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues41 = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "depois de cristo"]
    };
    quarterValues41 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1¬∫ trimestre", "2¬∫ trimestre", "3¬∫ trimestre", "4¬∫ trimestre"]
    };
    monthValues41 = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"],
      wide: ["janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
    };
    dayValues41 = {
      narrow: ["D", "S", "T", "Q", "Q", "S", "S"],
      short: ["dom", "seg", "ter", "qua", "qui", "sex", "sab"],
      abbreviated: ["domingo", "segunda", "ter√ßa", "quarta", "quinta", "sexta", "s√°bado"],
      wide: ["domingo", "segunda-feira", "ter√ßa-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s√°bado"]
    };
    dayPeriodValues41 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh√£",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      }
    };
    formattingDayPeriodValues31 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh√£",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      }
    };
    ordinalNumber81 = function ordinalNumber82(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      if ((options === null || options === void 0 ? void 0 : options.unit) === "week") {
        return number + "¬™";
      }
      return number + "¬∫";
    };
    localize41 = {
      ordinalNumber: ordinalNumber81,
      era: buildLocalizeFn({
        values: eraValues41,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues41,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback41(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues41,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues41,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues41,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues31,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default42 = localize41;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/_lib/match/index.js
var matchOrdinalNumberPattern41, parseOrdinalNumberPattern41, matchEraPatterns41, parseEraPatterns41, matchQuarterPatterns41, parseQuarterPatterns41, matchMonthPatterns41, parseMonthPatterns41, matchDayPatterns41, parseDayPatterns41, matchDayPeriodPatterns41, parseDayPeriodPatterns41, match41, match_default42;
var init_match42 = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern41 = /^(\d+)[¬∫¬™o]?/i;
    parseOrdinalNumberPattern41 = /\d+/i;
    matchEraPatterns41 = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
      wide: /^(antes de cristo|depois de cristo)/i
    };
    parseEraPatterns41 = {
      any: [/^ac/i, /^dc/i],
      wide: [/^antes de cristo/i, /^depois de cristo/i]
    };
    matchQuarterPatterns41 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](¬∫)? trimestre/i
    };
    parseQuarterPatterns41 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns41 = {
      narrow: /^[jfmajsond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    parseMonthPatterns41 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
    };
    matchDayPatterns41 = {
      narrow: /^(dom|[23456]¬™?|s[a√°]b)/i,
      short: /^(dom|[23456]¬™?|s[a√°]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[a√°]b)/i,
      wide: /^(domingo|(segunda|ter[c√ß]a|quarta|quinta|sexta)([- ]feira)?|s[a√°]bado)/i
    };
    parseDayPatterns41 = {
      short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[a√°]/i],
      narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[a√°]/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[a√°]b/i]
    };
    matchDayPeriodPatterns41 = {
      narrow: /^(a|p|mn|md|(da) (manh√£|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manh√£|tarde|noite))/i
    };
    parseDayPeriodPatterns41 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn|^meia[-\s]noite/i,
        noon: /^md|^meio[-\s]dia/i,
        morning: /manh√£/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noite/i
      }
    };
    match41 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern41,
        parsePattern: parseOrdinalNumberPattern41,
        valueCallback: function valueCallback80(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns41,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns41,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns41,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns41,
        defaultParseWidth: "any",
        valueCallback: function valueCallback81(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns41,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns41,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns41,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns41,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns41,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns41,
        defaultParseWidth: "any"
      })
    };
    match_default42 = match41;
  }
});

// node_modules/date-fns/esm/locale/pt-BR/index.js
var pt_BR_exports = {};
__export(pt_BR_exports, {
  default: () => pt_BR_default
});
var locale45, pt_BR_default;
var init_pt_BR = __esm({
  "node_modules/date-fns/esm/locale/pt-BR/index.js"() {
    init_formatDistance44();
    init_formatLong45();
    init_formatRelative43();
    init_localize42();
    init_match42();
    locale45 = {
      code: "pt-BR",
      formatDistance: formatDistance_default43,
      formatLong: formatLong_default45,
      formatRelative: formatRelative_default42,
      localize: localize_default42,
      match: match_default42,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    pt_BR_default = locale45;
  }
});

// node_modules/date-fns/esm/locale/ro/_lib/formatDistance/index.js
var formatDistanceLocale42, formatDistance86, formatDistance_default44;
var init_formatDistance45 = __esm({
  "node_modules/date-fns/esm/locale/ro/_lib/formatDistance/index.js"() {
    formatDistanceLocale42 = {
      lessThanXSeconds: {
        one: "mai pu»õin de o secundƒÉ",
        other: "mai pu»õin de {{count}} secunde"
      },
      xSeconds: {
        one: "1 secundƒÉ",
        other: "{{count}} secunde"
      },
      halfAMinute: "jumƒÉtate de minut",
      lessThanXMinutes: {
        one: "mai pu»õin de un minut",
        other: "mai pu»õin de {{count}} minute"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minute"
      },
      aboutXHours: {
        one: "circa 1 orƒÉ",
        other: "circa {{count}} ore"
      },
      xHours: {
        one: "1 orƒÉ",
        other: "{{count}} ore"
      },
      xDays: {
        one: "1 zi",
        other: "{{count}} zile"
      },
      aboutXWeeks: {
        one: "circa o sƒÉptƒÉm√¢nƒÉ",
        other: "circa {{count}} sƒÉptƒÉm√¢ni"
      },
      xWeeks: {
        one: "1 sƒÉptƒÉm√¢nƒÉ",
        other: "{{count}} sƒÉptƒÉm√¢ni"
      },
      aboutXMonths: {
        one: "circa 1 lunƒÉ",
        other: "circa {{count}} luni"
      },
      xMonths: {
        one: "1 lunƒÉ",
        other: "{{count}} luni"
      },
      aboutXYears: {
        one: "circa 1 an",
        other: "circa {{count}} ani"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} ani"
      },
      overXYears: {
        one: "peste 1 an",
        other: "peste {{count}} ani"
      },
      almostXYears: {
        one: "aproape 1 an",
        other: "aproape {{count}} ani"
      }
    };
    formatDistance86 = function formatDistance87(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale42[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "√Æn " + result;
        } else {
          return result + " √Æn urmƒÉ";
        }
      }
      return result;
    };
    formatDistance_default44 = formatDistance86;
  }
});

// node_modules/date-fns/esm/locale/ro/_lib/formatLong/index.js
var dateFormats46, timeFormats46, dateTimeFormats46, formatLong46, formatLong_default46;
var init_formatLong46 = __esm({
  "node_modules/date-fns/esm/locale/ro/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats46 = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd.MM.yyyy"
    };
    timeFormats46 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats46 = {
      full: "{{date}} 'la' {{time}}",
      long: "{{date}} 'la' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong46 = {
      date: buildFormatLongFn({
        formats: dateFormats46,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats46,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats46,
        defaultWidth: "full"
      })
    };
    formatLong_default46 = formatLong46;
  }
});

// node_modules/date-fns/esm/locale/ro/_lib/formatRelative/index.js
var formatRelativeLocale42, formatRelative84, formatRelative_default43;
var init_formatRelative44 = __esm({
  "node_modules/date-fns/esm/locale/ro/_lib/formatRelative/index.js"() {
    formatRelativeLocale42 = {
      lastWeek: "eeee 'trecutƒÉ la' p",
      yesterday: "'ieri la' p",
      today: "'astƒÉzi la' p",
      tomorrow: "'m√¢ine la' p",
      nextWeek: "eeee 'viitoare la' p",
      other: "P"
    };
    formatRelative84 = function formatRelative85(token, _date, _baseDate, _options) {
      return formatRelativeLocale42[token];
    };
    formatRelative_default43 = formatRelative84;
  }
});

// node_modules/date-fns/esm/locale/ro/_lib/localize/index.js
var eraValues42, quarterValues42, monthValues42, dayValues42, dayPeriodValues42, formattingDayPeriodValues32, ordinalNumber83, localize42, localize_default43;
var init_localize43 = __esm({
  "node_modules/date-fns/esm/locale/ro/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues42 = {
      narrow: ["√é", "D"],
      abbreviated: ["√é.d.C.", "D.C."],
      wide: ["√énainte de Cristos", "DupƒÉ Cristos"]
    };
    quarterValues42 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["primul trimestru", "al doilea trimestru", "al treilea trimestru", "al patrulea trimestru"]
    };
    monthValues42 = {
      narrow: ["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
      abbreviated: ["ian", "feb", "mar", "apr", "mai", "iun", "iul", "aug", "sep", "oct", "noi", "dec"],
      wide: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie"]
    };
    dayValues42 = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["du", "lu", "ma", "mi", "jo", "vi", "s√¢"],
      abbreviated: ["dum", "lun", "mar", "mie", "joi", "vin", "s√¢m"],
      wide: ["duminicƒÉ", "luni", "mar»õi", "miercuri", "joi", "vineri", "s√¢mbƒÉtƒÉ"]
    };
    dayPeriodValues42 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "ami",
        morning: "dim",
        afternoon: "da",
        evening: "s",
        night: "n"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nop»õii",
        noon: "amiazƒÉ",
        morning: "diminea»õƒÉ",
        afternoon: "dupƒÉ-amiazƒÉ",
        evening: "searƒÉ",
        night: "noapte"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nop»õii",
        noon: "amiazƒÉ",
        morning: "diminea»õƒÉ",
        afternoon: "dupƒÉ-amiazƒÉ",
        evening: "searƒÉ",
        night: "noapte"
      }
    };
    formattingDayPeriodValues32 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "amiazƒÉ",
        morning: "diminea»õƒÉ",
        afternoon: "dupƒÉ-amiazƒÉ",
        evening: "searƒÉ",
        night: "noapte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nop»õii",
        noon: "amiazƒÉ",
        morning: "diminea»õƒÉ",
        afternoon: "dupƒÉ-amiazƒÉ",
        evening: "searƒÉ",
        night: "noapte"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nop»õii",
        noon: "amiazƒÉ",
        morning: "diminea»õƒÉ",
        afternoon: "dupƒÉ-amiazƒÉ",
        evening: "searƒÉ",
        night: "noapte"
      }
    };
    ordinalNumber83 = function ordinalNumber84(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize42 = {
      ordinalNumber: ordinalNumber83,
      era: buildLocalizeFn({
        values: eraValues42,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues42,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback42(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues42,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues42,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues42,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues32,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default43 = localize42;
  }
});

// node_modules/date-fns/esm/locale/ro/_lib/match/index.js
var matchOrdinalNumberPattern42, parseOrdinalNumberPattern42, matchEraPatterns42, parseEraPatterns42, matchQuarterPatterns42, parseQuarterPatterns42, matchMonthPatterns42, parseMonthPatterns42, matchDayPatterns42, parseDayPatterns42, matchDayPeriodPatterns42, parseDayPeriodPatterns42, match42, match_default43;
var init_match43 = __esm({
  "node_modules/date-fns/esm/locale/ro/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern42 = /^(\d+)?/i;
    parseOrdinalNumberPattern42 = /\d+/i;
    matchEraPatterns42 = {
      narrow: /^(√é|D)/i,
      abbreviated: /^(√é\.?\s?d\.?\s?C\.?|√é\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
      wide: /^(√énainte de Cristos|√énaintea erei noastre|DupƒÉ Cristos|Era noastrƒÉ)/i
    };
    parseEraPatterns42 = {
      any: [/^√éC/i, /^DC/i],
      wide: [/^(√énainte de Cristos|√énaintea erei noastre)/i, /^(DupƒÉ Cristos|Era noastrƒÉ)/i]
    };
    matchQuarterPatterns42 = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^trimestrul [1234]/i
    };
    parseQuarterPatterns42 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns42 = {
      narrow: /^[ifmaasond]/i,
      abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
      wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
    };
    parseMonthPatterns42 = {
      narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns42 = {
      narrow: /^[dlmjvs]/i,
      short: /^(d|l|ma|mi|j|v|s)/i,
      abbreviated: /^(dum|lun|mar|mie|jo|vi|s√¢)/i,
      wide: /^(duminica|luni|mar≈£i|miercuri|joi|vineri|s√¢mbƒÉtƒÉ)/i
    };
    parseDayPatterns42 = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
    };
    matchDayPeriodPatterns42 = {
      narrow: /^(a|p|mn|a|(diminea≈£a|dupƒÉ-amiaza|seara|noaptea))/i,
      any: /^([ap]\.?\s?m\.?|miezul nop»õii|amiaza|(diminea≈£a|dupƒÉ-amiaza|seara|noaptea))/i
    };
    parseDayPeriodPatterns42 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /amiaza/i,
        morning: /diminea≈£a/i,
        afternoon: /dupƒÉ-amiaza/i,
        evening: /seara/i,
        night: /noaptea/i
      }
    };
    match42 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern42,
        parsePattern: parseOrdinalNumberPattern42,
        valueCallback: function valueCallback82(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns42,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns42,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns42,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns42,
        defaultParseWidth: "any",
        valueCallback: function valueCallback83(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns42,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns42,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns42,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns42,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns42,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns42,
        defaultParseWidth: "any"
      })
    };
    match_default43 = match42;
  }
});

// node_modules/date-fns/esm/locale/ro/index.js
var ro_exports = {};
__export(ro_exports, {
  default: () => ro_default
});
var locale46, ro_default;
var init_ro = __esm({
  "node_modules/date-fns/esm/locale/ro/index.js"() {
    init_formatDistance45();
    init_formatLong46();
    init_formatRelative44();
    init_localize43();
    init_match43();
    locale46 = {
      code: "ro",
      formatDistance: formatDistance_default44,
      formatLong: formatLong_default46,
      formatRelative: formatRelative_default43,
      localize: localize_default43,
      match: match_default43,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    ro_default = locale46;
  }
});

// node_modules/date-fns/esm/locale/ru/_lib/formatDistance/index.js
function declension4(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function buildLocalizeTokenFn3(scheme) {
  return function(count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension4(scheme.future, count);
        } else {
          return "—á–µ—Ä–µ–∑ " + declension4(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension4(scheme.past, count);
        } else {
          return declension4(scheme.regular, count) + " –Ω–∞–∑–∞–¥";
        }
      }
    } else {
      return declension4(scheme.regular, count);
    }
  };
}
var formatDistanceLocale43, formatDistance88, formatDistance_default45;
var init_formatDistance46 = __esm({
  "node_modules/date-fns/esm/locale/ru/_lib/formatDistance/index.js"() {
    formatDistanceLocale43 = {
      lessThanXSeconds: buildLocalizeTokenFn3({
        regular: {
          one: "–º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã",
          singularNominative: "–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          singularGenitive: "–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥",
          pluralGenitive: "–º–µ–Ω—å—à–µ {{count}} —Å–µ–∫—É–Ω–¥"
        },
        future: {
          one: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É",
          singularNominative: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      xSeconds: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥–∞",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥"
        },
        past: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—É –Ω–∞–∑–∞–¥",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥—ã –Ω–∞–∑–∞–¥",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥"
        },
        future: {
          singularNominative: "—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥—ã",
          pluralGenitive: "—á–µ—Ä–µ–∑ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      halfAMinute: function halfAMinute5(_count, options) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            return "—á–µ—Ä–µ–∑ –ø–æ–ª–º–∏–Ω—É—Ç—ã";
          } else {
            return "–ø–æ–ª–º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥";
          }
        }
        return "–ø–æ–ª–º–∏–Ω—É—Ç—ã";
      },
      lessThanXMinutes: buildLocalizeTokenFn3({
        regular: {
          one: "–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã",
          singularNominative: "–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç—ã",
          singularGenitive: "–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç",
          pluralGenitive: "–º–µ–Ω—å—à–µ {{count}} –º–∏–Ω—É—Ç"
        },
        future: {
          one: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
          singularNominative: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—É",
          singularGenitive: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—ã",
          pluralGenitive: "–º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç"
        }
      }),
      xMinutes: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} –º–∏–Ω—É—Ç–∞",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç—ã",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç"
        },
        past: {
          singularNominative: "{{count}} –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥",
          singularGenitive: "{{count}} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥",
          pluralGenitive: "{{count}} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        },
        future: {
          singularNominative: "—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—É",
          singularGenitive: "—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç—ã",
          pluralGenitive: "—á–µ—Ä–µ–∑ {{count}} –º–∏–Ω—É—Ç"
        }
      }),
      aboutXHours: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–æ–∫–æ–ª–æ {{count}} —á–∞—Å–∞",
          singularGenitive: "–æ–∫–æ–ª–æ {{count}} —á–∞—Å–æ–≤",
          pluralGenitive: "–æ–∫–æ–ª–æ {{count}} —á–∞—Å–æ–≤"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å–∞",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} —á–∞—Å–æ–≤"
        }
      }),
      xHours: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} —á–∞—Å",
          singularGenitive: "{{count}} —á–∞—Å–∞",
          pluralGenitive: "{{count}} —á–∞—Å–æ–≤"
        }
      }),
      xDays: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} –¥–µ–Ω—å",
          singularGenitive: "{{count}} –¥–Ω—è",
          pluralGenitive: "{{count}} –¥–Ω–µ–π"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª–∏",
          singularGenitive: "–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª—å",
          pluralGenitive: "–æ–∫–æ–ª–æ {{count}} –Ω–µ–¥–µ–ª—å"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª—é",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª–∏",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –Ω–µ–¥–µ–ª—å"
        }
      }),
      xWeeks: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} –Ω–µ–¥–µ–ª—è",
          singularGenitive: "{{count}} –Ω–µ–¥–µ–ª–∏",
          pluralGenitive: "{{count}} –Ω–µ–¥–µ–ª—å"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–∞",
          singularGenitive: "–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–µ–≤",
          pluralGenitive: "–æ–∫–æ–ª–æ {{count}} –º–µ—Å—è—Ü–µ–≤"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü–∞",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –º–µ—Å—è—Ü–µ–≤"
        }
      }),
      xMonths: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} –º–µ—Å—è—Ü",
          singularGenitive: "{{count}} –º–µ—Å—è—Ü–∞",
          pluralGenitive: "{{count}} –º–µ—Å—è—Ü–µ–≤"
        }
      }),
      aboutXYears: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–æ–∫–æ–ª–æ {{count}} –≥–æ–¥–∞",
          singularGenitive: "–æ–∫–æ–ª–æ {{count}} –ª–µ—Ç",
          pluralGenitive: "–æ–∫–æ–ª–æ {{count}} –ª–µ—Ç"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç"
        }
      }),
      xYears: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "{{count}} –≥–æ–¥",
          singularGenitive: "{{count}} –≥–æ–¥–∞",
          pluralGenitive: "{{count}} –ª–µ—Ç"
        }
      }),
      overXYears: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–±–æ–ª—å—à–µ {{count}} –≥–æ–¥–∞",
          singularGenitive: "–±–æ–ª—å—à–µ {{count}} –ª–µ—Ç",
          pluralGenitive: "–±–æ–ª—å—à–µ {{count}} –ª–µ—Ç"
        },
        future: {
          singularNominative: "–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞",
          pluralGenitive: "–±–æ–ª—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç"
        }
      }),
      almostXYears: buildLocalizeTokenFn3({
        regular: {
          singularNominative: "–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥",
          singularGenitive: "–ø–æ—á—Ç–∏ {{count}} –≥–æ–¥–∞",
          pluralGenitive: "–ø–æ—á—Ç–∏ {{count}} –ª–µ—Ç"
        },
        future: {
          singularNominative: "–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥",
          singularGenitive: "–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –≥–æ–¥–∞",
          pluralGenitive: "–ø–æ—á—Ç–∏ —á–µ—Ä–µ–∑ {{count}} –ª–µ—Ç"
        }
      })
    };
    formatDistance88 = function formatDistance89(token, count, options) {
      return formatDistanceLocale43[token](count, options);
    };
    formatDistance_default45 = formatDistance88;
  }
});

// node_modules/date-fns/esm/locale/ru/_lib/formatLong/index.js
var dateFormats47, timeFormats47, dateTimeFormats47, formatLong47, formatLong_default47;
var init_formatLong47 = __esm({
  "node_modules/date-fns/esm/locale/ru/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats47 = {
      full: "EEEE, d MMMM y '–≥.'",
      long: "d MMMM y '–≥.'",
      medium: "d MMM y '–≥.'",
      short: "dd.MM.y"
    };
    timeFormats47 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats47 = {
      any: "{{date}}, {{time}}"
    };
    formatLong47 = {
      date: buildFormatLongFn({
        formats: dateFormats47,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats47,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats47,
        defaultWidth: "any"
      })
    };
    formatLong_default47 = formatLong47;
  }
});

// node_modules/date-fns/esm/locale/ru/_lib/formatRelative/index.js
function _lastWeek3(day) {
  var weekday = accusativeWeekdays5[day];
  switch (day) {
    case 0:
      return "'–≤ –ø—Ä–æ—à–ª–æ–µ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
      return "'–≤ –ø—Ä–æ—à–ª—ã–π " + weekday + " –≤' p";
    case 3:
    case 5:
    case 6:
      return "'–≤ –ø—Ä–æ—à–ª—É—é " + weekday + " –≤' p";
  }
}
function thisWeek5(day) {
  var weekday = accusativeWeekdays5[day];
  if (day === 2) {
    return "'–≤–æ " + weekday + " –≤' p";
  } else {
    return "'–≤ " + weekday + " –≤' p";
  }
}
function _nextWeek3(day) {
  var weekday = accusativeWeekdays5[day];
  switch (day) {
    case 0:
      return "'–≤ —Å–ª–µ–¥—É—é—â–µ–µ " + weekday + " –≤' p";
    case 1:
    case 2:
    case 4:
      return "'–≤ —Å–ª–µ–¥—É—é—â–∏–π " + weekday + " –≤' p";
    case 3:
    case 5:
    case 6:
      return "'–≤ —Å–ª–µ–¥—É—é—â—É—é " + weekday + " –≤' p";
  }
}
var accusativeWeekdays5, formatRelativeLocale43, formatRelative86, formatRelative_default44;
var init_formatRelative45 = __esm({
  "node_modules/date-fns/esm/locale/ru/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    accusativeWeekdays5 = ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É"];
    formatRelativeLocale43 = {
      lastWeek: function lastWeek10(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek5(day);
        } else {
          return _lastWeek3(day);
        }
      },
      yesterday: "'–≤—á–µ—Ä–∞ –≤' p",
      today: "'—Å–µ–≥–æ–¥–Ω—è –≤' p",
      tomorrow: "'–∑–∞–≤—Ç—Ä–∞ –≤' p",
      nextWeek: function nextWeek8(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek5(day);
        } else {
          return _nextWeek3(day);
        }
      },
      other: "P"
    };
    formatRelative86 = function formatRelative87(token, date, baseDate, options) {
      var format2 = formatRelativeLocale43[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default44 = formatRelative86;
  }
});

// node_modules/date-fns/esm/locale/ru/_lib/localize/index.js
var eraValues43, quarterValues43, monthValues43, formattingMonthValues10, dayValues43, dayPeriodValues43, formattingDayPeriodValues33, ordinalNumber85, localize43, localize_default44;
var init_localize44 = __esm({
  "node_modules/date-fns/esm/locale/ru/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues43 = {
      narrow: ["–¥–æ –Ω.—ç.", "–Ω.—ç."],
      abbreviated: ["–¥–æ –Ω. —ç.", "–Ω. —ç."],
      wide: ["–¥–æ –Ω–∞—à–µ–π —ç—Ä—ã", "–Ω–∞—à–µ–π —ç—Ä—ã"]
    };
    quarterValues43 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-–π –∫–≤.", "2-–π –∫–≤.", "3-–π –∫–≤.", "4-–π –∫–≤."],
      wide: ["1-–π –∫–≤–∞—Ä—Ç–∞–ª", "2-–π –∫–≤–∞—Ä—Ç–∞–ª", "3-–π –∫–≤–∞—Ä—Ç–∞–ª", "4-–π –∫–≤–∞—Ä—Ç–∞–ª"]
    };
    monthValues43 = {
      narrow: ["–Ø", "–§", "–ú", "–ê", "–ú", "–ò", "–ò", "–ê", "–°", "–û", "–ù", "–î"],
      abbreviated: ["—è–Ω–≤.", "—Ñ–µ–≤.", "–º–∞—Ä—Ç", "–∞–ø—Ä.", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥.", "—Å–µ–Ω—Ç.", "–æ–∫—Ç.", "–Ω–æ—è–±.", "–¥–µ–∫."],
      wide: ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
    };
    formattingMonthValues10 = {
      narrow: ["–Ø", "–§", "–ú", "–ê", "–ú", "–ò", "–ò", "–ê", "–°", "–û", "–ù", "–î"],
      abbreviated: ["—è–Ω–≤.", "—Ñ–µ–≤.", "–º–∞—Ä.", "–∞–ø—Ä.", "–º–∞—è", "–∏—é–Ω.", "–∏—é–ª.", "–∞–≤–≥.", "—Å–µ–Ω—Ç.", "–æ–∫—Ç.", "–Ω–æ—è–±.", "–¥–µ–∫."],
      wide: ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    };
    dayValues43 = {
      narrow: ["–í", "–ü", "–í", "–°", "–ß", "–ü", "–°"],
      short: ["–≤—Å", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"],
      abbreviated: ["–≤—Å–∫", "–ø–Ω–¥", "–≤—Ç—Ä", "—Å—Ä–¥", "—á—Ç–≤", "–ø—Ç–Ω", "—Å—É–±"],
      wide: ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
    };
    dayPeriodValues43 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω.",
        noon: "–ø–æ–ª–¥.",
        morning: "—É—Ç—Ä–æ",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—å"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω.",
        noon: "–ø–æ–ª–¥.",
        morning: "—É—Ç—Ä–æ",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—å"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω–æ—á—å",
        noon: "–ø–æ–ª–¥–µ–Ω—å",
        morning: "—É—Ç—Ä–æ",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á–µ—Ä",
        night: "–Ω–æ—á—å"
      }
    };
    formattingDayPeriodValues33 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω.",
        noon: "–ø–æ–ª–¥.",
        morning: "—É—Ç—Ä–∞",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á–∏"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω.",
        noon: "–ø–æ–ª–¥.",
        morning: "—É—Ç—Ä–∞",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á–∏"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø–æ–ª–Ω–æ—á—å",
        noon: "–ø–æ–ª–¥–µ–Ω—å",
        morning: "—É—Ç—Ä–∞",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á–µ—Ä–∞",
        night: "–Ω–æ—á–∏"
      }
    };
    ordinalNumber85 = function ordinalNumber86(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      var suffix;
      if (unit === "date") {
        suffix = "-–µ";
      } else if (unit === "week" || unit === "minute" || unit === "second") {
        suffix = "-—è";
      } else {
        suffix = "-–π";
      }
      return number + suffix;
    };
    localize43 = {
      ordinalNumber: ordinalNumber85,
      era: buildLocalizeFn({
        values: eraValues43,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues43,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback43(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues43,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues10,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues43,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues43,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues33,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default44 = localize43;
  }
});

// node_modules/date-fns/esm/locale/ru/_lib/match/index.js
var matchOrdinalNumberPattern43, parseOrdinalNumberPattern43, matchEraPatterns43, parseEraPatterns43, matchQuarterPatterns43, parseQuarterPatterns43, matchMonthPatterns43, parseMonthPatterns43, matchDayPatterns43, parseDayPatterns43, matchDayPeriodPatterns43, parseDayPeriodPatterns43, match43, match_default44;
var init_match44 = __esm({
  "node_modules/date-fns/esm/locale/ru/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern43 = /^(\d+)(-?(–µ|—è|–π|–æ–µ|—å–µ|–∞—è|—å—è|—ã–π|–æ–π|–∏–π|—ã–π))?/i;
    parseOrdinalNumberPattern43 = /\d+/i;
    matchEraPatterns43 = {
      narrow: /^((–¥–æ )?–Ω\.?\s?—ç\.?)/i,
      abbreviated: /^((–¥–æ )?–Ω\.?\s?—ç\.?)/i,
      wide: /^(–¥–æ –Ω–∞—à–µ–π —ç—Ä—ã|–Ω–∞—à–µ–π —ç—Ä—ã|–Ω–∞—à–∞ —ç—Ä–∞)/i
    };
    parseEraPatterns43 = {
      any: [/^–¥/i, /^–Ω/i]
    };
    matchQuarterPatterns43 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[—ã–æ–∏]?–π?)? –∫–≤.?/i,
      wide: /^[1234](-?[—ã–æ–∏]?–π?)? –∫–≤–∞—Ä—Ç–∞–ª/i
    };
    parseQuarterPatterns43 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns43 = {
      narrow: /^[—è—Ñ–º–∞–∏—Å–æ–Ω–¥]/i,
      abbreviated: /^(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä—Ç?|–∞–ø—Ä|–º–∞[–π—è]|–∏—é–Ω[—å—è]?|–∏—é–ª[—å—è]?|–∞–≤–≥|—Å–µ–Ω—Ç?|–æ–∫—Ç|–Ω–æ—è–±?|–¥–µ–∫)\.?/i,
      wide: /^(—è–Ω–≤–∞—Ä[—å—è]|—Ñ–µ–≤—Ä–∞–ª[—å—è]|–º–∞—Ä—Ç–∞?|–∞–ø—Ä–µ–ª[—å—è]|–º–∞[–π—è]|–∏—é–Ω[—å—è]|–∏—é–ª[—å—è]|–∞–≤–≥—É—Å—Ç–∞?|—Å–µ–Ω—Ç—è–±—Ä[—å—è]|–æ–∫—Ç—è–±—Ä[—å—è]|–æ–∫—Ç—è–±—Ä[—å—è]|–Ω–æ—è–±—Ä[—å—è]|–¥–µ–∫–∞–±—Ä[—å—è])/i
    };
    parseMonthPatterns43 = {
      narrow: [/^—è/i, /^—Ñ/i, /^–º/i, /^–∞/i, /^–º/i, /^–∏/i, /^–∏/i, /^–∞/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^—è/i],
      any: [/^—è/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞[–π—è]/i, /^–∏—é–Ω/i, /^–∏—é–ª/i, /^–∞–≤/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i]
    };
    matchDayPatterns43 = {
      narrow: /^[–≤–ø—Å—á]/i,
      short: /^(–≤—Å|–≤–æ|–ø–Ω|–ø–æ|–≤—Ç|—Å—Ä|—á—Ç|—á–µ|–ø—Ç|–ø—è|—Å–±|—Å—É)\.?/i,
      abbreviated: /^(–≤—Å–∫|–≤–æ—Å|–ø–Ω–¥|–ø–æ–Ω|–≤—Ç—Ä|–≤—Ç–æ|—Å—Ä–¥|—Å—Ä–µ|—á—Ç–≤|—á–µ—Ç|–ø—Ç–Ω|–ø—è—Ç|—Å—É–±).?/i,
      wide: /^(–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å[–µ—è]|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞?|–≤—Ç–æ—Ä–Ω–∏–∫–∞?|—Å—Ä–µ–¥[–∞—ã]|—á–µ—Ç–≤–µ—Ä–≥–∞?|–ø—è—Ç–Ω–∏—Ü[–∞—ã]|—Å—É–±–±–æ—Ç[–∞—ã])/i
    };
    parseDayPatterns43 = {
      narrow: [/^–≤/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
      any: [/^–≤[–æ—Å]/i, /^–ø[–æ–Ω]/i, /^–≤/i, /^—Å—Ä/i, /^—á/i, /^–ø[—è—Ç]/i, /^—Å[—É–±]/i]
    };
    matchDayPeriodPatterns43 = {
      narrow: /^([–¥–ø]–ø|–ø–æ–ª–Ω\.?|–ø–æ–ª–¥\.?|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á[—å–∏])/i,
      abbreviated: /^([–¥–ø]–ø|–ø–æ–ª–Ω\.?|–ø–æ–ª–¥\.?|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω–æ—á[—å–∏])/i,
      wide: /^([–¥–ø]–ø|–ø–æ–ª–Ω–æ—á—å|–ø–æ–ª–¥–µ–Ω—å|—É—Ç—Ä[–æ–∞]|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á–µ—Ä–∞?|–Ω–æ—á[—å–∏])/i
    };
    parseDayPeriodPatterns43 = {
      any: {
        am: /^–¥–ø/i,
        pm: /^–ø–ø/i,
        midnight: /^–ø–æ–ª–Ω/i,
        noon: /^–ø–æ–ª–¥/i,
        morning: /^—É/i,
        afternoon: /^–¥[–µ–Ω]/i,
        evening: /^–≤/i,
        night: /^–Ω/i
      }
    };
    match43 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern43,
        parsePattern: parseOrdinalNumberPattern43,
        valueCallback: function valueCallback84(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns43,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns43,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns43,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns43,
        defaultParseWidth: "any",
        valueCallback: function valueCallback85(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns43,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns43,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns43,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns43,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns43,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns43,
        defaultParseWidth: "any"
      })
    };
    match_default44 = match43;
  }
});

// node_modules/date-fns/esm/locale/ru/index.js
var ru_exports = {};
__export(ru_exports, {
  default: () => ru_default
});
var locale47, ru_default;
var init_ru = __esm({
  "node_modules/date-fns/esm/locale/ru/index.js"() {
    init_formatDistance46();
    init_formatLong47();
    init_formatRelative45();
    init_localize44();
    init_match44();
    locale47 = {
      code: "ru",
      formatDistance: formatDistance_default45,
      formatLong: formatLong_default47,
      formatRelative: formatRelative_default44,
      localize: localize_default44,
      match: match_default44,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    ru_default = locale47;
  }
});

// node_modules/date-fns/esm/locale/sk/_lib/formatDistance/index.js
function declensionGroup2(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }
  if (count >= 2 && count <= 4 && scheme.twoFour) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function declension5(scheme, count, time) {
  var group = declensionGroup2(scheme, count);
  var finalText = group[time];
  return finalText.replace("{{count}}", String(count));
}
function extractPreposition(token) {
  var result = ["lessThan", "about", "over", "almost"].filter(function(preposition) {
    return !!token.match(new RegExp("^" + preposition));
  });
  return result[0];
}
function prefixPreposition(preposition) {
  var translation = "";
  if (preposition === "almost") {
    translation = "takmer";
  }
  if (preposition === "about") {
    translation = "pribli≈æne";
  }
  return translation.length > 0 ? translation + " " : "";
}
function suffixPreposition(preposition) {
  var translation = "";
  if (preposition === "lessThan") {
    translation = "menej ne≈æ";
  }
  if (preposition === "over") {
    translation = "viac ne≈æ";
  }
  return translation.length > 0 ? translation + " " : "";
}
function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
var formatDistanceLocale44, formatDistance90, formatDistance_default46;
var init_formatDistance47 = __esm({
  "node_modules/date-fns/esm/locale/sk/_lib/formatDistance/index.js"() {
    formatDistanceLocale44 = {
      xSeconds: {
        one: {
          present: "sekunda",
          past: "sekundou",
          future: "sekundu"
        },
        twoFour: {
          present: "{{count}} sekundy",
          past: "{{count}} sekundami",
          future: "{{count}} sekundy"
        },
        other: {
          present: "{{count}} sek√∫nd",
          past: "{{count}} sekundami",
          future: "{{count}} sek√∫nd"
        }
      },
      halfAMinute: {
        other: {
          present: "pol min√∫ty",
          past: "pol min√∫tou",
          future: "pol min√∫ty"
        }
      },
      xMinutes: {
        one: {
          present: "min√∫ta",
          past: "min√∫tou",
          future: "min√∫tu"
        },
        twoFour: {
          present: "{{count}} min√∫ty",
          past: "{{count}} min√∫tami",
          future: "{{count}} min√∫ty"
        },
        other: {
          present: "{{count}} min√∫t",
          past: "{{count}} min√∫tami",
          future: "{{count}} min√∫t"
        }
      },
      xHours: {
        one: {
          present: "hodina",
          past: "hodinou",
          future: "hodinu"
        },
        twoFour: {
          present: "{{count}} hodiny",
          past: "{{count}} hodinami",
          future: "{{count}} hodiny"
        },
        other: {
          present: "{{count}} hod√≠n",
          past: "{{count}} hodinami",
          future: "{{count}} hod√≠n"
        }
      },
      xDays: {
        one: {
          present: "de≈à",
          past: "d≈àom",
          future: "de≈à"
        },
        twoFour: {
          present: "{{count}} dni",
          past: "{{count}} d≈àami",
          future: "{{count}} dni"
        },
        other: {
          present: "{{count}} dn√≠",
          past: "{{count}} d≈àami",
          future: "{{count}} dn√≠"
        }
      },
      xWeeks: {
        one: {
          present: "t√Ω≈æde≈à",
          past: "t√Ω≈æd≈àom",
          future: "t√Ω≈æde≈à"
        },
        twoFour: {
          present: "{{count}} t√Ω≈ædne",
          past: "{{count}} t√Ω≈æd≈àami",
          future: "{{count}} t√Ω≈ædne"
        },
        other: {
          present: "{{count}} t√Ω≈æd≈àov",
          past: "{{count}} t√Ω≈æd≈àami",
          future: "{{count}} t√Ω≈æd≈àov"
        }
      },
      xMonths: {
        one: {
          present: "mesiac",
          past: "mesiacom",
          future: "mesiac"
        },
        twoFour: {
          present: "{{count}} mesiace",
          past: "{{count}} mesiacmi",
          future: "{{count}} mesiace"
        },
        other: {
          present: "{{count}} mesiacov",
          past: "{{count}} mesiacmi",
          future: "{{count}} mesiacov"
        }
      },
      xYears: {
        one: {
          present: "rok",
          past: "rokom",
          future: "rok"
        },
        twoFour: {
          present: "{{count}} roky",
          past: "{{count}} rokmi",
          future: "{{count}} roky"
        },
        other: {
          present: "{{count}} rokov",
          past: "{{count}} rokmi",
          future: "{{count}} rokov"
        }
      }
    };
    formatDistance90 = function formatDistance91(token, count, options) {
      var preposition = extractPreposition(token) || "";
      var key = lowercaseFirstLetter(token.substring(preposition.length));
      var scheme = formatDistanceLocale44[key];
      if (!(options !== null && options !== void 0 && options.addSuffix)) {
        return prefixPreposition(preposition) + suffixPreposition(preposition) + declension5(scheme, count, "present");
      }
      if (options.comparison && options.comparison > 0) {
        return prefixPreposition(preposition) + "o " + suffixPreposition(preposition) + declension5(scheme, count, "future");
      } else {
        return prefixPreposition(preposition) + "pred " + suffixPreposition(preposition) + declension5(scheme, count, "past");
      }
    };
    formatDistance_default46 = formatDistance90;
  }
});

// node_modules/date-fns/esm/locale/sk/_lib/formatLong/index.js
var dateFormats48, timeFormats48, dateTimeFormats48, formatLong48, formatLong_default48;
var init_formatLong48 = __esm({
  "node_modules/date-fns/esm/locale/sk/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats48 = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. M. y",
      short: "d. M. y"
    };
    timeFormats48 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats48 = {
      full: "{{date}}, {{time}}",
      long: "{{date}}, {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong48 = {
      date: buildFormatLongFn({
        formats: dateFormats48,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats48,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats48,
        defaultWidth: "full"
      })
    };
    formatLong_default48 = formatLong48;
  }
});

// node_modules/date-fns/esm/locale/sk/_lib/formatRelative/index.js
function _lastWeek4(day) {
  var weekday = accusativeWeekdays6[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'minul√∫ " + weekday + " o' p";
    default:
      return "'minul√Ω' eeee 'o' p";
  }
}
function thisWeek6(day) {
  var weekday = accusativeWeekdays6[day];
  if (day === 4) {
    return "'vo' eeee 'o' p";
  } else {
    return "'v " + weekday + " o' p";
  }
}
function _nextWeek4(day) {
  var weekday = accusativeWeekdays6[day];
  switch (day) {
    case 0:
    case 4:
    case 6:
      return "'bud√∫cu " + weekday + " o' p";
    default:
      return "'bud√∫ci' eeee 'o' p";
  }
}
var accusativeWeekdays6, formatRelativeLocale44, formatRelative88, formatRelative_default45;
var init_formatRelative46 = __esm({
  "node_modules/date-fns/esm/locale/sk/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    accusativeWeekdays6 = ["nedeƒæu", "pondelok", "utorok", "stredu", "≈°tvrtok", "piatok", "sobotu"];
    formatRelativeLocale44 = {
      lastWeek: function lastWeek11(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek6(day);
        } else {
          return _lastWeek4(day);
        }
      },
      yesterday: "'vƒçera o' p",
      today: "'dnes o' p",
      tomorrow: "'zajtra o' p",
      nextWeek: function nextWeek9(date, baseDate, options) {
        var day = date.getUTCDay();
        if (isSameUTCWeek(date, baseDate, options)) {
          return thisWeek6(day);
        } else {
          return _nextWeek4(day);
        }
      },
      other: "P"
    };
    formatRelative88 = function formatRelative89(token, date, baseDate, options) {
      var format2 = formatRelativeLocale44[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default45 = formatRelative88;
  }
});

// node_modules/date-fns/esm/locale/sk/_lib/localize/index.js
var eraValues44, quarterValues44, monthValues44, formattingMonthValues11, dayValues44, dayPeriodValues44, formattingDayPeriodValues34, ordinalNumber87, localize44, localize_default45;
var init_localize45 = __esm({
  "node_modules/date-fns/esm/locale/sk/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues44 = {
      narrow: ["pred Kr.", "po Kr."],
      abbreviated: ["pred Kr.", "po Kr."],
      wide: ["pred Kristom", "po Kristovi"]
    };
    quarterValues44 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. ≈°tvr≈•rok", "2. ≈°tvr≈•rok", "3. ≈°tvr≈•rok", "4. ≈°tvr≈•rok"]
    };
    monthValues44 = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["jan", "feb", "mar", "apr", "m√°j", "j√∫n", "j√∫l", "aug", "sep", "okt", "nov", "dec"],
      wide: ["janu√°r", "febru√°r", "marec", "apr√≠l", "m√°j", "j√∫n", "j√∫l", "august", "september", "okt√≥ber", "november", "december"]
    };
    formattingMonthValues11 = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["jan", "feb", "mar", "apr", "m√°j", "j√∫n", "j√∫l", "aug", "sep", "okt", "nov", "dec"],
      wide: ["janu√°ra", "febru√°ra", "marca", "apr√≠la", "m√°ja", "j√∫na", "j√∫la", "augusta", "septembra", "okt√≥bra", "novembra", "decembra"]
    };
    dayValues44 = {
      narrow: ["n", "p", "u", "s", "≈°", "p", "s"],
      short: ["ne", "po", "ut", "st", "≈°t", "pi", "so"],
      abbreviated: ["ne", "po", "ut", "st", "≈°t", "pi", "so"],
      wide: ["nedeƒæa", "pondelok", "utorok", "streda", "≈°tvrtok", "piatok", "sobota"]
    };
    dayPeriodValues44 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "r√°no",
        afternoon: "pop.",
        evening: "veƒç.",
        night: "noc"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "r√°no",
        afternoon: "popol.",
        evening: "veƒçer",
        night: "noc"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "polnoc",
        noon: "poludnie",
        morning: "r√°no",
        afternoon: "popoludnie",
        evening: "veƒçer",
        night: "noc"
      }
    };
    formattingDayPeriodValues34 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "nap.",
        morning: "r√°no",
        afternoon: "pop.",
        evening: "veƒç.",
        night: "v n."
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "napol.",
        morning: "r√°no",
        afternoon: "popol.",
        evening: "veƒçer",
        night: "v noci"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "o polnoci",
        noon: "napoludnie",
        morning: "r√°no",
        afternoon: "popoludn√≠",
        evening: "veƒçer",
        night: "v noci"
      }
    };
    ordinalNumber87 = function ordinalNumber88(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize44 = {
      ordinalNumber: ordinalNumber87,
      era: buildLocalizeFn({
        values: eraValues44,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues44,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback44(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues44,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues11,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues44,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues44,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues34,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default45 = localize44;
  }
});

// node_modules/date-fns/esm/locale/sk/_lib/match/index.js
var matchOrdinalNumberPattern44, parseOrdinalNumberPattern44, matchEraPatterns44, parseEraPatterns44, matchQuarterPatterns44, parseQuarterPatterns44, matchMonthPatterns44, parseMonthPatterns44, matchDayPatterns44, parseDayPatterns44, matchDayPeriodPatterns44, parseDayPeriodPatterns44, match44, match_default45;
var init_match45 = __esm({
  "node_modules/date-fns/esm/locale/sk/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern44 = /^(\d+)\.?/i;
    parseOrdinalNumberPattern44 = /\d+/i;
    matchEraPatterns44 = {
      narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(pred Kristom|pred na[≈°s][√≠i]m letopo[ƒçc]tom|po Kristovi|n[√°a][≈°s]ho letopo[ƒçc]tu)/i
    };
    parseEraPatterns44 = {
      any: [/^pr/i, /^(po|n)/i]
    };
    matchQuarterPatterns44 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\. [≈°s]tvr[≈•t]rok/i
    };
    parseQuarterPatterns44 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns44 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|m[√°a]j|j[√∫u]n|j[√∫u]l|aug|sep|okt|nov|dec)/i,
      wide: /^(janu[√°a]ra?|febru[√°a]ra?|(marec|marca)|apr[√≠i]la?|m[√°a]ja?|j[√∫u]na?|j[√∫u]la?|augusta?|(september|septembra)|(okt[√≥o]ber|okt[√≥o]bra)|(november|novembra)|(december|decembra))/i
    };
    parseMonthPatterns44 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[√°a]j/i, /^j[√∫u]n/i, /^j[√∫u]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns44 = {
      narrow: /^[npus≈°p]/i,
      short: /^(ne|po|ut|st|≈°t|pi|so)/i,
      abbreviated: /^(ne|po|ut|st|≈°t|pi|so)/i,
      wide: /^(nede[ƒæl]a|pondelok|utorok|streda|[≈°s]tvrtok|piatok|sobota])/i
    };
    parseDayPatterns44 = {
      narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^≈°/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(≈°t|stv)/i, /^pi/i, /^so/i]
    };
    matchDayPeriodPatterns44 = {
      narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[√°a]no|pop\.?|ve[ƒçc]\.?|(v n\.?|noc))/i,
      abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[√°a]no|pop\.?|ve[ƒçc]er|(v )?noci?)/i,
      any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[√°a]no|popoludn(ie|√≠|i)|ve[ƒçc]er|(v )?noci?)/i
    };
    parseDayPeriodPatterns44 = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /poln/i,
        noon: /^(nap|(na)?pol(\.|u))/i,
        morning: /^r[√°a]no/i,
        afternoon: /^pop/i,
        evening: /^ve[ƒçc]/i,
        night: /^(noc|v n\.)/i
      }
    };
    match44 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern44,
        parsePattern: parseOrdinalNumberPattern44,
        valueCallback: function valueCallback86(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns44,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns44,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns44,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns44,
        defaultParseWidth: "any",
        valueCallback: function valueCallback87(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns44,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns44,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns44,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns44,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns44,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns44,
        defaultParseWidth: "any"
      })
    };
    match_default45 = match44;
  }
});

// node_modules/date-fns/esm/locale/sk/index.js
var sk_exports = {};
__export(sk_exports, {
  default: () => sk_default
});
var locale48, sk_default;
var init_sk = __esm({
  "node_modules/date-fns/esm/locale/sk/index.js"() {
    init_formatDistance47();
    init_formatLong48();
    init_formatRelative46();
    init_localize45();
    init_match45();
    locale48 = {
      code: "sk",
      formatDistance: formatDistance_default46,
      formatLong: formatLong_default48,
      formatRelative: formatRelative_default45,
      localize: localize_default45,
      match: match_default45,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    sk_default = locale48;
  }
});

// node_modules/date-fns/esm/locale/sl/_lib/formatDistance/index.js
function isPluralType(val) {
  return val.one !== void 0;
}
function getFormFromCount(count) {
  switch (count % 100) {
    case 1:
      return "one";
    case 2:
      return "two";
    case 3:
    case 4:
      return "few";
    default:
      return "other";
  }
}
var formatDistanceLocale45, formatDistance92, formatDistance_default47;
var init_formatDistance48 = __esm({
  "node_modules/date-fns/esm/locale/sl/_lib/formatDistance/index.js"() {
    formatDistanceLocale45 = {
      lessThanXSeconds: {
        present: {
          one: "manj kot {{count}} sekunda",
          two: "manj kot {{count}} sekundi",
          few: "manj kot {{count}} sekunde",
          other: "manj kot {{count}} sekund"
        },
        past: {
          one: "manj kot {{count}} sekundo",
          two: "manj kot {{count}} sekundama",
          few: "manj kot {{count}} sekundami",
          other: "manj kot {{count}} sekundami"
        },
        future: {
          one: "manj kot {{count}} sekundo",
          two: "manj kot {{count}} sekundi",
          few: "manj kot {{count}} sekunde",
          other: "manj kot {{count}} sekund"
        }
      },
      xSeconds: {
        present: {
          one: "{{count}} sekunda",
          two: "{{count}} sekundi",
          few: "{{count}} sekunde",
          other: "{{count}} sekund"
        },
        past: {
          one: "{{count}} sekundo",
          two: "{{count}} sekundama",
          few: "{{count}} sekundami",
          other: "{{count}} sekundami"
        },
        future: {
          one: "{{count}} sekundo",
          two: "{{count}} sekundi",
          few: "{{count}} sekunde",
          other: "{{count}} sekund"
        }
      },
      halfAMinute: "pol minute",
      lessThanXMinutes: {
        present: {
          one: "manj kot {{count}} minuta",
          two: "manj kot {{count}} minuti",
          few: "manj kot {{count}} minute",
          other: "manj kot {{count}} minut"
        },
        past: {
          one: "manj kot {{count}} minuto",
          two: "manj kot {{count}} minutama",
          few: "manj kot {{count}} minutami",
          other: "manj kot {{count}} minutami"
        },
        future: {
          one: "manj kot {{count}} minuto",
          two: "manj kot {{count}} minuti",
          few: "manj kot {{count}} minute",
          other: "manj kot {{count}} minut"
        }
      },
      xMinutes: {
        present: {
          one: "{{count}} minuta",
          two: "{{count}} minuti",
          few: "{{count}} minute",
          other: "{{count}} minut"
        },
        past: {
          one: "{{count}} minuto",
          two: "{{count}} minutama",
          few: "{{count}} minutami",
          other: "{{count}} minutami"
        },
        future: {
          one: "{{count}} minuto",
          two: "{{count}} minuti",
          few: "{{count}} minute",
          other: "{{count}} minut"
        }
      },
      aboutXHours: {
        present: {
          one: "pribli≈æno {{count}} ura",
          two: "pribli≈æno {{count}} uri",
          few: "pribli≈æno {{count}} ure",
          other: "pribli≈æno {{count}} ur"
        },
        past: {
          one: "pribli≈æno {{count}} uro",
          two: "pribli≈æno {{count}} urama",
          few: "pribli≈æno {{count}} urami",
          other: "pribli≈æno {{count}} urami"
        },
        future: {
          one: "pribli≈æno {{count}} uro",
          two: "pribli≈æno {{count}} uri",
          few: "pribli≈æno {{count}} ure",
          other: "pribli≈æno {{count}} ur"
        }
      },
      xHours: {
        present: {
          one: "{{count}} ura",
          two: "{{count}} uri",
          few: "{{count}} ure",
          other: "{{count}} ur"
        },
        past: {
          one: "{{count}} uro",
          two: "{{count}} urama",
          few: "{{count}} urami",
          other: "{{count}} urami"
        },
        future: {
          one: "{{count}} uro",
          two: "{{count}} uri",
          few: "{{count}} ure",
          other: "{{count}} ur"
        }
      },
      xDays: {
        present: {
          one: "{{count}} dan",
          two: "{{count}} dni",
          few: "{{count}} dni",
          other: "{{count}} dni"
        },
        past: {
          one: "{{count}} dnem",
          two: "{{count}} dnevoma",
          few: "{{count}} dnevi",
          other: "{{count}} dnevi"
        },
        future: {
          one: "{{count}} dan",
          two: "{{count}} dni",
          few: "{{count}} dni",
          other: "{{count}} dni"
        }
      },
      // no tenses for weeks?
      aboutXWeeks: {
        one: "pribli≈æno {{count}} teden",
        two: "pribli≈æno {{count}} tedna",
        few: "pribli≈æno {{count}} tedne",
        other: "pribli≈æno {{count}} tednov"
      },
      // no tenses for weeks?
      xWeeks: {
        one: "{{count}} teden",
        two: "{{count}} tedna",
        few: "{{count}} tedne",
        other: "{{count}} tednov"
      },
      aboutXMonths: {
        present: {
          one: "pribli≈æno {{count}} mesec",
          two: "pribli≈æno {{count}} meseca",
          few: "pribli≈æno {{count}} mesece",
          other: "pribli≈æno {{count}} mesecev"
        },
        past: {
          one: "pribli≈æno {{count}} mesecem",
          two: "pribli≈æno {{count}} mesecema",
          few: "pribli≈æno {{count}} meseci",
          other: "pribli≈æno {{count}} meseci"
        },
        future: {
          one: "pribli≈æno {{count}} mesec",
          two: "pribli≈æno {{count}} meseca",
          few: "pribli≈æno {{count}} mesece",
          other: "pribli≈æno {{count}} mesecev"
        }
      },
      xMonths: {
        present: {
          one: "{{count}} mesec",
          two: "{{count}} meseca",
          few: "{{count}} meseci",
          other: "{{count}} mesecev"
        },
        past: {
          one: "{{count}} mesecem",
          two: "{{count}} mesecema",
          few: "{{count}} meseci",
          other: "{{count}} meseci"
        },
        future: {
          one: "{{count}} mesec",
          two: "{{count}} meseca",
          few: "{{count}} mesece",
          other: "{{count}} mesecev"
        }
      },
      aboutXYears: {
        present: {
          one: "pribli≈æno {{count}} leto",
          two: "pribli≈æno {{count}} leti",
          few: "pribli≈æno {{count}} leta",
          other: "pribli≈æno {{count}} let"
        },
        past: {
          one: "pribli≈æno {{count}} letom",
          two: "pribli≈æno {{count}} letoma",
          few: "pribli≈æno {{count}} leti",
          other: "pribli≈æno {{count}} leti"
        },
        future: {
          one: "pribli≈æno {{count}} leto",
          two: "pribli≈æno {{count}} leti",
          few: "pribli≈æno {{count}} leta",
          other: "pribli≈æno {{count}} let"
        }
      },
      xYears: {
        present: {
          one: "{{count}} leto",
          two: "{{count}} leti",
          few: "{{count}} leta",
          other: "{{count}} let"
        },
        past: {
          one: "{{count}} letom",
          two: "{{count}} letoma",
          few: "{{count}} leti",
          other: "{{count}} leti"
        },
        future: {
          one: "{{count}} leto",
          two: "{{count}} leti",
          few: "{{count}} leta",
          other: "{{count}} let"
        }
      },
      overXYears: {
        present: {
          one: "veƒç kot {{count}} leto",
          two: "veƒç kot {{count}} leti",
          few: "veƒç kot {{count}} leta",
          other: "veƒç kot {{count}} let"
        },
        past: {
          one: "veƒç kot {{count}} letom",
          two: "veƒç kot {{count}} letoma",
          few: "veƒç kot {{count}} leti",
          other: "veƒç kot {{count}} leti"
        },
        future: {
          one: "veƒç kot {{count}} leto",
          two: "veƒç kot {{count}} leti",
          few: "veƒç kot {{count}} leta",
          other: "veƒç kot {{count}} let"
        }
      },
      almostXYears: {
        present: {
          one: "skoraj {{count}} leto",
          two: "skoraj {{count}} leti",
          few: "skoraj {{count}} leta",
          other: "skoraj {{count}} let"
        },
        past: {
          one: "skoraj {{count}} letom",
          two: "skoraj {{count}} letoma",
          few: "skoraj {{count}} leti",
          other: "skoraj {{count}} leti"
        },
        future: {
          one: "skoraj {{count}} leto",
          two: "skoraj {{count}} leti",
          few: "skoraj {{count}} leta",
          other: "skoraj {{count}} let"
        }
      }
    };
    formatDistance92 = function formatDistance93(token, count, options) {
      var result = "";
      var tense = "present";
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          tense = "future";
          result = "ƒçez ";
        } else {
          tense = "past";
          result = "pred ";
        }
      }
      var tokenValue = formatDistanceLocale45[token];
      if (typeof tokenValue === "string") {
        result += tokenValue;
      } else {
        var form = getFormFromCount(count);
        if (isPluralType(tokenValue)) {
          result += tokenValue[form].replace("{{count}}", String(count));
        } else {
          result += tokenValue[tense][form].replace("{{count}}", String(count));
        }
      }
      return result;
    };
    formatDistance_default47 = formatDistance92;
  }
});

// node_modules/date-fns/esm/locale/sl/_lib/formatLong/index.js
var dateFormats49, timeFormats49, dateTimeFormats49, formatLong49, formatLong_default49;
var init_formatLong49 = __esm({
  "node_modules/date-fns/esm/locale/sl/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats49 = {
      full: "EEEE, dd. MMMM y",
      long: "dd. MMMM y",
      medium: "d. MMM y",
      short: "d. MM. yy"
    };
    timeFormats49 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats49 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong49 = {
      date: buildFormatLongFn({
        formats: dateFormats49,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats49,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats49,
        defaultWidth: "full"
      })
    };
    formatLong_default49 = formatLong49;
  }
});

// node_modules/date-fns/esm/locale/sl/_lib/formatRelative/index.js
var formatRelativeLocale45, formatRelative90, formatRelative_default46;
var init_formatRelative47 = __esm({
  "node_modules/date-fns/esm/locale/sl/_lib/formatRelative/index.js"() {
    formatRelativeLocale45 = {
      lastWeek: function lastWeek12(date) {
        var day = date.getUTCDay();
        switch (day) {
          case 0:
            return "'prej≈°njo nedeljo ob' p";
          case 3:
            return "'prej≈°njo sredo ob' p";
          case 6:
            return "'prej≈°njo soboto ob' p";
          default:
            return "'prej≈°nji' EEEE 'ob' p";
        }
      },
      yesterday: "'vƒçeraj ob' p",
      today: "'danes ob' p",
      tomorrow: "'jutri ob' p",
      nextWeek: function nextWeek10(date) {
        var day = date.getUTCDay();
        switch (day) {
          case 0:
            return "'naslednjo nedeljo ob' p";
          case 3:
            return "'naslednjo sredo ob' p";
          case 6:
            return "'naslednjo soboto ob' p";
          default:
            return "'naslednji' EEEE 'ob' p";
        }
      },
      other: "P"
    };
    formatRelative90 = function formatRelative91(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale45[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default46 = formatRelative90;
  }
});

// node_modules/date-fns/esm/locale/sl/_lib/localize/index.js
var eraValues45, quarterValues45, monthValues45, dayValues45, dayPeriodValues45, formattingDayPeriodValues35, ordinalNumber89, localize45, localize_default46;
var init_localize46 = __esm({
  "node_modules/date-fns/esm/locale/sl/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues45 = {
      narrow: ["pr. n. ≈°t.", "po n. ≈°t."],
      abbreviated: ["pr. n. ≈°t.", "po n. ≈°t."],
      wide: ["pred na≈°im ≈°tetjem", "po na≈°em ≈°tetju"]
    };
    quarterValues45 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. ƒçet.", "2. ƒçet.", "3. ƒçet.", "4. ƒçet."],
      wide: ["1. ƒçetrtletje", "2. ƒçetrtletje", "3. ƒçetrtletje", "4. ƒçetrtletje"]
    };
    monthValues45 = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: ["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec."],
      wide: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december"]
    };
    dayValues45 = {
      narrow: ["n", "p", "t", "s", "ƒç", "p", "s"],
      short: ["ned.", "pon.", "tor.", "sre.", "ƒçet.", "pet.", "sob."],
      abbreviated: ["ned.", "pon.", "tor.", "sre.", "ƒçet.", "pet.", "sob."],
      wide: ["nedelja", "ponedeljek", "torek", "sreda", "ƒçetrtek", "petek", "sobota"]
    };
    dayPeriodValues45 = {
      narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "j",
        afternoon: "p",
        evening: "v",
        night: "n"
      },
      abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "poln.",
        noon: "pold.",
        morning: "jut.",
        afternoon: "pop.",
        evening: "veƒç.",
        night: "noƒç"
      },
      wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "polnoƒç",
        noon: "poldne",
        morning: "jutro",
        afternoon: "popoldne",
        evening: "veƒçer",
        night: "noƒç"
      }
    };
    formattingDayPeriodValues35 = {
      narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "zj",
        afternoon: "p",
        evening: "zv",
        night: "po"
      },
      abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "opoln.",
        noon: "opold.",
        morning: "zjut.",
        afternoon: "pop.",
        evening: "zveƒç.",
        night: "ponoƒçi"
      },
      wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "opolnoƒçi",
        noon: "opoldne",
        morning: "zjutraj",
        afternoon: "popoldan",
        evening: "zveƒçer",
        night: "ponoƒçi"
      }
    };
    ordinalNumber89 = function ordinalNumber90(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize45 = {
      ordinalNumber: ordinalNumber89,
      era: buildLocalizeFn({
        values: eraValues45,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues45,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback45(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues45,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues45,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues45,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues35,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default46 = localize45;
  }
});

// node_modules/date-fns/esm/locale/sl/_lib/match/index.js
var matchOrdinalNumberPattern45, parseOrdinalNumberPattern45, matchEraPatterns45, parseEraPatterns45, matchQuarterPatterns45, parseQuarterPatterns45, matchMonthPatterns45, parseMonthPatterns45, matchDayPatterns45, parseDayPatterns45, matchDayPeriodPatterns45, parseDayPeriodPatterns45, match45, match_default46;
var init_match46 = __esm({
  "node_modules/date-fns/esm/locale/sl/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern45 = /^(\d+)\./i;
    parseOrdinalNumberPattern45 = /\d+/i;
    matchEraPatterns45 = {
      abbreviated: /^(pr\. n\. ≈°t\.|po n\. ≈°t\.)/i,
      wide: /^(pred Kristusom|pred na[s≈°]im [s≈°]tetjem|po Kristusu|po na[s≈°]em [s≈°]tetju|na[s≈°]ega [s≈°]tetja)/i
    };
    parseEraPatterns45 = {
      any: [/^pr/i, /^(po|na[s≈°]em)/i]
    };
    matchQuarterPatterns45 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?[ƒçc]et\.?/i,
      wide: /^[1234]\. [ƒçc]etrtletje/i
    };
    parseQuarterPatterns45 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns45 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
      wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
    };
    parseMonthPatterns45 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      abbreviated: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i],
      wide: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns45 = {
      narrow: /^[nptsƒçc]/i,
      short: /^(ned\.|pon\.|tor\.|sre\.|[cƒç]et\.|pet\.|sob\.)/i,
      abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cƒç]et\.|pet\.|sob\.)/i,
      wide: /^(nedelja|ponedeljek|torek|sreda|[cƒç]etrtek|petek|sobota)/i
    };
    parseDayPatterns45 = {
      narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cƒç]/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cƒç]/i, /^pe/i, /^so/i]
    };
    matchDayPeriodPatterns45 = {
      narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
      any: /^(dop\.|pop\.|o?poln(\.|o[cƒç]i?)|o?pold(\.|ne)|z?ve[cƒç](\.|er)|(po)?no[cƒç]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
    };
    parseDayPeriodPatterns45 = {
      narrow: {
        am: /^d/i,
        pm: /^p/i,
        midnight: /^24/i,
        noon: /^12/i,
        morning: /^(z?j)/i,
        afternoon: /^p/i,
        evening: /^(z?v)/i,
        night: /^(n|po)/i
      },
      any: {
        am: /^dop\./i,
        pm: /^pop\./i,
        midnight: /^o?poln/i,
        noon: /^o?pold/i,
        morning: /j/i,
        afternoon: /^pop\./i,
        evening: /^z?ve/i,
        night: /(po)?no/i
      }
    };
    match45 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern45,
        parsePattern: parseOrdinalNumberPattern45,
        valueCallback: function valueCallback88(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns45,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns45,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns45,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns45,
        defaultParseWidth: "any",
        valueCallback: function valueCallback89(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns45,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns45,
        defaultParseWidth: "wide"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns45,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns45,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns45,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns45,
        defaultParseWidth: "any"
      })
    };
    match_default46 = match45;
  }
});

// node_modules/date-fns/esm/locale/sl/index.js
var sl_exports = {};
__export(sl_exports, {
  default: () => sl_default
});
var locale49, sl_default;
var init_sl = __esm({
  "node_modules/date-fns/esm/locale/sl/index.js"() {
    init_formatDistance48();
    init_formatLong49();
    init_formatRelative47();
    init_localize46();
    init_match46();
    locale49 = {
      code: "sl",
      formatDistance: formatDistance_default47,
      formatLong: formatLong_default49,
      formatRelative: formatRelative_default46,
      localize: localize_default46,
      match: match_default46,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    sl_default = locale49;
  }
});

// node_modules/date-fns/esm/locale/sr/_lib/formatDistance/index.js
var formatDistanceLocale46, formatDistance94, formatDistance_default48;
var init_formatDistance49 = __esm({
  "node_modules/date-fns/esm/locale/sr/_lib/formatDistance/index.js"() {
    formatDistanceLocale46 = {
      lessThanXSeconds: {
        one: {
          standalone: "–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥–µ",
          withPrepositionAgo: "–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥–µ",
          withPrepositionIn: "–º–∞—ö–µ –æ–¥ 1 —Å–µ–∫—É–Ω–¥—É"
        },
        dual: "–º–∞—ö–µ –æ–¥ {{count}} —Å–µ–∫—É–Ω–¥–µ",
        other: "–º–∞—ö–µ –æ–¥ {{count}} —Å–µ–∫—É–Ω–¥–∏"
      },
      xSeconds: {
        one: {
          standalone: "1 —Å–µ–∫—É–Ω–¥–∞",
          withPrepositionAgo: "1 —Å–µ–∫—É–Ω–¥–µ",
          withPrepositionIn: "1 —Å–µ–∫—É–Ω–¥—É"
        },
        dual: "{{count}} —Å–µ–∫—É–Ω–¥–µ",
        other: "{{count}} —Å–µ–∫—É–Ω–¥–∏"
      },
      halfAMinute: "–ø–æ–ª–∞ –º–∏–Ω—É—Ç–µ",
      lessThanXMinutes: {
        one: {
          standalone: "–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç–µ",
          withPrepositionAgo: "–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç–µ",
          withPrepositionIn: "–º–∞—ö–µ –æ–¥ 1 –º–∏–Ω—É—Ç—É"
        },
        dual: "–º–∞—ö–µ –æ–¥ {{count}} –º–∏–Ω—É—Ç–µ",
        other: "–º–∞—ö–µ –æ–¥ {{count}} –º–∏–Ω—É—Ç–∞"
      },
      xMinutes: {
        one: {
          standalone: "1 –º–∏–Ω—É—Ç–∞",
          withPrepositionAgo: "1 –º–∏–Ω—É—Ç–µ",
          withPrepositionIn: "1 –º–∏–Ω—É—Ç—É"
        },
        dual: "{{count}} –º–∏–Ω—É—Ç–µ",
        other: "{{count}} –º–∏–Ω—É—Ç–∞"
      },
      aboutXHours: {
        one: {
          standalone: "–æ–∫–æ 1 —Å–∞—Ç",
          withPrepositionAgo: "–æ–∫–æ 1 —Å–∞—Ç",
          withPrepositionIn: "–æ–∫–æ 1 —Å–∞—Ç"
        },
        dual: "–æ–∫–æ {{count}} —Å–∞—Ç–∞",
        other: "–æ–∫–æ {{count}} —Å–∞—Ç–∏"
      },
      xHours: {
        one: {
          standalone: "1 —Å–∞—Ç",
          withPrepositionAgo: "1 —Å–∞—Ç",
          withPrepositionIn: "1 —Å–∞—Ç"
        },
        dual: "{{count}} —Å–∞—Ç–∞",
        other: "{{count}} —Å–∞—Ç–∏"
      },
      xDays: {
        one: {
          standalone: "1 –¥–∞–Ω",
          withPrepositionAgo: "1 –¥–∞–Ω",
          withPrepositionIn: "1 –¥–∞–Ω"
        },
        dual: "{{count}} –¥–∞–Ω–∞",
        other: "{{count}} –¥–∞–Ω–∞"
      },
      aboutXWeeks: {
        one: {
          standalone: "–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É",
          withPrepositionAgo: "–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É",
          withPrepositionIn: "–æ–∫–æ 1 –Ω–µ–¥–µ—ô—É"
        },
        dual: "–æ–∫–æ {{count}} –Ω–µ–¥–µ—ô–µ",
        other: "–æ–∫–æ {{count}} –Ω–µ–¥–µ—ô–µ"
      },
      xWeeks: {
        one: {
          standalone: "1 –Ω–µ–¥–µ—ô—É",
          withPrepositionAgo: "1 –Ω–µ–¥–µ—ô—É",
          withPrepositionIn: "1 –Ω–µ–¥–µ—ô—É"
        },
        dual: "{{count}} –Ω–µ–¥–µ—ô–µ",
        other: "{{count}} –Ω–µ–¥–µ—ô–µ"
      },
      aboutXMonths: {
        one: {
          standalone: "–æ–∫–æ 1 –º–µ—Å–µ—Ü",
          withPrepositionAgo: "–æ–∫–æ 1 –º–µ—Å–µ—Ü",
          withPrepositionIn: "–æ–∫–æ 1 –º–µ—Å–µ—Ü"
        },
        dual: "–æ–∫–æ {{count}} –º–µ—Å–µ—Ü–∞",
        other: "–æ–∫–æ {{count}} –º–µ—Å–µ—Ü–∏"
      },
      xMonths: {
        one: {
          standalone: "1 –º–µ—Å–µ—Ü",
          withPrepositionAgo: "1 –º–µ—Å–µ—Ü",
          withPrepositionIn: "1 –º–µ—Å–µ—Ü"
        },
        dual: "{{count}} –º–µ—Å–µ—Ü–∞",
        other: "{{count}} –º–µ—Å–µ—Ü–∏"
      },
      aboutXYears: {
        one: {
          standalone: "–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionAgo: "–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionIn: "–æ–∫–æ 1 –≥–æ–¥–∏–Ω—É"
        },
        dual: "–æ–∫–æ {{count}} –≥–æ–¥–∏–Ω–µ",
        other: "–æ–∫–æ {{count}} –≥–æ–¥–∏–Ω–∞"
      },
      xYears: {
        one: {
          standalone: "1 –≥–æ–¥–∏–Ω–∞",
          withPrepositionAgo: "1 –≥–æ–¥–∏–Ω–µ",
          withPrepositionIn: "1 –≥–æ–¥–∏–Ω—É"
        },
        dual: "{{count}} –≥–æ–¥–∏–Ω–µ",
        other: "{{count}} –≥–æ–¥–∏–Ω–∞"
      },
      overXYears: {
        one: {
          standalone: "–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionAgo: "–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionIn: "–ø—Ä–µ–∫–æ 1 –≥–æ–¥–∏–Ω—É"
        },
        dual: "–ø—Ä–µ–∫–æ {{count}} –≥–æ–¥–∏–Ω–µ",
        other: "–ø—Ä–µ–∫–æ {{count}} –≥–æ–¥–∏–Ω–∞"
      },
      almostXYears: {
        one: {
          standalone: "–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionAgo: "–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É",
          withPrepositionIn: "–≥–æ—Ç–æ–≤–æ 1 –≥–æ–¥–∏–Ω—É"
        },
        dual: "–≥–æ—Ç–æ–≤–æ {{count}} –≥–æ–¥–∏–Ω–µ",
        other: "–≥–æ—Ç–æ–≤–æ {{count}} –≥–æ–¥–∏–Ω–∞"
      }
    };
    formatDistance94 = function formatDistance95(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale46[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "–∑–∞ " + result;
        } else {
          return "–ø—Ä–µ " + result;
        }
      }
      return result;
    };
    formatDistance_default48 = formatDistance94;
  }
});

// node_modules/date-fns/esm/locale/sr/_lib/formatLong/index.js
var dateFormats50, timeFormats50, dateTimeFormats50, formatLong50, formatLong_default50;
var init_formatLong50 = __esm({
  "node_modules/date-fns/esm/locale/sr/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats50 = {
      full: "EEEE, d. MMMM yyyy.",
      long: "d. MMMM yyyy.",
      medium: "d. MMM yy.",
      short: "dd. MM. yy."
    };
    timeFormats50 = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats50 = {
      full: "{{date}} '—É' {{time}}",
      long: "{{date}} '—É' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong50 = {
      date: buildFormatLongFn({
        formats: dateFormats50,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats50,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats50,
        defaultWidth: "full"
      })
    };
    formatLong_default50 = formatLong50;
  }
});

// node_modules/date-fns/esm/locale/sr/_lib/formatRelative/index.js
var formatRelativeLocale46, formatRelative92, formatRelative_default47;
var init_formatRelative48 = __esm({
  "node_modules/date-fns/esm/locale/sr/_lib/formatRelative/index.js"() {
    formatRelativeLocale46 = {
      lastWeek: function lastWeek13(date) {
        var day = date.getUTCDay();
        switch (day) {
          case 0:
            return "'–ø—Ä–æ—à–ª–µ –Ω–µ–¥–µ—ô–µ —É' p";
          case 3:
            return "'–ø—Ä–æ—à–ª–µ —Å—Ä–µ–¥–µ —É' p";
          case 6:
            return "'–ø—Ä–æ—à–ª–µ —Å—É–±–æ—Ç–µ —É' p";
          default:
            return "'–ø—Ä–æ—à–ª–∏' EEEE '—É' p";
        }
      },
      yesterday: "'—ò—É—á–µ —É' p",
      today: "'–¥–∞–Ω–∞—Å —É' p",
      tomorrow: "'—Å—É—Ç—Ä–∞ —É' p",
      nextWeek: function nextWeek11(date) {
        var day = date.getUTCDay();
        switch (day) {
          case 0:
            return "'—Å–ª–µ–¥–µ—õ–µ –Ω–µ–¥–µ—ô–µ —É' p";
          case 3:
            return "'—Å–ª–µ–¥–µ—õ—É —Å—Ä–µ–¥—É —É' p";
          case 6:
            return "'—Å–ª–µ–¥–µ—õ—É —Å—É–±–æ—Ç—É —É' p";
          default:
            return "'—Å–ª–µ–¥–µ—õ–∏' EEEE '—É' p";
        }
      },
      other: "P"
    };
    formatRelative92 = function formatRelative93(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale46[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default47 = formatRelative92;
  }
});

// node_modules/date-fns/esm/locale/sr/_lib/localize/index.js
var eraValues46, quarterValues46, monthValues46, formattingMonthValues12, dayValues46, formattingDayPeriodValues36, dayPeriodValues46, ordinalNumber91, localize46, localize_default47;
var init_localize47 = __esm({
  "node_modules/date-fns/esm/locale/sr/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues46 = {
      narrow: ["–ø—Ä.–Ω.–µ.", "–ê–î"],
      abbreviated: ["–ø—Ä. –•—Ä.", "–ø–æ. –•—Ä."],
      wide: ["–ü—Ä–µ –•—Ä–∏—Å—Ç–∞", "–ü–æ—Å–ª–µ –•—Ä–∏—Å—Ç–∞"]
    };
    quarterValues46 = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. –∫–≤.", "2. –∫–≤.", "3. –∫–≤.", "4. –∫–≤."],
      wide: ["1. –∫–≤–∞—Ä—Ç–∞–ª", "2. –∫–≤–∞—Ä—Ç–∞–ª", "3. –∫–≤–∞—Ä—Ç–∞–ª", "4. –∫–≤–∞—Ä—Ç–∞–ª"]
    };
    monthValues46 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["—ò–∞–Ω", "—Ñ–µ–±", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞—ò", "—ò—É–Ω", "—ò—É–ª", "–∞–≤–≥", "—Å–µ–ø", "–æ–∫—Ç", "–Ω–æ–≤", "–¥–µ—Ü"],
      wide: ["—ò–∞–Ω—É–∞—Ä", "—Ñ–µ–±—Ä—É–∞—Ä", "–º–∞—Ä—Ç", "–∞–ø—Ä–∏–ª", "–º–∞—ò", "—ò—É–Ω", "—ò—É–ª", "–∞–≤–≥—É—Å—Ç", "—Å–µ–ø—Ç–µ–º–±–∞—Ä", "–æ–∫—Ç–æ–±–∞—Ä", "–Ω–æ–≤–µ–º–±–∞—Ä", "–¥–µ—Ü–µ–º–±–∞—Ä"]
    };
    formattingMonthValues12 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["—ò–∞–Ω", "—Ñ–µ–±", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞—ò", "—ò—É–Ω", "—ò—É–ª", "–∞–≤–≥", "—Å–µ–ø", "–æ–∫—Ç", "–Ω–æ–≤", "–¥–µ—Ü"],
      wide: ["—ò–∞–Ω—É–∞—Ä", "—Ñ–µ–±—Ä—É–∞—Ä", "–º–∞—Ä—Ç", "–∞–ø—Ä–∏–ª", "–º–∞—ò", "—ò—É–Ω", "—ò—É–ª", "–∞–≤–≥—É—Å—Ç", "—Å–µ–ø—Ç–µ–º–±–∞—Ä", "–æ–∫—Ç–æ–±–∞—Ä", "–Ω–æ–≤–µ–º–±–∞—Ä", "–¥–µ—Ü–µ–º–±–∞—Ä"]
    };
    dayValues46 = {
      narrow: ["–ù", "–ü", "–£", "–°", "–ß", "–ü", "–°"],
      short: ["–Ω–µ–¥", "–ø–æ–Ω", "—É—Ç–æ", "—Å—Ä–µ", "—á–µ—Ç", "–ø–µ—Ç", "—Å—É–±"],
      abbreviated: ["–Ω–µ–¥", "–ø–æ–Ω", "—É—Ç–æ", "—Å—Ä–µ", "—á–µ—Ç", "–ø–µ—Ç", "—Å—É–±"],
      wide: ["–Ω–µ–¥–µ—ô–∞", "–ø–æ–Ω–µ–¥–µ—ô–∞–∫", "—É—Ç–æ—Ä–∞–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤—Ä—Ç–∞–∫", "–ø–µ—Ç–∞–∫", "—Å—É–±–æ—Ç–∞"]
    };
    formattingDayPeriodValues36 = {
      narrow: {
        am: "–ê–ú",
        pm: "–ü–ú",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ–ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      },
      abbreviated: {
        am: "–ê–ú",
        pm: "–ü–ú",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ–ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      }
    };
    dayPeriodValues46 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ–ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ–ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "–ø–æ–Ω–æ—õ",
        noon: "–ø–æ–¥–Ω–µ",
        morning: "—É—ò—É—Ç—Ä—É",
        afternoon: "–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ",
        evening: "—É–≤–µ—á–µ",
        night: "–Ω–æ—õ—É"
      }
    };
    ordinalNumber91 = function ordinalNumber92(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize46 = {
      ordinalNumber: ordinalNumber91,
      era: buildLocalizeFn({
        values: eraValues46,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues46,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback46(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues46,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues12,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues46,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues46,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues36,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default47 = localize46;
  }
});

// node_modules/date-fns/esm/locale/sr/_lib/match/index.js
var matchOrdinalNumberPattern46, parseOrdinalNumberPattern46, matchEraPatterns46, parseEraPatterns46, matchQuarterPatterns46, parseQuarterPatterns46, matchMonthPatterns46, parseMonthPatterns46, matchDayPatterns46, parseDayPatterns46, matchDayPeriodPatterns46, parseDayPeriodPatterns46, match46, match_default47;
var init_match47 = __esm({
  "node_modules/date-fns/esm/locale/sr/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern46 = /^(\d+)\./i;
    parseOrdinalNumberPattern46 = /\d+/i;
    matchEraPatterns46 = {
      narrow: /^(–ø—Ä\.–Ω\.–µ\.|–ê–î)/i,
      abbreviated: /^(–ø—Ä\.\s?–•—Ä\.|–ø–æ\.\s?–•—Ä\.)/i,
      wide: /^(–ü—Ä–µ –•—Ä–∏—Å—Ç–∞|–ø—Ä–µ –Ω–æ–≤–µ –µ—Ä–µ|–ü–æ—Å–ª–µ –•—Ä–∏—Å—Ç–∞|–Ω–æ–≤–∞ –µ—Ä–∞)/i
    };
    parseEraPatterns46 = {
      any: [/^–ø—Ä/i, /^(–ø–æ|–Ω–æ–≤–∞)/i]
    };
    matchQuarterPatterns46 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?–∫–≤\.?/i,
      wide: /^[1234]\. –∫–≤–∞—Ä—Ç–∞–ª/i
    };
    parseQuarterPatterns46 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns46 = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(—ò–∞–Ω|—Ñ–µ–±|–º–∞—Ä|–∞–ø—Ä|–º–∞—ò|—ò—É–Ω|—ò—É–ª|–∞–≤–≥|—Å–µ–ø|–æ–∫—Ç|–Ω–æ–≤|–¥–µ—Ü)/i,
      wide: /^((—ò–∞–Ω—É–∞—Ä|—ò–∞–Ω—É–∞—Ä–∞)|(—Ñ–µ–±—Ä—É–∞—Ä|—Ñ–µ–±—Ä—É–∞—Ä–∞)|(–º–∞—Ä—Ç|–º–∞—Ä—Ç–∞)|(–∞–ø—Ä–∏–ª|–∞–ø—Ä–∏–ª–∞)|(–º—ò–∞|–º–∞—ò–∞)|(—ò—É–Ω|—ò—É–Ω–∞)|(—ò—É–ª|—ò—É–ª–∞)|(–∞–≤–≥—É—Å—Ç|–∞–≤–≥—É—Å—Ç–∞)|(—Å–µ–ø—Ç–µ–º–±–∞—Ä|—Å–µ–ø—Ç–µ–º–±—Ä–∞)|(–æ–∫—Ç–æ–±–∞—Ä|–æ–∫—Ç–æ–±—Ä–∞)|(–Ω–æ–≤–µ–º–±–∞—Ä|–Ω–æ–≤–µ–º–±—Ä–∞)|(–¥–µ—Ü–µ–º–±–∞—Ä|–¥–µ—Ü–µ–º–±—Ä–∞))/i
    };
    parseMonthPatterns46 = {
      narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
      any: [/^—ò–∞/i, /^—Ñ/i, /^–º–∞—Ä/i, /^–∞–ø/i, /^–º–∞—ò/i, /^—ò—É–Ω/i, /^—ò—É–ª/i, /^–∞–≤–≥/i, /^—Å/i, /^–æ/i, /^–Ω/i, /^–¥/i]
    };
    matchDayPatterns46 = {
      narrow: /^[–ø—É—Å—á–Ω]/i,
      short: /^(–Ω–µ–¥|–ø–æ–Ω|—É—Ç–æ|—Å—Ä–µ|—á–µ—Ç|–ø–µ—Ç|—Å—É–±)/i,
      abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|—É—Ç–æ|—Å—Ä–µ|—á–µ—Ç|–ø–µ—Ç|—Å—É–±)/i,
      wide: /^(–Ω–µ–¥–µ—ô–∞|–ø–æ–Ω–µ–¥–µ—ô–∞–∫|—É—Ç–æ—Ä–∞–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤—Ä—Ç–∞–∫|–ø–µ—Ç–∞–∫|—Å—É–±–æ—Ç–∞)/i
    };
    parseDayPatterns46 = {
      narrow: [/^–ø/i, /^—É/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i, /^–Ω/i],
      any: [/^–Ω–µ–¥/i, /^–ø–æ–Ω/i, /^—É—Ç–æ/i, /^—Å—Ä–µ/i, /^—á–µ—Ç/i, /^–ø–µ—Ç/i, /^—Å—É–±/i]
    };
    matchDayPeriodPatterns46 = {
      any: /^(–∞–º|–ø–º|–ø–æ–Ω–æ—õ|(–ø–æ)?–ø–æ–¥–Ω–µ|—É–≤–µ—á–µ|–Ω–æ—õ—É|–ø–æ—Å–ª–µ –ø–æ–¥–Ω–µ|—É—ò—É—Ç—Ä—É)/i
    };
    parseDayPeriodPatterns46 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^–ø–æ–Ω–æ/i,
        noon: /^–ø–æ–¥/i,
        morning: /—É—ò—É—Ç—Ä—É/i,
        afternoon: /(–ø–æ—Å–ª–µ\s|–ø–æ)+–ø–æ–¥–Ω–µ/i,
        evening: /(—É–≤–µ—á–µ)/i,
        night: /(–Ω–æ—õ—É)/i
      }
    };
    match46 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern46,
        parsePattern: parseOrdinalNumberPattern46,
        valueCallback: function valueCallback90(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns46,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns46,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns46,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns46,
        defaultParseWidth: "any",
        valueCallback: function valueCallback91(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns46,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns46,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns46,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns46,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns46,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns46,
        defaultParseWidth: "any"
      })
    };
    match_default47 = match46;
  }
});

// node_modules/date-fns/esm/locale/sr/index.js
var sr_exports = {};
__export(sr_exports, {
  default: () => sr_default
});
var locale50, sr_default;
var init_sr = __esm({
  "node_modules/date-fns/esm/locale/sr/index.js"() {
    init_formatDistance49();
    init_formatLong50();
    init_formatRelative48();
    init_localize47();
    init_match47();
    locale50 = {
      code: "sr",
      formatDistance: formatDistance_default48,
      formatLong: formatLong_default50,
      formatRelative: formatRelative_default47,
      localize: localize_default47,
      match: match_default47,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    sr_default = locale50;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/_lib/formatDistance/index.js
var formatDistanceLocale47, formatDistance96, formatDistance_default49;
var init_formatDistance50 = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/_lib/formatDistance/index.js"() {
    formatDistanceLocale47 = {
      lessThanXSeconds: {
        one: {
          standalone: "manje od 1 sekunde",
          withPrepositionAgo: "manje od 1 sekunde",
          withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
      },
      xSeconds: {
        one: {
          standalone: "1 sekunda",
          withPrepositionAgo: "1 sekunde",
          withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
      },
      halfAMinute: "pola minute",
      lessThanXMinutes: {
        one: {
          standalone: "manje od 1 minute",
          withPrepositionAgo: "manje od 1 minute",
          withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
      },
      xMinutes: {
        one: {
          standalone: "1 minuta",
          withPrepositionAgo: "1 minute",
          withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: {
          standalone: "oko 1 sat",
          withPrepositionAgo: "oko 1 sat",
          withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
      },
      xHours: {
        one: {
          standalone: "1 sat",
          withPrepositionAgo: "1 sat",
          withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
      },
      xDays: {
        one: {
          standalone: "1 dan",
          withPrepositionAgo: "1 dan",
          withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
      },
      aboutXWeeks: {
        one: {
          standalone: "oko 1 nedelju",
          withPrepositionAgo: "oko 1 nedelju",
          withPrepositionIn: "oko 1 nedelju"
        },
        dual: "oko {{count}} nedelje",
        other: "oko {{count}} nedelje"
      },
      xWeeks: {
        one: {
          standalone: "1 nedelju",
          withPrepositionAgo: "1 nedelju",
          withPrepositionIn: "1 nedelju"
        },
        dual: "{{count}} nedelje",
        other: "{{count}} nedelje"
      },
      aboutXMonths: {
        one: {
          standalone: "oko 1 mesec",
          withPrepositionAgo: "oko 1 mesec",
          withPrepositionIn: "oko 1 mesec"
        },
        dual: "oko {{count}} meseca",
        other: "oko {{count}} meseci"
      },
      xMonths: {
        one: {
          standalone: "1 mesec",
          withPrepositionAgo: "1 mesec",
          withPrepositionIn: "1 mesec"
        },
        dual: "{{count}} meseca",
        other: "{{count}} meseci"
      },
      aboutXYears: {
        one: {
          standalone: "oko 1 godinu",
          withPrepositionAgo: "oko 1 godinu",
          withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
      },
      xYears: {
        one: {
          standalone: "1 godina",
          withPrepositionAgo: "1 godine",
          withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
      },
      overXYears: {
        one: {
          standalone: "preko 1 godinu",
          withPrepositionAgo: "preko 1 godinu",
          withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
      },
      almostXYears: {
        one: {
          standalone: "gotovo 1 godinu",
          withPrepositionAgo: "gotovo 1 godinu",
          withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
      }
    };
    formatDistance96 = function formatDistance97(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale47[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "za " + result;
        } else {
          return "pre " + result;
        }
      }
      return result;
    };
    formatDistance_default49 = formatDistance96;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/_lib/formatLong/index.js
var dateFormats51, timeFormats51, dateTimeFormats51, formatLong51, formatLong_default51;
var init_formatLong51 = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats51 = {
      full: "EEEE, d. MMMM yyyy.",
      long: "d. MMMM yyyy.",
      medium: "d. MMM yy.",
      short: "dd. MM. yy."
    };
    timeFormats51 = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats51 = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong51 = {
      date: buildFormatLongFn({
        formats: dateFormats51,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats51,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats51,
        defaultWidth: "full"
      })
    };
    formatLong_default51 = formatLong51;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/_lib/formatRelative/index.js
var formatRelativeLocale47, formatRelative94, formatRelative_default48;
var init_formatRelative49 = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/_lib/formatRelative/index.js"() {
    formatRelativeLocale47 = {
      lastWeek: function lastWeek14(date) {
        switch (date.getUTCDay()) {
          case 0:
            return "'pro≈°le nedelje u' p";
          case 3:
            return "'pro≈°le srede u' p";
          case 6:
            return "'pro≈°le subote u' p";
          default:
            return "'pro≈°li' EEEE 'u' p";
        }
      },
      yesterday: "'juƒçe u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: function nextWeek12(date) {
        switch (date.getUTCDay()) {
          case 0:
            return "'sledeƒáe nedelje u' p";
          case 3:
            return "'sledeƒáu sredu u' p";
          case 6:
            return "'sledeƒáu subotu u' p";
          default:
            return "'sledeƒái' EEEE 'u' p";
        }
      },
      other: "P"
    };
    formatRelative94 = function formatRelative95(token, date, _baseDate, _options) {
      var format2 = formatRelativeLocale47[token];
      if (typeof format2 === "function") {
        return format2(date);
      }
      return format2;
    };
    formatRelative_default48 = formatRelative94;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/_lib/localize/index.js
var eraValues47, quarterValues47, monthValues47, formattingMonthValues13, dayValues47, formattingDayPeriodValues37, dayPeriodValues47, ordinalNumber93, localize47, localize_default48;
var init_localize48 = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues47 = {
      narrow: ["pr.n.e.", "AD"],
      abbreviated: ["pr. Hr.", "po. Hr."],
      wide: ["Pre Hrista", "Posle Hrista"]
    };
    quarterValues47 = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    monthValues47 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
      wide: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"]
    };
    formattingMonthValues13 = {
      narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
      abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
      wide: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"]
    };
    dayValues47 = {
      narrow: ["N", "P", "U", "S", "ƒå", "P", "S"],
      short: ["ned", "pon", "uto", "sre", "ƒçet", "pet", "sub"],
      abbreviated: ["ned", "pon", "uto", "sre", "ƒçet", "pet", "sub"],
      wide: ["nedelja", "ponedeljak", "utorak", "sreda", "ƒçetvrtak", "petak", "subota"]
    };
    formattingDayPeriodValues37 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveƒçe",
        night: "noƒáu"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveƒçe",
        night: "noƒáu"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uveƒçe",
        night: "noƒáu"
      }
    };
    dayPeriodValues47 = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveƒçe",
        night: "noƒáu"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveƒçe",
        night: "noƒáu"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoƒá",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uveƒçe",
        night: "noƒáu"
      }
    };
    ordinalNumber93 = function ordinalNumber94(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize47 = {
      ordinalNumber: ordinalNumber93,
      era: buildLocalizeFn({
        values: eraValues47,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues47,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback47(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues47,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues13,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues47,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues47,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues37,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default48 = localize47;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/_lib/match/index.js
var matchOrdinalNumberPattern47, parseOrdinalNumberPattern47, matchEraPatterns47, parseEraPatterns47, matchQuarterPatterns47, parseQuarterPatterns47, matchMonthPatterns47, parseMonthPatterns47, matchDayPatterns47, parseDayPatterns47, matchDayPeriodPatterns47, parseDayPeriodPatterns47, match47, match_default48;
var init_match48 = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern47 = /^(\d+)\./i;
    parseOrdinalNumberPattern47 = /\d+/i;
    matchEraPatterns47 = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
      wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
    };
    parseEraPatterns47 = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    matchQuarterPatterns47 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    parseQuarterPatterns47 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns47 = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
      wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
    };
    parseMonthPatterns47 = {
      narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns47 = {
      narrow: /^[npusƒçc]/i,
      short: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sre|(ƒçet|cet)|pet|sub)/i,
      wide: /^(nedelja|ponedeljak|utorak|sreda|(ƒçetvrtak|cetvrtak)|petak|subota)/i
    };
    parseDayPatterns47 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    matchDayPeriodPatterns47 = {
      any: /^(am|pm|ponoc|ponoƒá|(po)?podne|uvece|uveƒçe|noƒáu|posle podne|ujutru)/i
    };
    parseDayPeriodPatterns47 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(posle\s|po)+podne/i,
        evening: /(uvece|uveƒçe)/i,
        night: /(nocu|noƒáu)/i
      }
    };
    match47 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern47,
        parsePattern: parseOrdinalNumberPattern47,
        valueCallback: function valueCallback92(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns47,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns47,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns47,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns47,
        defaultParseWidth: "any",
        valueCallback: function valueCallback93(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns47,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns47,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns47,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns47,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns47,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns47,
        defaultParseWidth: "any"
      })
    };
    match_default48 = match47;
  }
});

// node_modules/date-fns/esm/locale/sr-Latn/index.js
var sr_Latn_exports = {};
__export(sr_Latn_exports, {
  default: () => sr_Latn_default
});
var locale51, sr_Latn_default;
var init_sr_Latn = __esm({
  "node_modules/date-fns/esm/locale/sr-Latn/index.js"() {
    init_formatDistance50();
    init_formatLong51();
    init_formatRelative49();
    init_localize48();
    init_match48();
    locale51 = {
      code: "sr-Latn",
      formatDistance: formatDistance_default49,
      formatLong: formatLong_default51,
      formatRelative: formatRelative_default48,
      localize: localize_default48,
      match: match_default48,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    sr_Latn_default = locale51;
  }
});

// node_modules/date-fns/esm/locale/sv/_lib/formatDistance/index.js
var formatDistanceLocale48, wordMapping2, formatDistance98, formatDistance_default50;
var init_formatDistance51 = __esm({
  "node_modules/date-fns/esm/locale/sv/_lib/formatDistance/index.js"() {
    formatDistanceLocale48 = {
      lessThanXSeconds: {
        one: "mindre √§n en sekund",
        other: "mindre √§n {{count}} sekunder"
      },
      xSeconds: {
        one: "en sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "en halv minut",
      lessThanXMinutes: {
        one: "mindre √§n en minut",
        other: "mindre √§n {{count}} minuter"
      },
      xMinutes: {
        one: "en minut",
        other: "{{count}} minuter"
      },
      aboutXHours: {
        one: "ungef√§r en timme",
        other: "ungef√§r {{count}} timmar"
      },
      xHours: {
        one: "en timme",
        other: "{{count}} timmar"
      },
      xDays: {
        one: "en dag",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "ungef√§r en vecka",
        other: "ungef√§r {{count}} vecka"
      },
      xWeeks: {
        one: "en vecka",
        other: "{{count}} vecka"
      },
      aboutXMonths: {
        one: "ungef√§r en m√•nad",
        other: "ungef√§r {{count}} m√•nader"
      },
      xMonths: {
        one: "en m√•nad",
        other: "{{count}} m√•nader"
      },
      aboutXYears: {
        one: "ungef√§r ett √•r",
        other: "ungef√§r {{count}} √•r"
      },
      xYears: {
        one: "ett √•r",
        other: "{{count}} √•r"
      },
      overXYears: {
        one: "√∂ver ett √•r",
        other: "√∂ver {{count}} √•r"
      },
      almostXYears: {
        one: "n√§stan ett √•r",
        other: "n√§stan {{count}} √•r"
      }
    };
    wordMapping2 = ["noll", "en", "tv√•", "tre", "fyra", "fem", "sex", "sju", "√•tta", "nio", "tio", "elva", "tolv"];
    formatDistance98 = function formatDistance99(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale48[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        if (options && options.onlyNumeric) {
          result = tokenValue.other.replace("{{count}}", String(count));
        } else {
          result = tokenValue.other.replace("{{count}}", count < 13 ? wordMapping2[count] : String(count));
        }
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " sedan";
        }
      }
      return result;
    };
    formatDistance_default50 = formatDistance98;
  }
});

// node_modules/date-fns/esm/locale/sv/_lib/formatLong/index.js
var dateFormats52, timeFormats52, dateTimeFormats52, formatLong52, formatLong_default52;
var init_formatLong52 = __esm({
  "node_modules/date-fns/esm/locale/sv/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats52 = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "y-MM-dd"
    };
    timeFormats52 = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats52 = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong52 = {
      date: buildFormatLongFn({
        formats: dateFormats52,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats52,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats52,
        defaultWidth: "full"
      })
    };
    formatLong_default52 = formatLong52;
  }
});

// node_modules/date-fns/esm/locale/sv/_lib/formatRelative/index.js
var formatRelativeLocale48, formatRelative96, formatRelative_default49;
var init_formatRelative50 = __esm({
  "node_modules/date-fns/esm/locale/sv/_lib/formatRelative/index.js"() {
    formatRelativeLocale48 = {
      lastWeek: "'i' EEEE's kl.' p",
      yesterday: "'ig√•r kl.' p",
      today: "'idag kl.' p",
      tomorrow: "'imorgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    formatRelative96 = function formatRelative97(token, _date, _baseDate, _options) {
      return formatRelativeLocale48[token];
    };
    formatRelative_default49 = formatRelative96;
  }
});

// node_modules/date-fns/esm/locale/sv/_lib/localize/index.js
var eraValues48, quarterValues48, monthValues48, dayValues48, dayPeriodValues48, formattingDayPeriodValues38, ordinalNumber95, localize48, localize_default49;
var init_localize49 = __esm({
  "node_modules/date-fns/esm/locale/sv/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues48 = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["f√∂re Kristus", "efter Kristus"]
    };
    quarterValues48 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"]
    };
    monthValues48 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec."],
      wide: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"]
    };
    dayValues48 = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["s√∂", "m√•", "ti", "on", "to", "fr", "l√∂"],
      abbreviated: ["s√∂n", "m√•n", "tis", "ons", "tors", "fre", "l√∂r"],
      wide: ["s√∂ndag", "m√•ndag", "tisdag", "onsdag", "torsdag", "fredag", "l√∂rdag"]
    };
    dayPeriodValues48 = {
      narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "morg.",
        afternoon: "efterm.",
        evening: "kv√§ll",
        night: "natt"
      },
      abbreviated: {
        am: "f.m.",
        pm: "e.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "efterm.",
        evening: "kv√§ll",
        night: "natt"
      },
      wide: {
        am: "f√∂rmiddag",
        pm: "eftermiddag",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "eftermiddag",
        evening: "kv√§ll",
        night: "natt"
      }
    };
    formattingDayPeriodValues38 = {
      narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• efterm.",
        evening: "p√• kv√§llen",
        night: "p√• natten"
      },
      abbreviated: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morg.",
        afternoon: "p√• efterm.",
        evening: "p√• kv√§llen",
        night: "p√• natten"
      },
      wide: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p√• morgonen",
        afternoon: "p√• eftermiddagen",
        evening: "p√• kv√§llen",
        night: "p√• natten"
      }
    };
    ordinalNumber95 = function ordinalNumber96(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
          case 2:
            return number + ":a";
        }
      }
      return number + ":e";
    };
    localize48 = {
      ordinalNumber: ordinalNumber95,
      era: buildLocalizeFn({
        values: eraValues48,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues48,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback48(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues48,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues48,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues48,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues38,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default49 = localize48;
  }
});

// node_modules/date-fns/esm/locale/sv/_lib/match/index.js
var matchOrdinalNumberPattern48, parseOrdinalNumberPattern48, matchEraPatterns48, parseEraPatterns48, matchQuarterPatterns48, parseQuarterPatterns48, matchMonthPatterns48, parseMonthPatterns48, matchDayPatterns48, parseDayPatterns48, matchDayPeriodPatterns48, parseDayPeriodPatterns48, match48, match_default49;
var init_match49 = __esm({
  "node_modules/date-fns/esm/locale/sv/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern48 = /^(\d+)(:a|:e)?/i;
    parseOrdinalNumberPattern48 = /\d+/i;
    matchEraPatterns48 = {
      narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      wide: /^(f√∂re Kristus|f√∂re v√•r tid|efter Kristus|v√•r tid)/i
    };
    parseEraPatterns48 = {
      any: [/^f/i, /^[ev]/i]
    };
    matchQuarterPatterns48 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](:a|:e)? kvartalet/i
    };
    parseQuarterPatterns48 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns48 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
      wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
    };
    parseMonthPatterns48 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns48 = {
      narrow: /^[smtofl]/i,
      short: /^(s√∂|m√•|ti|on|to|fr|l√∂)/i,
      abbreviated: /^(s√∂n|m√•n|tis|ons|tors|fre|l√∂r)/i,
      wide: /^(s√∂ndag|m√•ndag|tisdag|onsdag|torsdag|fredag|l√∂rdag)/i
    };
    parseDayPatterns48 = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    matchDayPeriodPatterns48 = {
      any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(p√•) (morgonen|eftermiddagen|kv√§llen|natten))/i
    };
    parseDayPeriodPatterns48 = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /eftermiddag/i,
        evening: /kv√§ll/i,
        night: /natt/i
      }
    };
    match48 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern48,
        parsePattern: parseOrdinalNumberPattern48,
        valueCallback: function valueCallback94(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns48,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns48,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns48,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns48,
        defaultParseWidth: "any",
        valueCallback: function valueCallback95(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns48,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns48,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns48,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns48,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns48,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns48,
        defaultParseWidth: "any"
      })
    };
    match_default49 = match48;
  }
});

// node_modules/date-fns/esm/locale/sv/index.js
var sv_exports = {};
__export(sv_exports, {
  default: () => sv_default
});
var locale52, sv_default;
var init_sv = __esm({
  "node_modules/date-fns/esm/locale/sv/index.js"() {
    init_formatDistance51();
    init_formatLong52();
    init_formatRelative50();
    init_localize49();
    init_match49();
    locale52 = {
      code: "sv",
      formatDistance: formatDistance_default50,
      formatLong: formatLong_default52,
      formatRelative: formatRelative_default49,
      localize: localize_default49,
      match: match_default49,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    sv_default = locale52;
  }
});

// node_modules/date-fns/esm/locale/ta/_lib/formatDistance/index.js
function isPluralType2(val) {
  return val.one !== void 0;
}
var formatDistanceLocale49, formatDistance100, formatDistance_default51;
var init_formatDistance52 = __esm({
  "node_modules/date-fns/esm/locale/ta/_lib/formatDistance/index.js"() {
    formatDistanceLocale49 = {
      lessThanXSeconds: {
        one: {
          default: "‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï",
          in: "‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç",
          ago: "‡Æí‡Æ∞‡ØÅ ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï",
          in: "{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç",
          ago: "{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xSeconds: {
        one: {
          default: "1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø",
          in: "1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡ÆØ‡Æø‡Æ≤‡Øç",
          ago: "1 ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æµ‡Æø‡Æ®‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡Æµ‡Æø‡Æ©‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡Æµ‡Æø‡Æ®‡Ææ‡Æü‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      halfAMinute: {
        default: "‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç",
        in: "‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
        ago: "‡ÆÖ‡Æ∞‡Øà ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
      },
      lessThanXMinutes: {
        one: {
          default: "‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï",
          in: "‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡Æ≥‡Øç",
          ago: "‡Æí‡Æ∞‡ØÅ ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï",
          in: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç",
          ago: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xMinutes: {
        one: {
          default: "1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç",
          in: "1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "1 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      aboutXHours: {
        one: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç"
        }
      },
      xHours: {
        one: {
          default: "1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
          in: "1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "1 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
          in: "{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xDays: {
        one: {
          default: "1 ‡Æ®‡Ææ‡Æ≥‡Øç",
          in: "1 ‡Æ®‡Ææ‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "1 ‡Æ®‡Ææ‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      aboutXWeeks: {
        one: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xWeeks: {
        one: {
          default: "1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç",
          in: "1 ‡Æµ‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "1 ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡Æµ‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      aboutXMonths: {
        one: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xMonths: {
        one: {
          default: "1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç",
          in: "1 ‡ÆÆ‡Ææ‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç",
          ago: "1 ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡ÆÆ‡Ææ‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      aboutXYears: {
        one: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç",
          in: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "‡Æö‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      xYears: {
        one: {
          default: "1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç",
          in: "1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç",
          ago: "1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç",
          in: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      overXYears: {
        one: {
          default: "1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡Øá‡Æ≤‡Øç",
          in: "1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æï",
          ago: "1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æï",
          in: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "{{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      },
      almostXYears: {
        one: {
          default: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç",
          in: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡ÆÜ‡Æ£‡Øç‡Æü‡Æø‡Æ≤‡Øç",
          ago: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü 1 ‡Æµ‡Æ∞‡ØÅ‡Æü‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        },
        other: {
          default: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç",
          in: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç",
          ago: "‡Æï‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æü‡Øç‡Æü {{count}} ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ"
        }
      }
    };
    formatDistance100 = function formatDistance101(token, count, options) {
      var tense = options !== null && options !== void 0 && options.addSuffix ? options.comparison && options.comparison > 0 ? "in" : "ago" : "default";
      var tokenValue = formatDistanceLocale49[token];
      if (!isPluralType2(tokenValue))
        return tokenValue[tense];
      if (count === 1) {
        return tokenValue.one[tense];
      } else {
        return tokenValue.other[tense].replace("{{count}}", String(count));
      }
    };
    formatDistance_default51 = formatDistance100;
  }
});

// node_modules/date-fns/esm/locale/ta/_lib/formatLong/index.js
var dateFormats53, timeFormats53, dateTimeFormats53, formatLong53, formatLong_default53;
var init_formatLong53 = __esm({
  "node_modules/date-fns/esm/locale/ta/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats53 = {
      full: "EEEE, d MMMM, y",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "d/M/yy"
    };
    timeFormats53 = {
      full: "a h:mm:ss zzzz",
      long: "a h:mm:ss z",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    dateTimeFormats53 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong53 = {
      date: buildFormatLongFn({
        formats: dateFormats53,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats53,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats53,
        defaultWidth: "full"
      })
    };
    formatLong_default53 = formatLong53;
  }
});

// node_modules/date-fns/esm/locale/ta/_lib/formatRelative/index.js
var formatRelativeLocale49, formatRelative98, formatRelative_default50;
var init_formatRelative51 = __esm({
  "node_modules/date-fns/esm/locale/ta/_lib/formatRelative/index.js"() {
    formatRelativeLocale49 = {
      lastWeek: "'‡Æï‡Æü‡Æ®‡Øç‡Æ§' eeee p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
      yesterday: "'‡Æ®‡Øá‡Æ±‡Øç‡Æ±‡ØÅ ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
      today: "'‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
      tomorrow: "'‡Æ®‡Ææ‡Æ≥‡Øà ' p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
      nextWeek: "eeee p '‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ'",
      other: "P"
    };
    formatRelative98 = function formatRelative99(token, _date, _baseDate, _options) {
      return formatRelativeLocale49[token];
    };
    formatRelative_default50 = formatRelative98;
  }
});

// node_modules/date-fns/esm/locale/ta/_lib/localize/index.js
var eraValues49, quarterValues49, monthValues49, dayValues49, dayPeriodValues49, formattingDayPeriodValues39, ordinalNumber97, localize49, localize_default50;
var init_localize50 = __esm({
  "node_modules/date-fns/esm/locale/ta/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues49 = {
      narrow: ["‡Æï‡Æø.‡ÆÆ‡ØÅ.", "‡Æï‡Æø.‡Æ™‡Æø."],
      abbreviated: ["‡Æï‡Æø.‡ÆÆ‡ØÅ.", "‡Æï‡Æø.‡Æ™‡Æø."],
      // CLDR #1624, #1626
      wide: ["‡Æï‡Æø‡Æ±‡Æø‡Æ∏‡Øç‡Æ§‡ØÅ‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç", "‡ÆÖ‡Æ©‡Øç‡Æ©‡Øã ‡Æü‡Øã‡ÆÆ‡Æø‡Æ©‡Æø"]
      // CLDR #1620, #1622
    };
    quarterValues49 = {
      // CLDR #1644 - #1647
      narrow: ["1", "2", "3", "4"],
      // CLDR #1636 - #1639
      abbreviated: ["‡Æï‡Ææ‡Æ≤‡Ææ.1", "‡Æï‡Ææ‡Æ≤‡Ææ.2", "‡Æï‡Ææ‡Æ≤‡Ææ.3", "‡Æï‡Ææ‡Æ≤‡Ææ.4"],
      // CLDR #1628 - #1631
      wide: ["‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ", "‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ", "‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ", "‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ"]
    };
    monthValues49 = {
      // CLDR #700 - #711
      narrow: ["‡Æú", "‡Æ™‡Æø", "‡ÆÆ‡Ææ", "‡Æè", "‡ÆÆ‡Øá", "‡Æú‡ØÇ", "‡Æú‡ØÇ", "‡ÆÜ", "‡Æö‡ØÜ", "‡ÆÖ", "‡Æ®", "‡Æü‡Æø"],
      // CLDR #1676 - #1687
      abbreviated: ["‡Æú‡Æ©.", "‡Æ™‡Æø‡Æ™‡Øç.", "‡ÆÆ‡Ææ‡Æ∞‡Øç.", "‡Æè‡Æ™‡Øç.", "‡ÆÆ‡Øá", "‡Æú‡ØÇ‡Æ©‡Øç", "‡Æú‡ØÇ‡Æ≤‡Øà", "‡ÆÜ‡Æï.", "‡Æö‡ØÜ‡Æ™‡Øç.", "‡ÆÖ‡Æï‡Øç.", "‡Æ®‡Æµ.", "‡Æü‡Æø‡Æö."],
      // CLDR #1652 - #1663
      wide: [
        "‡Æú‡Æ©‡Æµ‡Æ∞‡Æø",
        // January
        "‡Æ™‡Æø‡Æ™‡Øç‡Æ∞‡Æµ‡Æ∞‡Æø",
        // February
        "‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æö‡Øç",
        // March
        "‡Æè‡Æ™‡Øç‡Æ∞‡Æ≤‡Øç",
        // April
        "‡ÆÆ‡Øá",
        // May
        "‡Æú‡ØÇ‡Æ©‡Øç",
        // June
        "‡Æú‡ØÇ‡Æ≤‡Øà",
        // July
        "‡ÆÜ‡Æï‡Æ∏‡Øç‡Æü‡Øç",
        // August
        "‡Æö‡ØÜ‡Æ™‡Øç‡Æü‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç",
        // September
        "‡ÆÖ‡Æï‡Øç‡Æü‡Øã‡Æ™‡Æ∞‡Øç",
        // October
        "‡Æ®‡Æµ‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç",
        // November
        "‡Æü‡Æø‡Æö‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç"
        // December
      ]
    };
    dayValues49 = {
      // CLDR #1766 - #1772
      narrow: ["‡Æû‡Ææ", "‡Æ§‡Æø", "‡Æö‡ØÜ", "‡Æ™‡ØÅ", "‡Æµ‡Æø", "‡Æµ‡ØÜ", "‡Æö"],
      // CLDR #1752 - #1758
      short: ["‡Æû‡Ææ", "‡Æ§‡Æø", "‡Æö‡ØÜ", "‡Æ™‡ØÅ", "‡Æµ‡Æø", "‡Æµ‡ØÜ", "‡Æö"],
      // CLDR #1738 - #1744
      abbreviated: ["‡Æû‡Ææ‡ÆØ‡Æø.", "‡Æ§‡Æø‡Æô‡Øç.", "‡Æö‡ØÜ‡Æµ‡Øç.", "‡Æ™‡ØÅ‡Æ§.", "‡Æµ‡Æø‡ÆØ‡Ææ.", "‡Æµ‡ØÜ‡Æ≥‡Øç.", "‡Æö‡Æ©‡Æø"],
      // CLDR #1724 - #1730
      wide: [
        "‡Æû‡Ææ‡ÆØ‡Æø‡Æ±‡ØÅ",
        // Sunday
        "‡Æ§‡Æø‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        // Monday
        "‡Æö‡ØÜ‡Æµ‡Øç‡Æµ‡Ææ‡ÆØ‡Øç",
        // Tuesday
        "‡Æ™‡ØÅ‡Æ§‡Æ©‡Øç",
        // Wednesday
        "‡Æµ‡Æø‡ÆØ‡Ææ‡Æ¥‡Æ©‡Øç",
        // Thursday
        "‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Æø",
        // Friday
        "‡Æö‡Æ©‡Æø"
        // Saturday
      ]
    };
    dayPeriodValues49 = {
      narrow: {
        am: "‡ÆÆ‡ØÅ.‡Æ™",
        pm: "‡Æ™‡Æø.‡Æ™",
        midnight: "‡Æ®‡Æ≥‡Øç.",
        noon: "‡Æ®‡Æ£‡Øç.",
        morning: "‡Æï‡Ææ.",
        afternoon: "‡ÆÆ‡Æ§‡Æø.",
        evening: "‡ÆÆ‡Ææ.",
        night: "‡Æá‡Æ∞."
      },
      abbreviated: {
        am: "‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        pm: "‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        midnight: "‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ",
        noon: "‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        morning: "‡Æï‡Ææ‡Æ≤‡Øà",
        afternoon: "‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        evening: "‡ÆÆ‡Ææ‡Æ≤‡Øà",
        night: "‡Æá‡Æ∞‡Æµ‡ØÅ"
      },
      wide: {
        am: "‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        pm: "‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        midnight: "‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ",
        noon: "‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        morning: "‡Æï‡Ææ‡Æ≤‡Øà",
        afternoon: "‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        evening: "‡ÆÆ‡Ææ‡Æ≤‡Øà",
        night: "‡Æá‡Æ∞‡Æµ‡ØÅ"
      }
    };
    formattingDayPeriodValues39 = {
      narrow: {
        am: "‡ÆÆ‡ØÅ.‡Æ™",
        pm: "‡Æ™‡Æø.‡Æ™",
        midnight: "‡Æ®‡Æ≥‡Øç.",
        noon: "‡Æ®‡Æ£‡Øç.",
        morning: "‡Æï‡Ææ.",
        afternoon: "‡ÆÆ‡Æ§‡Æø.",
        evening: "‡ÆÆ‡Ææ.",
        night: "‡Æá‡Æ∞."
      },
      abbreviated: {
        am: "‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        pm: "‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        midnight: "‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ",
        noon: "‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        morning: "‡Æï‡Ææ‡Æ≤‡Øà",
        afternoon: "‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        evening: "‡ÆÆ‡Ææ‡Æ≤‡Øà",
        night: "‡Æá‡Æ∞‡Æµ‡ØÅ"
      },
      wide: {
        am: "‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        pm: "‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        midnight: "‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ",
        noon: "‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç",
        morning: "‡Æï‡Ææ‡Æ≤‡Øà",
        afternoon: "‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç",
        evening: "‡ÆÆ‡Ææ‡Æ≤‡Øà",
        night: "‡Æá‡Æ∞‡Æµ‡ØÅ"
      }
    };
    ordinalNumber97 = function ordinalNumber98(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize49 = {
      ordinalNumber: ordinalNumber97,
      era: buildLocalizeFn({
        values: eraValues49,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues49,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback49(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues49,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues49,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues49,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues39,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default50 = localize49;
  }
});

// node_modules/date-fns/esm/locale/ta/_lib/match/index.js
var matchOrdinalNumberPattern49, parseOrdinalNumberPattern49, matchEraPatterns49, parseEraPatterns49, matchQuarterPatterns49, parseQuarterPatterns49, matchMonthPatterns49, parseMonthPatterns49, matchDayPatterns49, parseDayPatterns49, matchDayPeriodPatterns49, parseDayPeriodPatterns49, match49, match_default50;
var init_match50 = __esm({
  "node_modules/date-fns/esm/locale/ta/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern49 = /^(\d+)(‡Æµ‡Æ§‡ØÅ)?/i;
    parseOrdinalNumberPattern49 = /\d+/i;
    matchEraPatterns49 = {
      narrow: /^(‡Æï‡Æø.‡ÆÆ‡ØÅ.|‡Æï‡Æø.‡Æ™‡Æø.)/i,
      abbreviated: /^(‡Æï‡Æø\.?\s?‡ÆÆ‡ØÅ\.?|‡Æï‡Æø\.?\s?‡Æ™‡Æø\.?)/,
      wide: /^(‡Æï‡Æø‡Æ±‡Æø‡Æ∏‡Øç‡Æ§‡ØÅ‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡ØÅ\s‡ÆÆ‡ØÅ‡Æ©‡Øç|‡ÆÖ‡Æ©‡Øç‡Æ©‡Øã\s‡Æü‡Øã‡ÆÆ‡Æø‡Æ©‡Æø)/i
    };
    parseEraPatterns49 = {
      any: [/‡Æï‡Æø\.?\s?‡ÆÆ‡ØÅ\.?/, /‡Æï‡Æø\.?\s?‡Æ™‡Æø\.?/]
    };
    matchQuarterPatterns49 = {
      narrow: /^[1234]/i,
      abbreviated: /^‡Æï‡Ææ‡Æ≤‡Ææ.[1234]/i,
      wide: /^(‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç|‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç|‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç|‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç) ‡Æï‡Ææ‡Æ≤‡Ææ‡Æ£‡Øç‡Æü‡ØÅ/i
    };
    parseQuarterPatterns49 = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/(1|‡Æï‡Ææ‡Æ≤‡Ææ.1|‡Æí‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç)/i, /(2|‡Æï‡Ææ‡Æ≤‡Ææ.2|‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç)/i, /(3|‡Æï‡Ææ‡Æ≤‡Ææ.3|‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç)/i, /(4|‡Æï‡Ææ‡Æ≤‡Ææ.4|‡Æ®‡Ææ‡Æ©‡Øç‡Æï‡Ææ‡ÆÆ‡Øç)/i]
    };
    matchMonthPatterns49 = {
      narrow: /^(‡Æú|‡Æ™‡Æø|‡ÆÆ‡Ææ|‡Æè|‡ÆÆ‡Øá|‡Æú‡ØÇ|‡ÆÜ|‡Æö‡ØÜ|‡ÆÖ|‡Æ®|‡Æü‡Æø)$/i,
      abbreviated: /^(‡Æú‡Æ©.|‡Æ™‡Æø‡Æ™‡Øç.|‡ÆÆ‡Ææ‡Æ∞‡Øç.|‡Æè‡Æ™‡Øç.|‡ÆÆ‡Øá|‡Æú‡ØÇ‡Æ©‡Øç|‡Æú‡ØÇ‡Æ≤‡Øà|‡ÆÜ‡Æï.|‡Æö‡ØÜ‡Æ™‡Øç.|‡ÆÖ‡Æï‡Øç.|‡Æ®‡Æµ.|‡Æü‡Æø‡Æö.)/i,
      wide: /^(‡Æú‡Æ©‡Æµ‡Æ∞‡Æø|‡Æ™‡Æø‡Æ™‡Øç‡Æ∞‡Æµ‡Æ∞‡Æø|‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æö‡Øç|‡Æè‡Æ™‡Øç‡Æ∞‡Æ≤‡Øç|‡ÆÆ‡Øá|‡Æú‡ØÇ‡Æ©‡Øç|‡Æú‡ØÇ‡Æ≤‡Øà|‡ÆÜ‡Æï‡Æ∏‡Øç‡Æü‡Øç|‡Æö‡ØÜ‡Æ™‡Øç‡Æü‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç|‡ÆÖ‡Æï‡Øç‡Æü‡Øã‡Æ™‡Æ∞‡Øç|‡Æ®‡Æµ‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç|‡Æü‡Æø‡Æö‡ÆÆ‡Øç‡Æ™‡Æ∞‡Øç)/i
    };
    parseMonthPatterns49 = {
      narrow: [/^‡Æú$/i, /^‡Æ™‡Æø/i, /^‡ÆÆ‡Ææ/i, /^‡Æè/i, /^‡ÆÆ‡Øá/i, /^‡Æú‡ØÇ/i, /^‡Æú‡ØÇ/i, /^‡ÆÜ/i, /^‡Æö‡ØÜ/i, /^‡ÆÖ/i, /^‡Æ®/i, /^‡Æü‡Æø/i],
      any: [/^‡Æú‡Æ©/i, /^‡Æ™‡Æø/i, /^‡ÆÆ‡Ææ/i, /^‡Æè/i, /^‡ÆÆ‡Øá/i, /^‡Æú‡ØÇ‡Æ©‡Øç/i, /^‡Æú‡ØÇ‡Æ≤‡Øà/i, /^‡ÆÜ/i, /^‡Æö‡ØÜ/i, /^‡ÆÖ/i, /^‡Æ®/i, /^‡Æü‡Æø/i]
    };
    matchDayPatterns49 = {
      narrow: /^(‡Æû‡Ææ|‡Æ§‡Æø|‡Æö‡ØÜ|‡Æ™‡ØÅ|‡Æµ‡Æø|‡Æµ‡ØÜ|‡Æö)/i,
      short: /^(‡Æû‡Ææ|‡Æ§‡Æø|‡Æö‡ØÜ|‡Æ™‡ØÅ|‡Æµ‡Æø|‡Æµ‡ØÜ|‡Æö)/i,
      abbreviated: /^(‡Æû‡Ææ‡ÆØ‡Æø.|‡Æ§‡Æø‡Æô‡Øç.|‡Æö‡ØÜ‡Æµ‡Øç.|‡Æ™‡ØÅ‡Æ§.|‡Æµ‡Æø‡ÆØ‡Ææ.|‡Æµ‡ØÜ‡Æ≥‡Øç.|‡Æö‡Æ©‡Æø)/i,
      wide: /^(‡Æû‡Ææ‡ÆØ‡Æø‡Æ±‡ØÅ|‡Æ§‡Æø‡Æô‡Øç‡Æï‡Æ≥‡Øç|‡Æö‡ØÜ‡Æµ‡Øç‡Æµ‡Ææ‡ÆØ‡Øç|‡Æ™‡ØÅ‡Æ§‡Æ©‡Øç|‡Æµ‡Æø‡ÆØ‡Ææ‡Æ¥‡Æ©‡Øç|‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Æø|‡Æö‡Æ©‡Æø)/i
    };
    parseDayPatterns49 = {
      narrow: [/^‡Æû‡Ææ/i, /^‡Æ§‡Æø/i, /^‡Æö‡ØÜ/i, /^‡Æ™‡ØÅ/i, /^‡Æµ‡Æø/i, /^‡Æµ‡ØÜ/i, /^‡Æö/i],
      any: [/^‡Æû‡Ææ/i, /^‡Æ§‡Æø/i, /^‡Æö‡ØÜ/i, /^‡Æ™‡ØÅ/i, /^‡Æµ‡Æø/i, /^‡Æµ‡ØÜ/i, /^‡Æö/i]
    };
    matchDayPeriodPatterns49 = {
      narrow: /^(‡ÆÆ‡ØÅ.‡Æ™|‡Æ™‡Æø.‡Æ™|‡Æ®‡Æ≥‡Øç|‡Æ®‡Æ£‡Øç|‡Æï‡Ææ‡Æ≤‡Øà|‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç|‡ÆÆ‡Ææ‡Æ≤‡Øà|‡Æá‡Æ∞‡Æµ‡ØÅ)/i,
      any: /^(‡ÆÆ‡ØÅ.‡Æ™|‡Æ™‡Æø.‡Æ™|‡ÆÆ‡ØÅ‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æ™‡Æø‡Æ±‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æ®‡Æ≥‡Øç‡Æ≥‡Æø‡Æ∞‡Æµ‡ØÅ|‡Æ®‡Æ£‡Øç‡Æ™‡Æï‡Æ≤‡Øç|‡Æï‡Ææ‡Æ≤‡Øà|‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç|‡ÆÆ‡Ææ‡Æ≤‡Øà|‡Æá‡Æ∞‡Æµ‡ØÅ)/i
    };
    parseDayPeriodPatterns49 = {
      any: {
        am: /^‡ÆÆ‡ØÅ/i,
        pm: /^‡Æ™‡Æø/i,
        midnight: /^‡Æ®‡Æ≥‡Øç/i,
        noon: /^‡Æ®‡Æ£‡Øç/i,
        morning: /‡Æï‡Ææ‡Æ≤‡Øà/i,
        afternoon: /‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç/i,
        evening: /‡ÆÆ‡Ææ‡Æ≤‡Øà/i,
        night: /‡Æá‡Æ∞‡Æµ‡ØÅ/i
      }
    };
    match49 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern49,
        parsePattern: parseOrdinalNumberPattern49,
        valueCallback: function valueCallback96(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns49,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns49,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns49,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns49,
        defaultParseWidth: "any",
        valueCallback: function valueCallback97(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns49,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns49,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns49,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns49,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns49,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns49,
        defaultParseWidth: "any"
      })
    };
    match_default50 = match49;
  }
});

// node_modules/date-fns/esm/locale/ta/index.js
var ta_exports = {};
__export(ta_exports, {
  default: () => ta_default
});
var locale53, ta_default;
var init_ta = __esm({
  "node_modules/date-fns/esm/locale/ta/index.js"() {
    init_formatDistance52();
    init_formatLong53();
    init_formatRelative51();
    init_localize50();
    init_match50();
    locale53 = {
      code: "ta",
      formatDistance: formatDistance_default51,
      formatLong: formatLong_default53,
      formatRelative: formatRelative_default50,
      localize: localize_default50,
      match: match_default50,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    ta_default = locale53;
  }
});

// node_modules/date-fns/esm/locale/te/_lib/formatDistance/index.js
var formatDistanceLocale50, formatDistance102, formatDistance_default52;
var init_formatDistance53 = __esm({
  "node_modules/date-fns/esm/locale/te/_lib/formatDistance/index.js"() {
    formatDistanceLocale50 = {
      lessThanXSeconds: {
        standalone: {
          one: "‡∞∏‡±Ü‡∞ï‡∞®‡±Å ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ",
          other: "{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤ ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ"
        },
        withPreposition: {
          one: "‡∞∏‡±Ü‡∞ï‡∞®‡±Å",
          other: "{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤"
        }
      },
      xSeconds: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞∏‡±Ü‡∞ï‡∞®‡±Å",
          // CLDR #1314
          other: "{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞∏‡±Ü‡∞ï‡∞®‡±Å",
          other: "{{count}} ‡∞∏‡±Ü‡∞ï‡∞®‡±ç‡∞≤"
        }
      },
      halfAMinute: {
        standalone: "‡∞Ö‡∞∞ ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç",
        withPreposition: "‡∞Ö‡∞∞ ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç"
      },
      lessThanXMinutes: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ",
          other: "{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤ ‡∞ï‡∞®‡±ç‡∞®‡∞æ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç",
          other: "{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤"
        }
      },
      xMinutes: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç",
          // CLDR #1311
          other: "{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞Ç",
          // CLDR #1311
          other: "{{count}} ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤"
        }
      },
      aboutXHours: {
        standalone: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤"
        }
      },
      xHours: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü",
          // CLDR #1308
          other: "{{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞ó‡∞Ç‡∞ü",
          other: "{{count}} ‡∞ó‡∞Ç‡∞ü‡∞≤"
        }
      },
      xDays: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞∞‡±ã‡∞ú‡±Å",
          // CLDR #1292
          other: "{{count}} ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞∞‡±ã‡∞ú‡±Å",
          other: "{{count}} ‡∞∞‡±ã‡∞ú‡±Å‡∞≤"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡∞≤"
        }
      },
      xWeeks: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç",
          other: "{{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞µ‡∞æ‡∞∞‡∞Ç",
          other: "{{count}} ‡∞µ‡∞æ‡∞∞‡∞æ‡∞≤‡∞≤"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞®‡±Ü‡∞≤",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞®‡±Ü‡∞≤‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞®‡±Ü‡∞≤",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞®‡±Ü‡∞≤‡∞≤"
        }
      },
      xMonths: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞®‡±Ü‡∞≤",
          // CLDR #1281
          other: "{{count}} ‡∞®‡±Ü‡∞≤‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞®‡±Ü‡∞≤",
          other: "{{count}} ‡∞®‡±Ü‡∞≤‡∞≤"
        }
      },
      aboutXYears: {
        standalone: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "‡∞∏‡±Å‡∞Æ‡∞æ‡∞∞‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤"
        }
      },
      xYears: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          // CLDR #1275
          other: "{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤"
        }
      },
      overXYears: {
        standalone: {
          one: "‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç ‡∞™‡±à‡∞ó‡∞æ",
          other: "{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞™‡±à‡∞ó‡∞æ"
        },
        withPreposition: {
          one: "‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "{{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤"
        }
      },
      almostXYears: {
        standalone: {
          one: "‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å"
        },
        withPreposition: {
          one: "‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å ‡∞í‡∞ï ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç",
          other: "‡∞¶‡∞æ‡∞¶‡∞æ‡∞™‡±Å {{count}} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤"
        }
      }
    };
    formatDistance102 = function formatDistance103(token, count, options) {
      var result;
      var tokenValue = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale50[token].withPreposition : formatDistanceLocale50[token].standalone;
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "‡∞≤‡±ã";
        } else {
          return result + " ‡∞ï‡±ç‡∞∞‡∞ø‡∞§‡∞Ç";
        }
      }
      return result;
    };
    formatDistance_default52 = formatDistance102;
  }
});

// node_modules/date-fns/esm/locale/te/_lib/formatLong/index.js
var dateFormats54, timeFormats54, dateTimeFormats54, formatLong54, formatLong_default54;
var init_formatLong54 = __esm({
  "node_modules/date-fns/esm/locale/te/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats54 = {
      full: "d, MMMM y, EEEE",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "dd-MM-yy"
    };
    timeFormats54 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats54 = {
      full: "{{date}} {{time}}'‡∞ï‡∞ø'",
      long: "{{date}} {{time}}'‡∞ï‡∞ø'",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong54 = {
      date: buildFormatLongFn({
        formats: dateFormats54,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats54,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats54,
        defaultWidth: "full"
      })
    };
    formatLong_default54 = formatLong54;
  }
});

// node_modules/date-fns/esm/locale/te/_lib/formatRelative/index.js
var formatRelativeLocale50, formatRelative100, formatRelative_default51;
var init_formatRelative52 = __esm({
  "node_modules/date-fns/esm/locale/te/_lib/formatRelative/index.js"() {
    formatRelativeLocale50 = {
      lastWeek: "'‡∞ó‡∞§' eeee p",
      // CLDR #1384
      yesterday: "'‡∞®‡∞ø‡∞®‡±ç‡∞®' p",
      // CLDR #1393
      today: "'‡∞à ‡∞∞‡±ã‡∞ú‡±Å' p",
      // CLDR #1394
      tomorrow: "'‡∞∞‡±á‡∞™‡±Å' p",
      // CLDR #1395
      nextWeek: "'‡∞§‡∞¶‡±Å‡∞™‡∞∞‡∞ø' eeee p",
      // CLDR #1386
      other: "P"
    };
    formatRelative100 = function formatRelative101(token, _date, _baseDate, _options) {
      return formatRelativeLocale50[token];
    };
    formatRelative_default51 = formatRelative100;
  }
});

// node_modules/date-fns/esm/locale/te/_lib/localize/index.js
var eraValues50, quarterValues50, monthValues50, dayValues50, dayPeriodValues50, formattingDayPeriodValues40, ordinalNumber99, localize50, localize_default51;
var init_localize51 = __esm({
  "node_modules/date-fns/esm/locale/te/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues50 = {
      narrow: ["‡∞ï‡±ç‡∞∞‡±Ä.‡∞™‡±Ç.", "‡∞ï‡±ç‡∞∞‡±Ä.‡∞∂."],
      abbreviated: ["‡∞ï‡±ç‡∞∞‡±Ä.‡∞™‡±Ç.", "‡∞ï‡±ç‡∞∞‡±Ä.‡∞∂."],
      wide: ["‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç", "‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å‡∞∂‡∞ï‡∞Ç"]
    };
    quarterValues50 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["‡∞§‡±ç‡∞∞‡±à1", "‡∞§‡±ç‡∞∞‡±à2", "‡∞§‡±ç‡∞∞‡±à3", "‡∞§‡±ç‡∞∞‡±à4"],
      wide: ["1‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç", "2‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç", "3‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç", "4‡∞µ ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç"]
    };
    monthValues50 = {
      narrow: ["‡∞ú", "‡∞´‡∞ø", "‡∞Æ‡∞æ", "‡∞è", "‡∞Æ‡±á", "‡∞ú‡±Ç", "‡∞ú‡±Å", "‡∞Ü", "‡∞∏‡±Ü", "‡∞Ö", "‡∞®", "‡∞°‡∞ø"],
      abbreviated: ["‡∞ú‡∞®", "‡∞´‡∞ø‡∞¨‡±ç‡∞∞", "‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø", "‡∞è‡∞™‡±ç‡∞∞‡∞ø", "‡∞Æ‡±á", "‡∞ú‡±Ç‡∞®‡±ç", "‡∞ú‡±Å‡∞≤‡±à", "‡∞Ü‡∞ó", "‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç", "‡∞Ö‡∞ï‡±ç‡∞ü‡±ã", "‡∞®‡∞µ‡∞Ç", "‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç"],
      wide: ["‡∞ú‡∞®‡∞µ‡∞∞‡∞ø", "‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø", "‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø", "‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç", "‡∞Æ‡±á", "‡∞ú‡±Ç‡∞®‡±ç", "‡∞ú‡±Å‡∞≤‡±à", "‡∞Ü‡∞ó‡∞∏‡±ç‡∞ü‡±Å", "‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç", "‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç", "‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç", "‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç"]
    };
    dayValues50 = {
      narrow: ["‡∞Ü", "‡∞∏‡±ã", "‡∞Æ", "‡∞¨‡±Å", "‡∞ó‡±Å", "‡∞∂‡±Å", "‡∞∂"],
      short: ["‡∞Ü‡∞¶‡∞ø", "‡∞∏‡±ã‡∞Æ", "‡∞Æ‡∞Ç‡∞ó‡∞≥", "‡∞¨‡±Å‡∞ß", "‡∞ó‡±Å‡∞∞‡±Å", "‡∞∂‡±Å‡∞ï‡±ç‡∞∞", "‡∞∂‡∞®‡∞ø"],
      abbreviated: ["‡∞Ü‡∞¶‡∞ø", "‡∞∏‡±ã‡∞Æ", "‡∞Æ‡∞Ç‡∞ó‡∞≥", "‡∞¨‡±Å‡∞ß", "‡∞ó‡±Å‡∞∞‡±Å", "‡∞∂‡±Å‡∞ï‡±ç‡∞∞", "‡∞∂‡∞®‡∞ø"],
      wide: ["‡∞Ü‡∞¶‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞∏‡±ã‡∞Æ‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞Æ‡∞Ç‡∞ó‡∞≥‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞¨‡±Å‡∞ß‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞ó‡±Å‡∞∞‡±Å‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞∂‡±Å‡∞ï‡±ç‡∞∞‡∞µ‡∞æ‡∞∞‡∞Ç", "‡∞∂‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç"]
    };
    dayPeriodValues50 = {
      narrow: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      },
      abbreviated: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      },
      wide: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      }
    };
    formattingDayPeriodValues40 = {
      narrow: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      },
      abbreviated: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      },
      wide: {
        am: "‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        pm: "‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        midnight: "‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø",
        noon: "‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        morning: "‡∞â‡∞¶‡∞Ø‡∞Ç",
        afternoon: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç",
        evening: "‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç",
        night: "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"
      }
    };
    ordinalNumber99 = function ordinalNumber100(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + "‡∞µ";
    };
    localize50 = {
      ordinalNumber: ordinalNumber99,
      era: buildLocalizeFn({
        values: eraValues50,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues50,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback50(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues50,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues50,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues50,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues40,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default51 = localize50;
  }
});

// node_modules/date-fns/esm/locale/te/_lib/match/index.js
var matchOrdinalNumberPattern50, parseOrdinalNumberPattern50, matchEraPatterns50, parseEraPatterns50, matchQuarterPatterns50, parseQuarterPatterns50, matchMonthPatterns50, parseMonthPatterns50, matchDayPatterns50, parseDayPatterns50, matchDayPeriodPatterns50, parseDayPeriodPatterns50, match50, match_default51;
var init_match51 = __esm({
  "node_modules/date-fns/esm/locale/te/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern50 = /^(\d+)(‡∞µ)?/i;
    parseOrdinalNumberPattern50 = /\d+/i;
    matchEraPatterns50 = {
      narrow: /^(‡∞ï‡±ç‡∞∞‡±Ä\.‡∞™‡±Ç\.|‡∞ï‡±ç‡∞∞‡±Ä\.‡∞∂\.)/i,
      abbreviated: /^(‡∞ï‡±ç‡∞∞‡±Ä\.?\s?‡∞™‡±Ç\.?|‡∞™‡±ç‡∞∞\.?\s?‡∞∂\.?\s?‡∞™‡±Ç\.?|‡∞ï‡±ç‡∞∞‡±Ä\.?\s?‡∞∂\.?|‡∞∏‡∞æ\.?\s?‡∞∂\.?)/i,
      wide: /^(‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç|‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∂‡∞ï‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞Ç|‡∞ï‡±ç‡∞∞‡±Ä‡∞∏‡±ç‡∞§‡±Å ‡∞∂‡∞ï‡∞Ç|‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∂‡∞ï‡∞Ç)/i
    };
    parseEraPatterns50 = {
      any: [/^(‡∞™‡±Ç|‡∞∂)/i, /^‡∞∏‡∞æ/i]
    };
    matchQuarterPatterns50 = {
      narrow: /^[1234]/i,
      abbreviated: /^‡∞§‡±ç‡∞∞‡±à[1234]/i,
      wide: /^[1234](‡∞µ)? ‡∞§‡±ç‡∞∞‡±à‡∞Æ‡∞æ‡∞∏‡∞ø‡∞ï‡∞Ç/i
    };
    parseQuarterPatterns50 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns50 = {
      narrow: /^(‡∞ú‡±Ç|‡∞ú‡±Å|‡∞ú|‡∞´‡∞ø|‡∞Æ‡∞æ|‡∞è|‡∞Æ‡±á|‡∞Ü|‡∞∏‡±Ü|‡∞Ö|‡∞®|‡∞°‡∞ø)/i,
      abbreviated: /^(‡∞ú‡∞®|‡∞´‡∞ø‡∞¨‡±ç‡∞∞|‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø|‡∞è‡∞™‡±ç‡∞∞‡∞ø|‡∞Æ‡±á|‡∞ú‡±Ç‡∞®‡±ç|‡∞ú‡±Å‡∞≤‡±à|‡∞Ü‡∞ó|‡∞∏‡±Ü‡∞™‡±ç|‡∞Ö‡∞ï‡±ç‡∞ü‡±ã|‡∞®‡∞µ|‡∞°‡∞ø‡∞∏‡±Ü)/i,
      wide: /^(‡∞ú‡∞®‡∞µ‡∞∞‡∞ø|‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø|‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø|‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç|‡∞Æ‡±á|‡∞ú‡±Ç‡∞®‡±ç|‡∞ú‡±Å‡∞≤‡±à|‡∞Ü‡∞ó‡∞∏‡±ç‡∞ü‡±Å|‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç|‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç|‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç|‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç)/i
    };
    parseMonthPatterns50 = {
      narrow: [/^‡∞ú/i, /^‡∞´‡∞ø/i, /^‡∞Æ‡∞æ/i, /^‡∞è/i, /^‡∞Æ‡±á/i, /^‡∞ú‡±Ç/i, /^‡∞ú‡±Å/i, /^‡∞Ü/i, /^‡∞∏‡±Ü/i, /^‡∞Ö/i, /^‡∞®/i, /^‡∞°‡∞ø/i],
      any: [/^‡∞ú‡∞®/i, /^‡∞´‡∞ø/i, /^‡∞Æ‡∞æ/i, /^‡∞è/i, /^‡∞Æ‡±á/i, /^‡∞ú‡±Ç‡∞®‡±ç/i, /^‡∞ú‡±Å‡∞≤‡±à/i, /^‡∞Ü‡∞ó/i, /^‡∞∏‡±Ü/i, /^‡∞Ö/i, /^‡∞®/i, /^‡∞°‡∞ø/i]
    };
    matchDayPatterns50 = {
      narrow: /^(‡∞Ü|‡∞∏‡±ã|‡∞Æ|‡∞¨‡±Å|‡∞ó‡±Å|‡∞∂‡±Å|‡∞∂)/i,
      short: /^(‡∞Ü‡∞¶‡∞ø|‡∞∏‡±ã‡∞Æ|‡∞Æ‡∞Ç|‡∞¨‡±Å‡∞ß|‡∞ó‡±Å‡∞∞‡±Å|‡∞∂‡±Å‡∞ï‡±ç‡∞∞|‡∞∂‡∞®‡∞ø)/i,
      abbreviated: /^(‡∞Ü‡∞¶‡∞ø|‡∞∏‡±ã‡∞Æ|‡∞Æ‡∞Ç|‡∞¨‡±Å‡∞ß|‡∞ó‡±Å‡∞∞‡±Å|‡∞∂‡±Å‡∞ï‡±ç‡∞∞|‡∞∂‡∞®‡∞ø)/i,
      wide: /^(‡∞Ü‡∞¶‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∏‡±ã‡∞Æ‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞Æ‡∞Ç‡∞ó‡∞≥‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞¨‡±Å‡∞ß‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞ó‡±Å‡∞∞‡±Å‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∂‡±Å‡∞ï‡±ç‡∞∞‡∞µ‡∞æ‡∞∞‡∞Ç|‡∞∂‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞Ç)/i
    };
    parseDayPatterns50 = {
      narrow: [/^‡∞Ü/i, /^‡∞∏‡±ã/i, /^‡∞Æ/i, /^‡∞¨‡±Å/i, /^‡∞ó‡±Å/i, /^‡∞∂‡±Å/i, /^‡∞∂/i],
      any: [/^‡∞Ü‡∞¶‡∞ø/i, /^‡∞∏‡±ã‡∞Æ/i, /^‡∞Æ‡∞Ç/i, /^‡∞¨‡±Å‡∞ß/i, /^‡∞ó‡±Å‡∞∞‡±Å/i, /^‡∞∂‡±Å‡∞ï‡±ç‡∞∞/i, /^‡∞∂‡∞®‡∞ø/i]
    };
    matchDayPeriodPatterns50 = {
      narrow: /^(‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø|‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞â‡∞¶‡∞Ø‡∞Ç|‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç|‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø)/i,
      any: /^(‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞Ö‡∞∞‡±ç‡∞ß‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø|‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞â‡∞¶‡∞Ø‡∞Ç|‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç|‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç|‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø)/i
    };
    parseDayPeriodPatterns50 = {
      any: {
        am: /^‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
        pm: /^‡∞Ö‡∞™‡∞∞‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
        midnight: /^‡∞Ö‡∞∞‡±ç‡∞ß/i,
        noon: /^‡∞Æ‡∞ø‡∞ü‡±ç‡∞ü/i,
        morning: /‡∞â‡∞¶‡∞Ø‡∞Ç/i,
        afternoon: /‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç/i,
        evening: /‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç/i,
        night: /‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø/i
      }
    };
    match50 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern50,
        parsePattern: parseOrdinalNumberPattern50,
        valueCallback: function valueCallback98(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns50,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns50,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns50,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns50,
        defaultParseWidth: "any",
        valueCallback: function valueCallback99(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns50,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns50,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns50,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns50,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns50,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns50,
        defaultParseWidth: "any"
      })
    };
    match_default51 = match50;
  }
});

// node_modules/date-fns/esm/locale/te/index.js
var te_exports = {};
__export(te_exports, {
  default: () => te_default
});
var locale54, te_default;
var init_te = __esm({
  "node_modules/date-fns/esm/locale/te/index.js"() {
    init_formatDistance53();
    init_formatLong54();
    init_formatRelative52();
    init_localize51();
    init_match51();
    locale54 = {
      code: "te",
      formatDistance: formatDistance_default52,
      formatLong: formatLong_default54,
      formatRelative: formatRelative_default51,
      localize: localize_default51,
      match: match_default51,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    te_default = locale54;
  }
});

// node_modules/date-fns/esm/locale/th/_lib/formatDistance/index.js
var formatDistanceLocale51, formatDistance104, formatDistance_default53;
var init_formatDistance54 = __esm({
  "node_modules/date-fns/esm/locale/th/_lib/formatDistance/index.js"() {
    formatDistanceLocale51 = {
      lessThanXSeconds: {
        one: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
        other: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
      },
      xSeconds: {
        one: "1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
        other: "{{count}} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
      },
      halfAMinute: "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ô‡∏≤‡∏ó‡∏µ",
      lessThanXMinutes: {
        one: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ",
        other: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏ô‡∏≤‡∏ó‡∏µ"
      },
      xMinutes: {
        one: "1 ‡∏ô‡∏≤‡∏ó‡∏µ",
        other: "{{count}} ‡∏ô‡∏≤‡∏ó‡∏µ"
      },
      aboutXHours: {
        one: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
        other: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
      },
      xHours: {
        one: "1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
        other: "{{count}} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
      },
      xDays: {
        one: "1 ‡∏ß‡∏±‡∏ô",
        other: "{{count}} ‡∏ß‡∏±‡∏ô"
      },
      aboutXWeeks: {
        one: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        other: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
      },
      xWeeks: {
        one: "1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        other: "{{count}} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
      },
      aboutXMonths: {
        one: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        other: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
      },
      xMonths: {
        one: "1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        other: "{{count}} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
      },
      aboutXYears: {
        one: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏õ‡∏µ",
        other: "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {{count}} ‡∏õ‡∏µ"
      },
      xYears: {
        one: "1 ‡∏õ‡∏µ",
        other: "{{count}} ‡∏õ‡∏µ"
      },
      overXYears: {
        one: "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ",
        other: "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {{count}} ‡∏õ‡∏µ"
      },
      almostXYears: {
        one: "‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö 1 ‡∏õ‡∏µ",
        other: "‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö {{count}} ‡∏õ‡∏µ"
      }
    };
    formatDistance104 = function formatDistance105(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale51[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          if (token === "halfAMinute") {
            return "‡πÉ‡∏ô" + result;
          } else {
            return "‡πÉ‡∏ô " + result;
          }
        } else {
          return result + "‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤";
        }
      }
      return result;
    };
    formatDistance_default53 = formatDistance104;
  }
});

// node_modules/date-fns/esm/locale/th/_lib/formatLong/index.js
var dateFormats55, timeFormats55, dateTimeFormats55, formatLong55, formatLong_default55;
var init_formatLong55 = __esm({
  "node_modules/date-fns/esm/locale/th/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats55 = {
      full: "‡∏ß‡∏±‡∏ôEEEE‡∏ó‡∏µ‡πà do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    timeFormats55 = {
      full: "H:mm:ss ‡∏ô. zzzz",
      long: "H:mm:ss ‡∏ô. z",
      medium: "H:mm:ss ‡∏ô.",
      short: "H:mm ‡∏ô."
    };
    dateTimeFormats55 = {
      full: "{{date}} '‡πÄ‡∏ß‡∏•‡∏≤' {{time}}",
      long: "{{date}} '‡πÄ‡∏ß‡∏•‡∏≤' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong55 = {
      date: buildFormatLongFn({
        formats: dateFormats55,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats55,
        defaultWidth: "medium"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats55,
        defaultWidth: "full"
      })
    };
    formatLong_default55 = formatLong55;
  }
});

// node_modules/date-fns/esm/locale/th/_lib/formatRelative/index.js
var formatRelativeLocale51, formatRelative102, formatRelative_default52;
var init_formatRelative53 = __esm({
  "node_modules/date-fns/esm/locale/th/_lib/formatRelative/index.js"() {
    formatRelativeLocale51 = {
      lastWeek: "eeee'‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤' p",
      yesterday: "'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
      today: "'‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
      tomorrow: "'‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤' p",
      nextWeek: "eeee '‡πÄ‡∏ß‡∏•‡∏≤' p",
      other: "P"
    };
    formatRelative102 = function formatRelative103(token, _date, _baseDate, _options) {
      return formatRelativeLocale51[token];
    };
    formatRelative_default52 = formatRelative102;
  }
});

// node_modules/date-fns/esm/locale/th/_lib/localize/index.js
var eraValues51, quarterValues51, dayValues51, monthValues51, dayPeriodValues51, formattingDayPeriodValues41, ordinalNumber101, localize51, localize_default52;
var init_localize52 = __esm({
  "node_modules/date-fns/esm/locale/th/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues51 = {
      narrow: ["B", "‡∏Ñ‡∏®"],
      abbreviated: ["BC", "‡∏Ñ.‡∏®."],
      wide: ["‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•", "‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä"]
    };
    quarterValues51 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡πÅ‡∏£‡∏Å", "‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á", "‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°", "‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà"]
    };
    dayValues51 = {
      narrow: ["‡∏≠‡∏≤.", "‡∏à.", "‡∏≠.", "‡∏û.", "‡∏û‡∏§.", "‡∏®.", "‡∏™."],
      short: ["‡∏≠‡∏≤.", "‡∏à.", "‡∏≠.", "‡∏û.", "‡∏û‡∏§.", "‡∏®.", "‡∏™."],
      abbreviated: ["‡∏≠‡∏≤.", "‡∏à.", "‡∏≠.", "‡∏û.", "‡∏û‡∏§.", "‡∏®.", "‡∏™."],
      wide: ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"]
    };
    monthValues51 = {
      narrow: ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."],
      abbreviated: ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."],
      wide: ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]
    };
    dayPeriodValues51 = {
      narrow: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ö‡πà‡∏≤‡∏¢",
        evening: "‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      },
      abbreviated: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ö‡πà‡∏≤‡∏¢",
        evening: "‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      },
      wide: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ö‡πà‡∏≤‡∏¢",
        evening: "‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      }
    };
    formattingDayPeriodValues41 = {
      narrow: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
        evening: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      },
      abbreviated: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
        evening: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      },
      wide: {
        am: "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        pm: "‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        midnight: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô",
        noon: "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á",
        morning: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤",
        afternoon: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
        evening: "‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô",
        night: "‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
      }
    };
    ordinalNumber101 = function ordinalNumber102(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize51 = {
      ordinalNumber: ordinalNumber101,
      era: buildLocalizeFn({
        values: eraValues51,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues51,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback51(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues51,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues51,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues51,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues41,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default52 = localize51;
  }
});

// node_modules/date-fns/esm/locale/th/_lib/match/index.js
var matchOrdinalNumberPattern51, parseOrdinalNumberPattern51, matchEraPatterns51, parseEraPatterns51, matchQuarterPatterns51, parseQuarterPatterns51, matchMonthPatterns51, parseMonthPatterns51, matchDayPatterns51, parseDayPatterns51, matchDayPeriodPatterns51, parseDayPeriodPatterns51, match51, match_default52;
var init_match52 = __esm({
  "node_modules/date-fns/esm/locale/th/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern51 = /^\d+/i;
    parseOrdinalNumberPattern51 = /\d+/i;
    matchEraPatterns51 = {
      narrow: /^([bB]|[aA]|‡∏Ñ‡∏®)/i,
      abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|‡∏Ñ\.?‡∏®\.?)/i,
      wide: /^(‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•)/i
    };
    parseEraPatterns51 = {
      any: [/^[bB]/i, /^(^[aA]|‡∏Ñ\.?‡∏®\.?|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏Å‡∏≤‡∏•|‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä|)/i]
    };
    matchQuarterPatterns51 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™(‡∏ó‡∏µ‡πà)? ?[1234]/i
    };
    parseQuarterPatterns51 = {
      any: [/(1|‡πÅ‡∏£‡∏Å|‡∏´‡∏ô‡∏∂‡πà‡∏á)/i, /(2|‡∏™‡∏≠‡∏á)/i, /(3|‡∏™‡∏≤‡∏°)/i, /(4|‡∏™‡∏µ‡πà)/i]
    };
    matchMonthPatterns51 = {
      narrow: /^(‡∏°\.?‡∏Ñ\.?|‡∏Å\.?‡∏û\.?|‡∏°‡∏µ\.?‡∏Ñ\.?|‡πÄ‡∏°\.?‡∏¢\.?|‡∏û\.?‡∏Ñ\.?|‡∏°‡∏¥\.?‡∏¢\.?|‡∏Å\.?‡∏Ñ\.?|‡∏™\.?‡∏Ñ\.?|‡∏Å\.?‡∏¢\.?|‡∏ï\.?‡∏Ñ\.?|‡∏û\.?‡∏¢\.?|‡∏ò\.?‡∏Ñ\.?)/i,
      abbreviated: /^(‡∏°\.?‡∏Ñ\.?|‡∏Å\.?‡∏û\.?|‡∏°‡∏µ\.?‡∏Ñ\.?|‡πÄ‡∏°\.?‡∏¢\.?|‡∏û\.?‡∏Ñ\.?|‡∏°‡∏¥\.?‡∏¢\.?|‡∏Å\.?‡∏Ñ\.?|‡∏™\.?‡∏Ñ\.?|‡∏Å\.?‡∏¢\.?|‡∏ï\.?‡∏Ñ\.?|‡∏û\.?‡∏¢\.?|‡∏ò\.?‡∏Ñ\.?')/i,
      wide: /^(‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå|‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°|‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô|‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°|‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô|‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°|‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°|‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô|‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°|‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô|‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°)/i
    };
    parseMonthPatterns51 = {
      wide: [/^‡∏°‡∏Å/i, /^‡∏Å‡∏∏‡∏°/i, /^‡∏°‡∏µ/i, /^‡πÄ‡∏°/i, /^‡∏û‡∏§‡∏©/i, /^‡∏°‡∏¥/i, /^‡∏Å‡∏£‡∏Å/i, /^‡∏™/i, /^‡∏Å‡∏±‡∏ô/i, /^‡∏ï/i, /^‡∏û‡∏§‡∏®/i, /^‡∏ò/i],
      any: [/^‡∏°\.?‡∏Ñ\.?/i, /^‡∏Å\.?‡∏û\.?/i, /^‡∏°‡∏µ\.?‡∏Ñ\.?/i, /^‡πÄ‡∏°\.?‡∏¢\.?/i, /^‡∏û\.?‡∏Ñ\.?/i, /^‡∏°‡∏¥\.?‡∏¢\.?/i, /^‡∏Å\.?‡∏Ñ\.?/i, /^‡∏™\.?‡∏Ñ\.?/i, /^‡∏Å\.?‡∏¢\.?/i, /^‡∏ï\.?‡∏Ñ\.?/i, /^‡∏û\.?‡∏¢\.?/i, /^‡∏ò\.?‡∏Ñ\.?/i]
    };
    matchDayPatterns51 = {
      narrow: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
      short: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
      abbreviated: /^(‡∏≠‡∏≤\.?|‡∏à\.?|‡∏≠\.?|‡∏û‡∏§\.?|‡∏û\.?|‡∏®\.?|‡∏™\.?)/i,
      wide: /^(‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå|‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå|‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£|‡∏û‡∏∏‡∏ò|‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ|‡∏®‡∏∏‡∏Å‡∏£‡πå|‡πÄ‡∏™‡∏≤‡∏£‡πå)/i
    };
    parseDayPatterns51 = {
      wide: [/^‡∏≠‡∏≤/i, /^‡∏à‡∏±/i, /^‡∏≠‡∏±/i, /^‡∏û‡∏∏‡∏ò/i, /^‡∏û‡∏§/i, /^‡∏®/i, /^‡πÄ‡∏™/i],
      any: [/^‡∏≠‡∏≤/i, /^‡∏à/i, /^‡∏≠/i, /^‡∏û(?!‡∏§)/i, /^‡∏û‡∏§/i, /^‡∏®/i, /^‡∏™/i]
    };
    matchDayPeriodPatterns51 = {
      any: /^(‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô|‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|(‡∏ï‡∏≠‡∏ô.*?)?.*(‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á|‡πÄ‡∏ä‡πâ‡∏≤|‡∏ö‡πà‡∏≤‡∏¢|‡πÄ‡∏¢‡πá‡∏ô|‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô))/i
    };
    parseDayPeriodPatterns51 = {
      any: {
        am: /^‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
        pm: /^‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
        midnight: /^‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô/i,
        noon: /^‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á/i,
        morning: /‡πÄ‡∏ä‡πâ‡∏≤/i,
        afternoon: /‡∏ö‡πà‡∏≤‡∏¢/i,
        evening: /‡πÄ‡∏¢‡πá‡∏ô/i,
        night: /‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô/i
      }
    };
    match51 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern51,
        parsePattern: parseOrdinalNumberPattern51,
        valueCallback: function valueCallback100(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns51,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns51,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns51,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns51,
        defaultParseWidth: "any",
        valueCallback: function valueCallback101(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns51,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns51,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns51,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns51,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns51,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns51,
        defaultParseWidth: "any"
      })
    };
    match_default52 = match51;
  }
});

// node_modules/date-fns/esm/locale/th/index.js
var th_exports = {};
__export(th_exports, {
  default: () => th_default
});
var locale55, th_default;
var init_th = __esm({
  "node_modules/date-fns/esm/locale/th/index.js"() {
    init_formatDistance54();
    init_formatLong55();
    init_formatRelative53();
    init_localize52();
    init_match52();
    locale55 = {
      code: "th",
      formatDistance: formatDistance_default53,
      formatLong: formatLong_default55,
      formatRelative: formatRelative_default52,
      localize: localize_default52,
      match: match_default52,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    th_default = locale55;
  }
});

// node_modules/date-fns/esm/locale/tr/_lib/formatDistance/index.js
var formatDistanceLocale52, formatDistance106, formatDistance_default54;
var init_formatDistance55 = __esm({
  "node_modules/date-fns/esm/locale/tr/_lib/formatDistance/index.js"() {
    formatDistanceLocale52 = {
      lessThanXSeconds: {
        one: "bir saniyeden az",
        other: "{{count}} saniyeden az"
      },
      xSeconds: {
        one: "1 saniye",
        other: "{{count}} saniye"
      },
      halfAMinute: "yarƒ±m dakika",
      lessThanXMinutes: {
        one: "bir dakikadan az",
        other: "{{count}} dakikadan az"
      },
      xMinutes: {
        one: "1 dakika",
        other: "{{count}} dakika"
      },
      aboutXHours: {
        one: "yakla≈üƒ±k 1 saat",
        other: "yakla≈üƒ±k {{count}} saat"
      },
      xHours: {
        one: "1 saat",
        other: "{{count}} saat"
      },
      xDays: {
        one: "1 g√ºn",
        other: "{{count}} g√ºn"
      },
      aboutXWeeks: {
        one: "yakla≈üƒ±k 1 hafta",
        other: "yakla≈üƒ±k {{count}} hafta"
      },
      xWeeks: {
        one: "1 hafta",
        other: "{{count}} hafta"
      },
      aboutXMonths: {
        one: "yakla≈üƒ±k 1 ay",
        other: "yakla≈üƒ±k {{count}} ay"
      },
      xMonths: {
        one: "1 ay",
        other: "{{count}} ay"
      },
      aboutXYears: {
        one: "yakla≈üƒ±k 1 yƒ±l",
        other: "yakla≈üƒ±k {{count}} yƒ±l"
      },
      xYears: {
        one: "1 yƒ±l",
        other: "{{count}} yƒ±l"
      },
      overXYears: {
        one: "1 yƒ±ldan fazla",
        other: "{{count}} yƒ±ldan fazla"
      },
      almostXYears: {
        one: "neredeyse 1 yƒ±l",
        other: "neredeyse {{count}} yƒ±l"
      }
    };
    formatDistance106 = function formatDistance107(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale52[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " sonra";
        } else {
          return result + " √∂nce";
        }
      }
      return result;
    };
    formatDistance_default54 = formatDistance106;
  }
});

// node_modules/date-fns/esm/locale/tr/_lib/formatLong/index.js
var dateFormats56, timeFormats56, dateTimeFormats56, formatLong56, formatLong_default56;
var init_formatLong56 = __esm({
  "node_modules/date-fns/esm/locale/tr/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats56 = {
      full: "d MMMM y EEEE",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd.MM.yyyy"
    };
    timeFormats56 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats56 = {
      full: "{{date}} 'saat' {{time}}",
      long: "{{date}} 'saat' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong56 = {
      date: buildFormatLongFn({
        formats: dateFormats56,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats56,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats56,
        defaultWidth: "full"
      })
    };
    formatLong_default56 = formatLong56;
  }
});

// node_modules/date-fns/esm/locale/tr/_lib/formatRelative/index.js
var formatRelativeLocale52, formatRelative104, formatRelative_default53;
var init_formatRelative54 = __esm({
  "node_modules/date-fns/esm/locale/tr/_lib/formatRelative/index.js"() {
    formatRelativeLocale52 = {
      lastWeek: "'ge√ßen hafta' eeee 'saat' p",
      yesterday: "'d√ºn saat' p",
      today: "'bug√ºn saat' p",
      tomorrow: "'yarƒ±n saat' p",
      nextWeek: "eeee 'saat' p",
      other: "P"
    };
    formatRelative104 = function formatRelative105(token, _date, _baseDate, _options) {
      return formatRelativeLocale52[token];
    };
    formatRelative_default53 = formatRelative104;
  }
});

// node_modules/date-fns/esm/locale/tr/_lib/localize/index.js
var eraValues52, quarterValues52, monthValues52, dayValues52, dayPeriodValues52, formattingDayPeriodValues42, ordinalNumber103, localize52, localize_default53;
var init_localize53 = __esm({
  "node_modules/date-fns/esm/locale/tr/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues52 = {
      narrow: ["M√ñ", "MS"],
      abbreviated: ["M√ñ", "MS"],
      wide: ["Milattan √ñnce", "Milattan Sonra"]
    };
    quarterValues52 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1√á", "2√á", "3√á", "4√á"],
      wide: ["ƒ∞lk √ßeyrek", "ƒ∞kinci √áeyrek", "√ú√ß√ºnc√º √ßeyrek", "Son √ßeyrek"]
    };
    monthValues52 = {
      narrow: ["O", "≈û", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"],
      abbreviated: ["Oca", "≈ûub", "Mar", "Nis", "May", "Haz", "Tem", "Aƒüu", "Eyl", "Eki", "Kas", "Ara"],
      wide: ["Ocak", "≈ûubat", "Mart", "Nisan", "Mayƒ±s", "Haziran", "Temmuz", "Aƒüustos", "Eyl√ºl", "Ekim", "Kasƒ±m", "Aralƒ±k"]
    };
    dayValues52 = {
      narrow: ["P", "P", "S", "√á", "P", "C", "C"],
      short: ["Pz", "Pt", "Sa", "√áa", "Pe", "Cu", "Ct"],
      abbreviated: ["Paz", "Pzt", "Sal", "√áar", "Per", "Cum", "Cts"],
      wide: ["Pazar", "Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe", "Cuma", "Cumartesi"]
    };
    dayPeriodValues52 = {
      narrow: {
        am: "√∂√∂",
        pm: "√∂s",
        midnight: "gy",
        noon: "√∂",
        morning: "sa",
        afternoon: "√∂s",
        evening: "ak",
        night: "ge"
      },
      abbreviated: {
        am: "√ñ√ñ",
        pm: "√ñS",
        midnight: "gece yarƒ±sƒ±",
        noon: "√∂ƒüle",
        morning: "sabah",
        afternoon: "√∂ƒüleden sonra",
        evening: "ak≈üam",
        night: "gece"
      },
      wide: {
        am: "√ñ.√ñ.",
        pm: "√ñ.S.",
        midnight: "gece yarƒ±sƒ±",
        noon: "√∂ƒüle",
        morning: "sabah",
        afternoon: "√∂ƒüleden sonra",
        evening: "ak≈üam",
        night: "gece"
      }
    };
    formattingDayPeriodValues42 = {
      narrow: {
        am: "√∂√∂",
        pm: "√∂s",
        midnight: "gy",
        noon: "√∂",
        morning: "sa",
        afternoon: "√∂s",
        evening: "ak",
        night: "ge"
      },
      abbreviated: {
        am: "√ñ√ñ",
        pm: "√ñS",
        midnight: "gece yarƒ±sƒ±",
        noon: "√∂ƒülen",
        morning: "sabahleyin",
        afternoon: "√∂ƒüleden sonra",
        evening: "ak≈üamleyin",
        night: "geceleyin"
      },
      wide: {
        am: "√∂.√∂.",
        pm: "√∂.s.",
        midnight: "gece yarƒ±sƒ±",
        noon: "√∂ƒülen",
        morning: "sabahleyin",
        afternoon: "√∂ƒüleden sonra",
        evening: "ak≈üamleyin",
        night: "geceleyin"
      }
    };
    ordinalNumber103 = function ordinalNumber104(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      return number + ".";
    };
    localize52 = {
      ordinalNumber: ordinalNumber103,
      era: buildLocalizeFn({
        values: eraValues52,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues52,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback52(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues52,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues52,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues52,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues42,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default53 = localize52;
  }
});

// node_modules/date-fns/esm/locale/tr/_lib/match/index.js
var matchOrdinalNumberPattern52, parseOrdinalNumberPattern52, matchEraPatterns52, parseEraPatterns52, matchQuarterPatterns52, parseQuarterPatterns52, matchMonthPatterns52, parseMonthPatterns52, matchDayPatterns52, parseDayPatterns52, matchDayPeriodPatterns52, parseDayPeriodPatterns52, match52, match_default53;
var init_match53 = __esm({
  "node_modules/date-fns/esm/locale/tr/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern52 = /^(\d+)(\.)?/i;
    parseOrdinalNumberPattern52 = /\d+/i;
    matchEraPatterns52 = {
      narrow: /^(m√∂|ms)/i,
      abbreviated: /^(m√∂|ms)/i,
      wide: /^(milattan √∂nce|milattan sonra)/i
    };
    parseEraPatterns52 = {
      any: [/(^m√∂|^milattan √∂nce)/i, /(^ms|^milattan sonra)/i]
    };
    matchQuarterPatterns52 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]√ß/i,
      wide: /^((i|ƒ∞)lk|(i|ƒ∞)kinci|√º√ß√ºnc√º|son) √ßeyrek/i
    };
    parseQuarterPatterns52 = {
      any: [/1/i, /2/i, /3/i, /4/i],
      abbreviated: [/1√ß/i, /2√ß/i, /3√ß/i, /4√ß/i],
      wide: [/^(i|ƒ∞)lk √ßeyrek/i, /(i|ƒ∞)kinci √ßeyrek/i, /√º√ß√ºnc√º √ßeyrek/i, /son √ßeyrek/i]
    };
    matchMonthPatterns52 = {
      narrow: /^[o≈ümnhtaek]/i,
      abbreviated: /^(oca|≈üub|mar|nis|may|haz|tem|aƒüu|eyl|eki|kas|ara)/i,
      wide: /^(ocak|≈üubat|mart|nisan|mayƒ±s|haziran|temmuz|aƒüustos|eyl√ºl|ekim|kasƒ±m|aralƒ±k)/i
    };
    parseMonthPatterns52 = {
      narrow: [/^o/i, /^≈ü/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
      any: [/^o/i, /^≈ü/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^aƒü/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
    };
    matchDayPatterns52 = {
      narrow: /^[ps√ßc]/i,
      short: /^(pz|pt|sa|√ßa|pe|cu|ct)/i,
      abbreviated: /^(paz|pzt|sal|√ßar|per|cum|cts)/i,
      wide: /^(pazar(?!tesi)|pazartesi|salƒ±|√ßar≈üamba|per≈üembe|cuma(?!rtesi)|cumartesi)/i
    };
    parseDayPatterns52 = {
      narrow: [/^p/i, /^p/i, /^s/i, /^√ß/i, /^p/i, /^c/i, /^c/i],
      any: [/^pz/i, /^pt/i, /^sa/i, /^√ßa/i, /^pe/i, /^cu/i, /^ct/i],
      wide: [/^pazar(?!tesi)/i, /^pazartesi/i, /^salƒ±/i, /^√ßar≈üamba/i, /^per≈üembe/i, /^cuma(?!rtesi)/i, /^cumartesi/i]
    };
    matchDayPeriodPatterns52 = {
      narrow: /^(√∂√∂|√∂s|gy|√∂|sa|√∂s|ak|ge)/i,
      any: /^(√∂\.?\s?[√∂s]\.?|√∂ƒüleden sonra|gece yarƒ±sƒ±|√∂ƒüle|(sabah|√∂ƒü|ak≈üam|gece)(leyin))/i
    };
    parseDayPeriodPatterns52 = {
      any: {
        am: /^√∂\.?√∂\.?/i,
        pm: /^√∂\.?s\.?/i,
        midnight: /^(gy|gece yarƒ±sƒ±)/i,
        noon: /^√∂ƒü/i,
        morning: /^sa/i,
        afternoon: /^√∂ƒüleden sonra/i,
        evening: /^ak/i,
        night: /^ge/i
      }
    };
    match52 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern52,
        parsePattern: parseOrdinalNumberPattern52,
        valueCallback: function valueCallback102(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns52,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns52,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns52,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns52,
        defaultParseWidth: "any",
        valueCallback: function valueCallback103(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns52,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns52,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns52,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns52,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns52,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns52,
        defaultParseWidth: "any"
      })
    };
    match_default53 = match52;
  }
});

// node_modules/date-fns/esm/locale/tr/index.js
var tr_exports = {};
__export(tr_exports, {
  default: () => tr_default
});
var locale56, tr_default;
var init_tr = __esm({
  "node_modules/date-fns/esm/locale/tr/index.js"() {
    init_formatDistance55();
    init_formatLong56();
    init_formatRelative54();
    init_localize53();
    init_match53();
    locale56 = {
      code: "tr",
      formatDistance: formatDistance_default54,
      formatLong: formatLong_default56,
      formatRelative: formatRelative_default53,
      localize: localize_default53,
      match: match_default53,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    tr_default = locale56;
  }
});

// node_modules/date-fns/esm/locale/ug/_lib/formatDistance/index.js
var formatDistanceLocale53, formatDistance108, formatDistance_default55;
var init_formatDistance56 = __esm({
  "node_modules/date-fns/esm/locale/ug/_lib/formatDistance/index.js"() {
    formatDistanceLocale53 = {
      lessThanXSeconds: {
        one: "ÿ®Ÿâÿ± ÿ≥ŸâŸÉ€áŸÜÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï",
        other: "ÿ≥ŸâŸÉ€áŸÜÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï {{count}}"
      },
      xSeconds: {
        one: "ÿ®Ÿâÿ± ÿ≥ŸâŸÉ€áŸÜÿ™",
        other: "ÿ≥ŸâŸÉ€áŸÜÿ™ {{count}}"
      },
      halfAMinute: "ŸäŸâÿ±ŸâŸÖ ŸÖŸâŸÜ€áÿ™",
      lessThanXMinutes: {
        one: "ÿ®Ÿâÿ± ŸÖŸâŸÜ€áÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï",
        other: "ŸÖŸâŸÜ€áÿ™ ÿ¶Ÿâ⁄ÜŸâÿØ€ï {{count}}"
      },
      xMinutes: {
        one: "ÿ®Ÿâÿ± ŸÖŸâŸÜ€áÿ™",
        other: "ŸÖŸâŸÜ€áÿ™ {{count}}"
      },
      aboutXHours: {
        one: "ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ÿ≥ÿßÿ¶€ïÿ™",
        other: "ÿ≥ÿßÿ¶€ïÿ™ {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ"
      },
      xHours: {
        one: "ÿ®Ÿâÿ± ÿ≥ÿßÿ¶€ïÿ™",
        other: "ÿ≥ÿßÿ¶€ïÿ™ {{count}}"
      },
      xDays: {
        one: "ÿ®Ÿâÿ± ŸÉ€àŸÜ",
        other: "ŸÉ€àŸÜ {{count}}"
      },
      aboutXWeeks: {
        one: "ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ±⁄æ€ïŸæÿ™€ï",
        other: "⁄æ€ïŸæÿ™€ï {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ"
      },
      xWeeks: {
        one: "ÿ®Ÿâÿ±⁄æ€ïŸæÿ™€ï",
        other: "⁄æ€ïŸæÿ™€ï {{count}}"
      },
      aboutXMonths: {
        one: "ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ÿ¶ÿßŸä",
        other: "ÿ¶ÿßŸä {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ"
      },
      xMonths: {
        one: "ÿ®Ÿâÿ± ÿ¶ÿßŸä",
        other: "ÿ¶ÿßŸä {{count}}"
      },
      aboutXYears: {
        one: "ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ ÿ®Ÿâÿ± ŸäŸâŸÑ",
        other: "ŸäŸâŸÑ {{count}} ÿ™€ïÿÆŸÖŸâŸÜ€ïŸÜ"
      },
      xYears: {
        one: "ÿ®Ÿâÿ± ŸäŸâŸÑ",
        other: "ŸäŸâŸÑ {{count}}"
      },
      overXYears: {
        one: "ÿ®Ÿâÿ± ŸäŸâŸÑÿØŸâŸÜ ÿ¶ÿßÿ±ÿ™€áŸÇ",
        other: "ŸäŸâŸÑÿØŸâŸÜ ÿ¶ÿßÿ±ÿ™€áŸÇ {{count}}"
      },
      almostXYears: {
        one: "ÿ¶ÿßÿ≥ÿßÿ≥€ïŸÜ ÿ®Ÿâÿ± ŸäŸâŸÑ",
        other: "ŸäŸâŸÑ {{count}} ÿ¶ÿßÿ≥ÿßÿ≥€ïŸÜ"
      }
    };
    formatDistance108 = function formatDistance109(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale53[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result;
        } else {
          return result + " ÿ®ŸàŸÑÿØŸâ";
        }
      }
      return result;
    };
    formatDistance_default55 = formatDistance108;
  }
});

// node_modules/date-fns/esm/locale/ug/_lib/formatLong/index.js
var dateFormats57, timeFormats57, dateTimeFormats57, formatLong57, formatLong_default57;
var init_formatLong57 = __esm({
  "node_modules/date-fns/esm/locale/ug/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats57 = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    timeFormats57 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats57 = {
      full: "{{date}} 'ÿØ€ï' {{time}}",
      long: "{{date}} 'ÿØ€ï' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong57 = {
      date: buildFormatLongFn({
        formats: dateFormats57,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats57,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats57,
        defaultWidth: "full"
      })
    };
    formatLong_default57 = formatLong57;
  }
});

// node_modules/date-fns/esm/locale/ug/_lib/formatRelative/index.js
var formatRelativeLocale53, formatRelative106, formatRelative_default54;
var init_formatRelative55 = __esm({
  "node_modules/date-fns/esm/locale/ug/_lib/formatRelative/index.js"() {
    formatRelativeLocale53 = {
      lastWeek: "'ÿ¶‚Äç€Üÿ™ŸÉ€ïŸÜ' eeee 'ÿØ€ï' p",
      yesterday: "'ÿ™€àŸÜ€à⁄Ø€àŸÜ ÿØ€ï' p",
      today: "'ÿ®€à⁄Ø€àŸÜ ÿØ€ï' p",
      tomorrow: "'ÿ¶€ïÿ™€ï ÿØ€ï' p",
      nextWeek: "eeee 'ÿØ€ï' p",
      other: "P"
    };
    formatRelative106 = function formatRelative107(token, _date, _baseDate, _options) {
      return formatRelativeLocale53[token];
    };
    formatRelative_default54 = formatRelative106;
  }
});

// node_modules/date-fns/esm/locale/ug/_lib/localize/index.js
var eraValues53, quarterValues53, monthValues53, dayValues53, dayPeriodValues53, formattingDayPeriodValues43, ordinalNumber105, localize53, localize_default54;
var init_localize54 = __esm({
  "node_modules/date-fns/esm/locale/ug/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues53 = {
      narrow: ["ÿ®", "ŸÉ"],
      abbreviated: ["ÿ®", "ŸÉ"],
      wide: ["ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ÿ®€áÿ±€áŸÜ", "ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ŸÉŸâŸäŸâŸÜ"]
    };
    quarterValues53 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1", "2", "3", "4"],
      wide: ["ÿ®Ÿâÿ±ŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ", "ÿ¶ŸâŸÉŸÉŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ", "ÿ¶€à⁄ÜŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ", "ÿ™€Üÿ™ŸâŸÜÿ¨Ÿâ ⁄Üÿßÿ±€ïŸÉ"]
    };
    monthValues53 = {
      narrow: ["Ÿä", "ŸÅ", "ŸÖ", "ÿß", "ŸÖ", "Ÿâ", "Ÿâ", "ÿß", "ÿ≥", "€Ü", "ŸÜ", "ÿØ"],
      abbreviated: ["ŸäÿßŸÜ€ãÿßÿ±", "ŸÅ€ê€ãŸâÿ±ÿßŸÑ", "ŸÖÿßÿ±ÿ™", "ÿ¶ÿßŸæÿ±ŸâŸÑ", "ŸÖÿßŸä", "ÿ¶ŸâŸä€áŸÜ", "ÿ¶ŸâŸäŸàŸÑ", "ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™", "ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±", "ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±", "ŸÜŸàŸäÿßÿ®Ÿâÿ±", "ÿØŸâŸÉÿßÿ®Ÿâÿ±"],
      wide: ["ŸäÿßŸÜ€ãÿßÿ±", "ŸÅ€ê€ãŸâÿ±ÿßŸÑ", "ŸÖÿßÿ±ÿ™", "ÿ¶ÿßŸæÿ±ŸâŸÑ", "ŸÖÿßŸä", "ÿ¶ŸâŸä€áŸÜ", "ÿ¶ŸâŸäŸàŸÑ", "ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™", "ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±", "ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±", "ŸÜŸàŸäÿßÿ®Ÿâÿ±", "ÿØŸâŸÉÿßÿ®Ÿâÿ±"]
    };
    dayValues53 = {
      narrow: ["Ÿä", "ÿØ", "ÿ≥", "⁄Ü", "Ÿæ", "ÿ¨", "ÿ¥"],
      short: ["Ÿä", "ÿØ", "ÿ≥", "⁄Ü", "Ÿæ", "ÿ¨", "ÿ¥"],
      abbreviated: ["Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï", "ÿØ€àÿ¥€ïŸÜÿ®€ï", "ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï", "⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï", "Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï", "ÿ¨€àŸÖ€ï", "ÿ¥€ïŸÜÿ®€ï"],
      wide: ["Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï", "ÿØ€àÿ¥€ïŸÜÿ®€ï", "ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï", "⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï", "Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï", "ÿ¨€àŸÖ€ï", "ÿ¥€ïŸÜÿ®€ï"]
    };
    dayPeriodValues53 = {
      narrow: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ŸâŸÖ",
        night: "ŸÉŸâ⁄Ü€ï"
      },
      abbreviated: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ŸâŸÖ",
        night: "ŸÉŸâ⁄Ü€ï"
      },
      wide: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ŸâŸÖ",
        night: "ŸÉŸâ⁄Ü€ï"
      }
    };
    formattingDayPeriodValues43 = {
      narrow: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß",
        night: "ŸÉŸâ⁄ÜŸâÿØ€ï"
      },
      abbreviated: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß",
        night: "ŸÉŸâ⁄ÜŸâÿØ€ï"
      },
      wide: {
        am: "ÿ¶€ï",
        pm: "⁄Ü",
        midnight: "ŸÉ",
        noon: "⁄Ü",
        morning: "ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜÿØ€ï",
        afternoon: "⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ",
        evening: "ÿ¶ÿßÿÆÿ¥ÿßŸÖÿØÿß",
        night: "ŸÉŸâ⁄ÜŸâÿØ€ï"
      }
    };
    ordinalNumber105 = function ordinalNumber106(dirtyNumber, _options) {
      return String(dirtyNumber);
    };
    localize53 = {
      ordinalNumber: ordinalNumber105,
      era: buildLocalizeFn({
        values: eraValues53,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues53,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback53(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues53,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues53,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues53,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues43,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default54 = localize53;
  }
});

// node_modules/date-fns/esm/locale/ug/_lib/match/index.js
var matchOrdinalNumberPattern53, parseOrdinalNumberPattern53, matchEraPatterns53, parseEraPatterns53, matchQuarterPatterns53, parseQuarterPatterns53, matchMonthPatterns53, parseMonthPatterns53, matchDayPatterns53, parseDayPatterns53, matchDayPeriodPatterns53, parseDayPeriodPatterns53, match53, match_default54;
var init_match54 = __esm({
  "node_modules/date-fns/esm/locale/ug/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern53 = /^(\d+)(th|st|nd|rd)?/i;
    parseOrdinalNumberPattern53 = /\d+/i;
    matchEraPatterns53 = {
      narrow: /^(ÿ®|ŸÉ)/i,
      wide: /^(ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ÿ®€áÿ±€áŸÜ|ŸÖŸâŸäŸÑÿßÿØŸâÿØŸâŸÜ ŸÉŸâŸäŸâŸÜ)/i
    };
    parseEraPatterns53 = {
      any: [/^ÿ®€áÿ±€áŸÜ/i, /^ŸÉŸâŸäŸâŸÜ/i]
    };
    matchQuarterPatterns53 = {
      narrow: /^[1234]/i,
      abbreviated: /^⁄Ü[1234]/i,
      wide: /^⁄Üÿßÿ±€ïŸÉ [1234]/i
    };
    parseQuarterPatterns53 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns53 = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[ŸäŸÅŸÖÿ¶ÿßŸÖÿ¶‚Äçÿ¶ÿßÿ≥€ÜŸÜÿØ]/i,
      abbreviated: /^(ŸäÿßŸÜ€ãÿßÿ±|ŸÅ€ê€ãŸâÿ±ÿßŸÑ|ŸÖÿßÿ±ÿ™|ÿ¶ÿßŸæÿ±ŸâŸÑ|ŸÖÿßŸä|ÿ¶ŸâŸä€áŸÜ|ÿ¶ŸâŸäŸàŸÑ|ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™|ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±|ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±|ŸÜŸàŸäÿßÿ®Ÿâÿ±|ÿØŸâŸÉÿßÿ®Ÿâÿ±)/i,
      wide: /^(ŸäÿßŸÜ€ãÿßÿ±|ŸÅ€ê€ãŸâÿ±ÿßŸÑ|ŸÖÿßÿ±ÿ™|ÿ¶ÿßŸæÿ±ŸâŸÑ|ŸÖÿßŸä|ÿ¶ŸâŸä€áŸÜ|ÿ¶ŸâŸäŸàŸÑ|ÿ¶ÿß€ãÿ∫€áÿ≥ÿ™|ÿ≥ŸâŸÜÿ™€ïÿ®Ÿâÿ±|ÿ¶€ÜŸÉÿ™€ïÿ®Ÿâÿ±|ŸÜŸàŸäÿßÿ®Ÿâÿ±|ÿØŸâŸÉÿßÿ®Ÿâÿ±)/i
    };
    parseMonthPatterns53 = {
      narrow: [/^Ÿä/i, /^ŸÅ/i, /^ŸÖ/i, /^ÿß/i, /^ŸÖ/i, /^Ÿâ‚Äç/i, /^Ÿâ‚Äç/i, /^ÿß‚Äç/i, /^ÿ≥/i, /^€Ü/i, /^ŸÜ/i, /^ÿØ/i],
      any: [/^ŸäÿßŸÜ/i, /^ŸÅ€ê€ã/i, /^ŸÖÿßÿ±/i, /^ÿ¶ÿßŸæ/i, /^ŸÖÿßŸä/i, /^ÿ¶ŸâŸä€áŸÜ/i, /^ÿ¶ŸâŸäŸàŸÑ/i, /^ÿ¶ÿß€ã/i, /^ÿ≥ŸâŸÜ/i, /^ÿ¶€ÜŸÉ/i, /^ŸÜŸàŸä/i, /^ÿØŸâŸÉ/i]
    };
    matchDayPatterns53 = {
      narrow: /^[ÿØÿ≥⁄ÜŸæÿ¨ÿ¥Ÿä]/i,
      short: /^(Ÿä€ï|ÿØ€à|ÿ≥€ï|⁄Üÿß|Ÿæ€ï|ÿ¨€à|ÿ¥€ï)/i,
      abbreviated: /^(Ÿä€ï|ÿØ€à|ÿ≥€ï|⁄Üÿß|Ÿæ€ï|ÿ¨€à|ÿ¥€ï)/i,
      wide: /^(Ÿä€ïŸÉÿ¥€ïŸÜÿ®€ï|ÿØ€àÿ¥€ïŸÜÿ®€ï|ÿ≥€ïŸäÿ¥€ïŸÜÿ®€ï|⁄Üÿßÿ±ÿ¥€ïŸÜÿ®€ï|Ÿæ€ïŸäÿ¥€ïŸÜÿ®€ï|ÿ¨€àŸÖ€ï|ÿ¥€ïŸÜÿ®€ï)/i
    };
    parseDayPatterns53 = {
      narrow: [/^Ÿä/i, /^ÿØ/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i],
      any: [/^Ÿä/i, /^ÿØ/i, /^ÿ≥/i, /^⁄Ü/i, /^Ÿæ/i, /^ÿ¨/i, /^ÿ¥/i]
    };
    matchDayPeriodPatterns53 = {
      narrow: /^(ÿ¶€ï|⁄Ü|ŸÉ|⁄Ü|(ÿØ€ï|ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ) ( ÿ¶€ï‚Äç|⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ|ÿ¶ÿßÿÆÿ¥ŸâŸÖ|ŸÉŸâ⁄Ü€ï))/i,
      any: /^(ÿ¶€ï|⁄Ü|ŸÉ|⁄Ü|(ÿØ€ï|ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ) ( ÿ¶€ï‚Äç|⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ|ÿ¶ÿßÿÆÿ¥ŸâŸÖ|ŸÉŸâ⁄Ü€ï))/i
    };
    parseDayPeriodPatterns53 = {
      any: {
        am: /^ÿ¶€ï/i,
        pm: /^⁄Ü/i,
        midnight: /^ŸÉ/i,
        noon: /^⁄Ü/i,
        morning: /ÿ¶€ïÿ™Ÿâ⁄Ø€ïŸÜ/i,
        afternoon: /⁄Ü€àÿ¥ÿ™ŸâŸÜ ŸÉŸâŸäŸâŸÜ/i,
        evening: /ÿ¶ÿßÿÆÿ¥ŸâŸÖ/i,
        night: /ŸÉŸâ⁄Ü€ï/i
      }
    };
    match53 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern53,
        parsePattern: parseOrdinalNumberPattern53,
        valueCallback: function valueCallback104(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns53,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns53,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns53,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns53,
        defaultParseWidth: "any",
        valueCallback: function valueCallback105(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns53,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns53,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns53,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns53,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns53,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns53,
        defaultParseWidth: "any"
      })
    };
    match_default54 = match53;
  }
});

// node_modules/date-fns/esm/locale/ug/index.js
var ug_exports = {};
__export(ug_exports, {
  default: () => ug_default
});
var locale57, ug_default;
var init_ug = __esm({
  "node_modules/date-fns/esm/locale/ug/index.js"() {
    init_formatDistance56();
    init_formatLong57();
    init_formatRelative55();
    init_localize54();
    init_match54();
    locale57 = {
      code: "ug",
      formatDistance: formatDistance_default55,
      formatLong: formatLong_default57,
      formatRelative: formatRelative_default54,
      localize: localize_default54,
      match: match_default54,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    ug_default = locale57;
  }
});

// node_modules/date-fns/esm/locale/uk/_lib/formatDistance/index.js
function declension6(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function buildLocalizeTokenFn4(scheme) {
  return function(count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension6(scheme.future, count);
        } else {
          return "–∑–∞ " + declension6(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension6(scheme.past, count);
        } else {
          return declension6(scheme.regular, count) + " —Ç–æ–º—É";
        }
      }
    } else {
      return declension6(scheme.regular, count);
    }
  };
}
var halfAtMinute, formatDistanceLocale54, formatDistance110, formatDistance_default56;
var init_formatDistance57 = __esm({
  "node_modules/date-fns/esm/locale/uk/_lib/formatDistance/index.js"() {
    halfAtMinute = function halfAtMinute2(_, options) {
      if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "–∑–∞ –ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏";
        } else {
          return "–ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É";
        }
      }
      return "–ø—ñ–≤—Ö–≤–∏–ª–∏–Ω–∏";
    };
    formatDistanceLocale54 = {
      lessThanXSeconds: buildLocalizeTokenFn4({
        regular: {
          one: "–º–µ–Ω—à–µ —Å–µ–∫—É–Ω–¥–∏",
          singularNominative: "–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥–∏",
          singularGenitive: "–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥",
          pluralGenitive: "–º–µ–Ω—à–µ {{count}} —Å–µ–∫—É–Ω–¥"
        },
        future: {
          one: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ —Å–µ–∫—É–Ω–¥—É",
          singularNominative: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥–∏",
          pluralGenitive: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      xSeconds: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥–∞",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥–∏",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥"
        },
        past: {
          singularNominative: "{{count}} —Å–µ–∫—É–Ω–¥—É —Ç–æ–º—É",
          singularGenitive: "{{count}} —Å–µ–∫—É–Ω–¥–∏ —Ç–æ–º—É",
          pluralGenitive: "{{count}} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É"
        },
        future: {
          singularNominative: "–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥—É",
          singularGenitive: "–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥–∏",
          pluralGenitive: "–∑–∞ {{count}} —Å–µ–∫—É–Ω–¥"
        }
      }),
      halfAMinute: halfAtMinute,
      lessThanXMinutes: buildLocalizeTokenFn4({
        regular: {
          one: "–º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏",
          singularNominative: "–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω–∏",
          singularGenitive: "–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω",
          pluralGenitive: "–º–µ–Ω—à–µ {{count}} —Ö–≤–∏–ª–∏–Ω"
        },
        future: {
          one: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É",
          singularNominative: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω—É",
          singularGenitive: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω–∏",
          pluralGenitive: "–º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω"
        }
      }),
      xMinutes: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} —Ö–≤–∏–ª–∏–Ω–∞",
          singularGenitive: "{{count}} —Ö–≤–∏–ª–∏–Ω–∏",
          pluralGenitive: "{{count}} —Ö–≤–∏–ª–∏–Ω"
        },
        past: {
          singularNominative: "{{count}} —Ö–≤–∏–ª–∏–Ω—É —Ç–æ–º—É",
          singularGenitive: "{{count}} —Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É",
          pluralGenitive: "{{count}} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
        },
        future: {
          singularNominative: "–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω—É",
          singularGenitive: "–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω–∏",
          pluralGenitive: "–∑–∞ {{count}} —Ö–≤–∏–ª–∏–Ω"
        }
      }),
      aboutXHours: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω–∏",
          singularGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω",
          pluralGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} –≥–æ–¥–∏–Ω"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω—É",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω–∏",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –≥–æ–¥–∏–Ω"
        }
      }),
      xHours: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} –≥–æ–¥–∏–Ω—É",
          singularGenitive: "{{count}} –≥–æ–¥–∏–Ω–∏",
          pluralGenitive: "{{count}} –≥–æ–¥–∏–Ω"
        }
      }),
      xDays: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} –¥–µ–Ω—å",
          singularGenitive: "{{count}} –¥–Ωi",
          pluralGenitive: "{{count}} –¥–Ω—ñ–≤"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—è",
          singularGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—ñ–≤",
          pluralGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} —Ç–∏–∂–Ω—ñ–≤"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–¥–µ–Ω—å",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–Ω—ñ",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ç–∏–∂–Ω—ñ–≤"
        }
      }),
      xWeeks: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} —Ç–∏–∂–¥–µ–Ω—å",
          singularGenitive: "{{count}} —Ç–∏–∂–Ω—ñ",
          pluralGenitive: "{{count}} —Ç–∏–∂–Ω—ñ–≤"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—è",
          singularGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—ñ–≤",
          pluralGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} –º—ñ—Å—è—Ü—ñ–≤"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—å",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—ñ",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} –º—ñ—Å—è—Ü—ñ–≤"
        }
      }),
      xMonths: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} –º—ñ—Å—è—Ü—å",
          singularGenitive: "{{count}} –º—ñ—Å—è—Ü—ñ",
          pluralGenitive: "{{count}} –º—ñ—Å—è—Ü—ñ–≤"
        }
      }),
      aboutXYears: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—É",
          singularGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—ñ–≤",
          pluralGenitive: "–±–ª–∏–∑—å–∫–æ {{count}} —Ä–æ–∫—ñ–≤"
        },
        future: {
          singularNominative: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä—ñ–∫",
          singularGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä–æ–∫–∏",
          pluralGenitive: "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤"
        }
      }),
      xYears: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "{{count}} —Ä—ñ–∫",
          singularGenitive: "{{count}} —Ä–æ–∫–∏",
          pluralGenitive: "{{count}} —Ä–æ–∫—ñ–≤"
        }
      }),
      overXYears: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—É",
          singularGenitive: "–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—ñ–≤",
          pluralGenitive: "–±—ñ–ª—å—à–µ {{count}} —Ä–æ–∫—ñ–≤"
        },
        future: {
          singularNominative: "–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä—ñ–∫",
          singularGenitive: "–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä–æ–∫–∏",
          pluralGenitive: "–±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤"
        }
      }),
      almostXYears: buildLocalizeTokenFn4({
        regular: {
          singularNominative: "–º–∞–π–∂–µ {{count}} —Ä—ñ–∫",
          singularGenitive: "–º–∞–π–∂–µ {{count}} —Ä–æ–∫–∏",
          pluralGenitive: "–º–∞–π–∂–µ {{count}} —Ä–æ–∫—ñ–≤"
        },
        future: {
          singularNominative: "–º–∞–π–∂–µ –∑–∞ {{count}} —Ä—ñ–∫",
          singularGenitive: "–º–∞–π–∂–µ –∑–∞ {{count}} —Ä–æ–∫–∏",
          pluralGenitive: "–º–∞–π–∂–µ –∑–∞ {{count}} —Ä–æ–∫—ñ–≤"
        }
      })
    };
    formatDistance110 = function formatDistance111(token, count, options) {
      options = options || {};
      return formatDistanceLocale54[token](count, options);
    };
    formatDistance_default56 = formatDistance110;
  }
});

// node_modules/date-fns/esm/locale/uk/_lib/formatLong/index.js
var dateFormats58, timeFormats58, dateTimeFormats58, formatLong58, formatLong_default58;
var init_formatLong58 = __esm({
  "node_modules/date-fns/esm/locale/uk/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats58 = {
      full: "EEEE, do MMMM y '—Ä.'",
      long: "do MMMM y '—Ä.'",
      medium: "d MMM y '—Ä.'",
      short: "dd.MM.y"
    };
    timeFormats58 = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    dateTimeFormats58 = {
      full: "{{date}} '–æ' {{time}}",
      long: "{{date}} '–æ' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong58 = {
      date: buildFormatLongFn({
        formats: dateFormats58,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats58,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats58,
        defaultWidth: "full"
      })
    };
    formatLong_default58 = formatLong58;
  }
});

// node_modules/date-fns/esm/locale/uk/_lib/formatRelative/index.js
function lastWeek15(day) {
  var weekday = accusativeWeekdays7[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –º–∏–Ω—É–ª—É " + weekday + " –æ' p";
    case 1:
    case 2:
    case 4:
      return "'—É –º–∏–Ω—É–ª–∏–π " + weekday + " –æ' p";
  }
}
function thisWeek7(day) {
  var weekday = accusativeWeekdays7[day];
  return "'—É " + weekday + " –æ' p";
}
function nextWeek13(day) {
  var weekday = accusativeWeekdays7[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω—É " + weekday + " –æ' p";
    case 1:
    case 2:
    case 4:
      return "'—É –Ω–∞—Å—Ç—É–ø–Ω–∏–π " + weekday + " –æ' p";
  }
}
var accusativeWeekdays7, lastWeekFormat3, nextWeekFormat3, formatRelativeLocale54, formatRelative108, formatRelative_default55;
var init_formatRelative56 = __esm({
  "node_modules/date-fns/esm/locale/uk/_lib/formatRelative/index.js"() {
    init_esm();
    init_isSameUTCWeek();
    accusativeWeekdays7 = ["–Ω–µ–¥—ñ–ª—é", "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä", "–ø‚Äô—è—Ç–Ω–∏—Ü—é", "—Å—É–±–æ—Ç—É"];
    lastWeekFormat3 = function lastWeekFormat4(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek7(day);
      } else {
        return lastWeek15(day);
      }
    };
    nextWeekFormat3 = function nextWeekFormat4(dirtyDate, baseDate, options) {
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      if (isSameUTCWeek(date, baseDate, options)) {
        return thisWeek7(day);
      } else {
        return nextWeek13(day);
      }
    };
    formatRelativeLocale54 = {
      lastWeek: lastWeekFormat3,
      yesterday: "'–≤—á–æ—Ä–∞ –æ' p",
      today: "'—Å—å–æ–≥–æ–¥–Ω—ñ –æ' p",
      tomorrow: "'–∑–∞–≤—Ç—Ä–∞ –æ' p",
      nextWeek: nextWeekFormat3,
      other: "P"
    };
    formatRelative108 = function formatRelative109(token, date, baseDate, options) {
      var format2 = formatRelativeLocale54[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default55 = formatRelative108;
  }
});

// node_modules/date-fns/esm/locale/uk/_lib/localize/index.js
var eraValues54, quarterValues54, monthValues54, formattingMonthValues14, dayValues54, dayPeriodValues54, formattingDayPeriodValues44, ordinalNumber107, localize54, localize_default55;
var init_localize55 = __esm({
  "node_modules/date-fns/esm/locale/uk/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues54 = {
      narrow: ["–¥–æ –Ω.–µ.", "–Ω.–µ."],
      abbreviated: ["–¥–æ –Ω. –µ.", "–Ω. –µ."],
      wide: ["–¥–æ –Ω–∞—à–æ—ó –µ—Ä–∏", "–Ω–∞—à–æ—ó –µ—Ä–∏"]
    };
    quarterValues54 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-–π –∫–≤.", "2-–π –∫–≤.", "3-–π –∫–≤.", "4-–π –∫–≤."],
      wide: ["1-–π –∫–≤–∞—Ä—Ç–∞–ª", "2-–π –∫–≤–∞—Ä—Ç–∞–ª", "3-–π –∫–≤–∞—Ä—Ç–∞–ª", "4-–π –∫–≤–∞—Ä—Ç–∞–ª"]
    };
    monthValues54 = {
      // –î–°–¢–£ 3582:2013
      narrow: ["–°", "–õ", "–ë", "–ö", "–¢", "–ß", "–õ", "–°", "–í", "–ñ", "–õ", "–ì"],
      abbreviated: ["—Å—ñ—á.", "–ª—é—Ç.", "–±–µ—Ä–µ–∑.", "–∫–≤—ñ—Ç.", "—Ç—Ä–∞–≤.", "—á–µ—Ä–≤.", "–ª–∏–ø.", "—Å–µ—Ä–ø.", "–≤–µ—Ä–µ—Å.", "–∂–æ–≤—Ç.", "–ª–∏—Å—Ç–æ–ø.", "–≥—Ä—É–¥."],
      wide: ["—Å—ñ—á–µ–Ω—å", "–ª—é—Ç–∏–π", "–±–µ—Ä–µ–∑–µ–Ω—å", "–∫–≤—ñ—Ç–µ–Ω—å", "—Ç—Ä–∞–≤–µ–Ω—å", "—á–µ—Ä–≤–µ–Ω—å", "–ª–∏–ø–µ–Ω—å", "—Å–µ—Ä–ø–µ–Ω—å", "–≤–µ—Ä–µ—Å–µ–Ω—å", "–∂–æ–≤—Ç–µ–Ω—å", "–ª–∏—Å—Ç–æ–ø–∞–¥", "–≥—Ä—É–¥–µ–Ω—å"]
    };
    formattingMonthValues14 = {
      narrow: ["–°", "–õ", "–ë", "–ö", "–¢", "–ß", "–õ", "–°", "–í", "–ñ", "–õ", "–ì"],
      abbreviated: ["—Å—ñ—á.", "–ª—é—Ç.", "–±–µ—Ä–µ–∑.", "–∫–≤—ñ—Ç.", "—Ç—Ä–∞–≤.", "—á–µ—Ä–≤.", "–ª–∏–ø.", "—Å–µ—Ä–ø.", "–≤–µ—Ä–µ—Å.", "–∂–æ–≤—Ç.", "–ª–∏—Å—Ç–æ–ø.", "–≥—Ä—É–¥."],
      wide: ["—Å—ñ—á–Ω—è", "–ª—é—Ç–æ–≥–æ", "–±–µ—Ä–µ–∑–Ω—è", "–∫–≤—ñ—Ç–Ω—è", "—Ç—Ä–∞–≤–Ω—è", "—á–µ—Ä–≤–Ω—è", "–ª–∏–ø–Ω—è", "—Å–µ—Ä–ø–Ω—è", "–≤–µ—Ä–µ—Å–Ω—è", "–∂–æ–≤—Ç–Ω—è", "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "–≥—Ä—É–¥–Ω—è"]
    };
    dayValues54 = {
      narrow: ["–ù", "–ü", "–í", "–°", "–ß", "–ü", "–°"],
      short: ["–Ω–¥", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"],
      abbreviated: ["–Ω–µ–¥", "–ø–æ–Ω", "–≤—ñ–≤", "—Å–µ—Ä", "—á—Ç–≤", "–ø—Ç–Ω", "—Å—É–±"],
      wide: ["–Ω–µ–¥—ñ–ª—è", "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", "–ø‚Äô—è—Ç–Ω–∏—Ü—è", "—Å—É–±–æ—Ç–∞"]
    };
    dayPeriodValues54 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω.",
        noon: "–ø–æ–ª.",
        morning: "—Ä–∞–Ω–æ–∫",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω—ñ—á"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω.",
        noon: "–ø–æ–ª.",
        morning: "—Ä–∞–Ω–æ–∫",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á.",
        night: "–Ω—ñ—á"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω—ñ—á",
        noon: "–ø–æ–ª—É–¥–µ–Ω—å",
        morning: "—Ä–∞–Ω–æ–∫",
        afternoon: "–¥–µ–Ω—å",
        evening: "–≤–µ—á—ñ—Ä",
        night: "–Ω—ñ—á"
      }
    };
    formattingDayPeriodValues44 = {
      narrow: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω.",
        noon: "–ø–æ–ª.",
        morning: "—Ä–∞–Ω–∫—É",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—ñ"
      },
      abbreviated: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω.",
        noon: "–ø–æ–ª.",
        morning: "—Ä–∞–Ω–∫—É",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—ñ"
      },
      wide: {
        am: "–î–ü",
        pm: "–ü–ü",
        midnight: "–ø—ñ–≤–Ω—ñ—á",
        noon: "–ø–æ–ª—É–¥–µ–Ω—å",
        morning: "—Ä–∞–Ω–∫—É",
        afternoon: "–¥–Ω—è",
        evening: "–≤–µ—á.",
        night: "–Ω–æ—á—ñ"
      }
    };
    ordinalNumber107 = function ordinalNumber108(dirtyNumber, options) {
      var unit = String(options === null || options === void 0 ? void 0 : options.unit);
      var number = Number(dirtyNumber);
      var suffix;
      if (unit === "date") {
        if (number === 3 || number === 23) {
          suffix = "-—î";
        } else {
          suffix = "-–µ";
        }
      } else if (unit === "minute" || unit === "second" || unit === "hour") {
        suffix = "-–∞";
      } else {
        suffix = "-–π";
      }
      return number + suffix;
    };
    localize54 = {
      ordinalNumber: ordinalNumber107,
      era: buildLocalizeFn({
        values: eraValues54,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues54,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback54(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues54,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues14,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues54,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues54,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues44,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default55 = localize54;
  }
});

// node_modules/date-fns/esm/locale/uk/_lib/match/index.js
var matchOrdinalNumberPattern54, parseOrdinalNumberPattern54, matchEraPatterns54, parseEraPatterns54, matchQuarterPatterns54, parseQuarterPatterns54, matchMonthPatterns54, parseMonthPatterns54, matchDayPatterns54, parseDayPatterns54, matchDayPeriodPatterns54, parseDayPeriodPatterns54, match54, match_default55;
var init_match55 = __esm({
  "node_modules/date-fns/esm/locale/uk/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern54 = /^(\d+)(-?(–µ|–π|—î|–∞|—è))?/i;
    parseOrdinalNumberPattern54 = /\d+/i;
    matchEraPatterns54 = {
      narrow: /^((–¥–æ )?–Ω\.?\s?–µ\.?)/i,
      abbreviated: /^((–¥–æ )?–Ω\.?\s?–µ\.?)/i,
      wide: /^(–¥–æ –Ω–∞—à–æ—ó –µ—Ä–∏|–Ω–∞—à–æ—ó –µ—Ä–∏|–Ω–∞—à–∞ –µ—Ä–∞)/i
    };
    parseEraPatterns54 = {
      any: [/^–¥/i, /^–Ω/i]
    };
    matchQuarterPatterns54 = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[–∏—ñ]?–π?)? –∫–≤.?/i,
      wide: /^[1234](-?[–∏—ñ]?–π?)? –∫–≤–∞—Ä—Ç–∞–ª/i
    };
    parseQuarterPatterns54 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns54 = {
      narrow: /^[—Å–ª–±–∫—Ç—á–≤–∂–≥]/i,
      abbreviated: /^(—Å—ñ—á|–ª—é—Ç|–±–µ—Ä(–µ–∑)?|–∫–≤—ñ—Ç|—Ç—Ä–∞–≤|—á–µ—Ä–≤|–ª–∏–ø|—Å–µ—Ä–ø|–≤–µ—Ä(–µ—Å)?|–∂–æ–≤—Ç|–ª–∏—Å(—Ç–æ–ø)?|–≥—Ä—É–¥)\.?/i,
      wide: /^(—Å—ñ—á–µ–Ω—å|—Å—ñ—á–Ω—è|–ª—é—Ç–∏–π|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–µ–Ω—å|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–µ–Ω—å|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–µ–Ω—å|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|—á–µ—Ä–≤–µ–Ω—å|–ª–∏–ø–µ–Ω—å|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–µ–Ω—å|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–µ–Ω—å|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–µ–Ω—å|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥[–∞]?|–≥—Ä—É–¥–µ–Ω—å|–≥—Ä—É–¥–Ω—è)/i
    };
    parseMonthPatterns54 = {
      narrow: [/^—Å/i, /^–ª/i, /^–±/i, /^–∫/i, /^—Ç/i, /^—á/i, /^–ª/i, /^—Å/i, /^–≤/i, /^–∂/i, /^–ª/i, /^–≥/i],
      any: [/^—Å—ñ/i, /^–ª—é/i, /^–±/i, /^–∫/i, /^—Ç/i, /^—á/i, /^–ª–∏–ø/i, /^—Å–µ/i, /^–≤/i, /^–∂/i, /^–ª–∏—Å/i, /^–≥/i]
    };
    matchDayPatterns54 = {
      narrow: /^[–Ω–ø–≤—Å—á]/i,
      short: /^(–Ω–¥|–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±)\.?/i,
      abbreviated: /^(–Ω–µ–¥|–ø–æ–Ω|–≤—ñ–≤|—Å–µ—Ä|—á–µ?—Ç–≤|–ø—Ç–Ω?|—Å—É–±)\.?/i,
      wide: /^(–Ω–µ–¥—ñ–ª[—è—ñ]|–ø–æ–Ω–µ–¥—ñ–ª[–æ–∫][–∫–∞]|–≤—ñ–≤—Ç–æ—Ä[–æ–∫][–∫–∞]|—Å–µ—Ä–µ–¥[–∞–∏]|—á–µ—Ç–≤–µ—Ä(–≥–∞)?|–ø\W*?—è—Ç–Ω–∏—Ü[—è—ñ]|—Å—É–±–æ—Ç[–∞–∏])/i
    };
    parseDayPatterns54 = {
      narrow: [/^–Ω/i, /^–ø/i, /^–≤/i, /^—Å/i, /^—á/i, /^–ø/i, /^—Å/i],
      any: [/^–Ω/i, /^–ø[–æ–Ω]/i, /^–≤/i, /^—Å[–µ—Ä]/i, /^—á/i, /^–ø\W*?[—è—Ç]/i, /^—Å[—É–±]/i]
    };
    matchDayPeriodPatterns54 = {
      narrow: /^([–¥–ø]–ø|–ø—ñ–≤–Ω\.?|–ø–æ–ª\.?|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω—ñ—á|–Ω–æ—á—ñ)/i,
      abbreviated: /^([–¥–ø]–ø|–ø—ñ–≤–Ω\.?|–ø–æ–ª\.?|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á\.?|–Ω—ñ—á|–Ω–æ—á—ñ)/i,
      wide: /^([–¥–ø]–ø|–ø—ñ–≤–Ω—ñ—á|–ø–æ–ª—É–¥–µ–Ω—å|—Ä–∞–Ω–æ–∫|—Ä–∞–Ω–∫—É|–¥–µ–Ω—å|–¥–Ω—è|–≤–µ—á—ñ—Ä|–≤–µ—á–æ—Ä–∞|–Ω—ñ—á|–Ω–æ—á—ñ)/i
    };
    parseDayPeriodPatterns54 = {
      any: {
        am: /^–¥–ø/i,
        pm: /^–ø–ø/i,
        midnight: /^–ø—ñ–≤–Ω/i,
        noon: /^–ø–æ–ª/i,
        morning: /^—Ä/i,
        afternoon: /^–¥[–µ–Ω]/i,
        evening: /^–≤/i,
        night: /^–Ω/i
      }
    };
    match54 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern54,
        parsePattern: parseOrdinalNumberPattern54,
        valueCallback: function valueCallback106(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns54,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns54,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns54,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns54,
        defaultParseWidth: "any",
        valueCallback: function valueCallback107(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns54,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns54,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns54,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns54,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns54,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns54,
        defaultParseWidth: "any"
      })
    };
    match_default55 = match54;
  }
});

// node_modules/date-fns/esm/locale/uk/index.js
var uk_exports = {};
__export(uk_exports, {
  default: () => uk_default
});
var locale58, uk_default;
var init_uk = __esm({
  "node_modules/date-fns/esm/locale/uk/index.js"() {
    init_formatDistance57();
    init_formatLong58();
    init_formatRelative56();
    init_localize55();
    init_match55();
    locale58 = {
      code: "uk",
      formatDistance: formatDistance_default56,
      formatLong: formatLong_default58,
      formatRelative: formatRelative_default55,
      localize: localize_default55,
      match: match_default55,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
    uk_default = locale58;
  }
});

// node_modules/date-fns/esm/locale/vi/_lib/formatDistance/index.js
var formatDistanceLocale55, formatDistance112, formatDistance_default57;
var init_formatDistance58 = __esm({
  "node_modules/date-fns/esm/locale/vi/_lib/formatDistance/index.js"() {
    formatDistanceLocale55 = {
      lessThanXSeconds: {
        one: "d∆∞·ªõi 1 gi√¢y",
        other: "d∆∞·ªõi {{count}} gi√¢y"
      },
      xSeconds: {
        one: "1 gi√¢y",
        other: "{{count}} gi√¢y"
      },
      halfAMinute: "n·ª≠a ph√∫t",
      lessThanXMinutes: {
        one: "d∆∞·ªõi 1 ph√∫t",
        other: "d∆∞·ªõi {{count}} ph√∫t"
      },
      xMinutes: {
        one: "1 ph√∫t",
        other: "{{count}} ph√∫t"
      },
      aboutXHours: {
        one: "kho·∫£ng 1 gi·ªù",
        other: "kho·∫£ng {{count}} gi·ªù"
      },
      xHours: {
        one: "1 gi·ªù",
        other: "{{count}} gi·ªù"
      },
      xDays: {
        one: "1 ng√†y",
        other: "{{count}} ng√†y"
      },
      aboutXWeeks: {
        one: "kho·∫£ng 1 tu·∫ßn",
        other: "kho·∫£ng {{count}} tu·∫ßn"
      },
      xWeeks: {
        one: "1 tu·∫ßn",
        other: "{{count}} tu·∫ßn"
      },
      aboutXMonths: {
        one: "kho·∫£ng 1 th√°ng",
        other: "kho·∫£ng {{count}} th√°ng"
      },
      xMonths: {
        one: "1 th√°ng",
        other: "{{count}} th√°ng"
      },
      aboutXYears: {
        one: "kho·∫£ng 1 nƒÉm",
        other: "kho·∫£ng {{count}} nƒÉm"
      },
      xYears: {
        one: "1 nƒÉm",
        other: "{{count}} nƒÉm"
      },
      overXYears: {
        one: "h∆°n 1 nƒÉm",
        other: "h∆°n {{count}} nƒÉm"
      },
      almostXYears: {
        one: "g·∫ßn 1 nƒÉm",
        other: "g·∫ßn {{count}} nƒÉm"
      }
    };
    formatDistance112 = function formatDistance113(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale55[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " n·ªØa";
        } else {
          return result + " tr∆∞·ªõc";
        }
      }
      return result;
    };
    formatDistance_default57 = formatDistance112;
  }
});

// node_modules/date-fns/esm/locale/vi/_lib/formatLong/index.js
var dateFormats59, timeFormats59, dateTimeFormats59, formatLong59, formatLong_default59;
var init_formatLong59 = __esm({
  "node_modules/date-fns/esm/locale/vi/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats59 = {
      // th·ª© S√°u, ng√†y 25 th√°ng 08 nƒÉm 2017
      full: "EEEE, 'ng√†y' d MMMM 'nƒÉm' y",
      // ng√†y 25 th√°ng 08 nƒÉm 2017
      long: "'ng√†y' d MMMM 'nƒÉm' y",
      // 25 thg 08 nƒÉm 2017
      medium: "d MMM 'nƒÉm' y",
      // 25/08/2017
      short: "dd/MM/y"
    };
    timeFormats59 = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    dateTimeFormats59 = {
      // th·ª© S√°u, ng√†y 25 th√°ng 08 nƒÉm 2017 23:25:59
      full: "{{date}} {{time}}",
      // ng√†y 25 th√°ng 08 nƒÉm 2017 23:25
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong59 = {
      date: buildFormatLongFn({
        formats: dateFormats59,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats59,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats59,
        defaultWidth: "full"
      })
    };
    formatLong_default59 = formatLong59;
  }
});

// node_modules/date-fns/esm/locale/vi/_lib/formatRelative/index.js
var formatRelativeLocale55, formatRelative110, formatRelative_default56;
var init_formatRelative57 = __esm({
  "node_modules/date-fns/esm/locale/vi/_lib/formatRelative/index.js"() {
    formatRelativeLocale55 = {
      lastWeek: "eeee 'tu·∫ßn tr∆∞·ªõc v√†o l√∫c' p",
      yesterday: "'h√¥m qua v√†o l√∫c' p",
      today: "'h√¥m nay v√†o l√∫c' p",
      tomorrow: "'ng√†y mai v√†o l√∫c' p",
      nextWeek: "eeee 't·ªõi v√†o l√∫c' p",
      other: "P"
    };
    formatRelative110 = function formatRelative111(token, _date, _baseDate, _options) {
      return formatRelativeLocale55[token];
    };
    formatRelative_default56 = formatRelative110;
  }
});

// node_modules/date-fns/esm/locale/vi/_lib/localize/index.js
var eraValues55, quarterValues55, formattingQuarterValues4, monthValues55, formattingMonthValues15, dayValues55, dayPeriodValues55, formattingDayPeriodValues45, ordinalNumber109, localize55, localize_default56;
var init_localize56 = __esm({
  "node_modules/date-fns/esm/locale/vi/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues55 = {
      narrow: ["TCN", "SCN"],
      abbreviated: ["tr∆∞·ªõc CN", "sau CN"],
      wide: ["tr∆∞·ªõc C√¥ng Nguy√™n", "sau C√¥ng Nguy√™n"]
    };
    quarterValues55 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["Qu√Ω 1", "Qu√Ω 2", "Qu√Ω 3", "Qu√Ω 4"]
    };
    formattingQuarterValues4 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      // I notice many news outlet use this "qu√Ω II/2018"
      wide: ["qu√Ω I", "qu√Ω II", "qu√Ω III", "qu√Ω IV"]
    };
    monthValues55 = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: ["Thg 1", "Thg 2", "Thg 3", "Thg 4", "Thg 5", "Thg 6", "Thg 7", "Thg 8", "Thg 9", "Thg 10", "Thg 11", "Thg 12"],
      wide: ["Th√°ng M·ªôt", "Th√°ng Hai", "Th√°ng Ba", "Th√°ng T∆∞", "Th√°ng NƒÉm", "Th√°ng S√°u", "Th√°ng B·∫£y", "Th√°ng T√°m", "Th√°ng Ch√≠n", "Th√°ng M∆∞·ªùi", "Th√°ng M∆∞·ªùi M·ªôt", "Th√°ng M∆∞·ªùi Hai"]
    };
    formattingMonthValues15 = {
      narrow: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"],
      abbreviated: ["thg 1", "thg 2", "thg 3", "thg 4", "thg 5", "thg 6", "thg 7", "thg 8", "thg 9", "thg 10", "thg 11", "thg 12"],
      wide: ["th√°ng 01", "th√°ng 02", "th√°ng 03", "th√°ng 04", "th√°ng 05", "th√°ng 06", "th√°ng 07", "th√°ng 08", "th√°ng 09", "th√°ng 10", "th√°ng 11", "th√°ng 12"]
    };
    dayValues55 = {
      narrow: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
      short: ["CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"],
      abbreviated: ["CN", "Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"],
      wide: ["Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"]
    };
    dayPeriodValues55 = {
      // narrow date period is extremely rare in Vietnamese
      // I used abbreviated form for noon, morning and afternoon
      // which are regconizable by Vietnamese, others cannot be any shorter
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "n·ª≠a ƒë√™m",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "t·ªëi",
        night: "ƒë√™m"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "n·ª≠a ƒë√™m",
        noon: "tr∆∞a",
        morning: "s√°ng",
        afternoon: "chi·ªÅu",
        evening: "t·ªëi",
        night: "ƒë√™m"
      },
      wide: {
        am: "SA",
        pm: "CH",
        midnight: "n·ª≠a ƒë√™m",
        noon: "tr∆∞a",
        morning: "s√°ng",
        afternoon: "chi·ªÅu",
        evening: "t·ªëi",
        night: "ƒë√™m"
      }
    };
    formattingDayPeriodValues45 = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "n·ª≠a ƒë√™m",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "t·ªëi",
        night: "ƒë√™m"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "n·ª≠a ƒë√™m",
        noon: "tr∆∞a",
        morning: "s√°ng",
        afternoon: "chi·ªÅu",
        evening: "t·ªëi",
        night: "ƒë√™m"
      },
      wide: {
        am: "SA",
        pm: "CH",
        midnight: "n·ª≠a ƒë√™m",
        noon: "gi·ªØa tr∆∞a",
        morning: "v√†o bu·ªïi s√°ng",
        afternoon: "v√†o bu·ªïi chi·ªÅu",
        evening: "v√†o bu·ªïi t·ªëi",
        night: "v√†o ban ƒë√™m"
      }
    };
    ordinalNumber109 = function ordinalNumber110(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      var unit = options === null || options === void 0 ? void 0 : options.unit;
      if (unit === "quarter") {
        switch (number) {
          case 1:
            return "I";
          case 2:
            return "II";
          case 3:
            return "III";
          case 4:
            return "IV";
        }
      } else if (unit === "day") {
        switch (number) {
          case 1:
            return "th·ª© 2";
          case 2:
            return "th·ª© 3";
          case 3:
            return "th·ª© 4";
          case 4:
            return "th·ª© 5";
          case 5:
            return "th·ª© 6";
          case 6:
            return "th·ª© 7";
          case 7:
            return "ch·ªß nh·∫≠t";
        }
      } else if (unit === "week") {
        if (number === 1) {
          return "th·ª© nh·∫•t";
        } else {
          return "th·ª© " + number;
        }
      } else if (unit === "dayOfYear") {
        if (number === 1) {
          return "ƒë·∫ßu ti√™n";
        } else {
          return "th·ª© " + number;
        }
      }
      return String(number);
    };
    localize55 = {
      ordinalNumber: ordinalNumber109,
      era: buildLocalizeFn({
        values: eraValues55,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues55,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues4,
        defaultFormattingWidth: "wide",
        argumentCallback: function argumentCallback55(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues55,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues15,
        defaultFormattingWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues55,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues55,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues45,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default56 = localize55;
  }
});

// node_modules/date-fns/esm/locale/vi/_lib/match/index.js
var matchOrdinalNumberPattern55, parseOrdinalNumberPattern55, matchEraPatterns55, parseEraPatterns55, matchQuarterPatterns55, parseQuarterPatterns55, matchMonthPatterns55, parseMonthPatterns55, matchDayPatterns55, parseDayPatterns55, matchDayPeriodPatterns55, parseDayPeriodPatterns55, match55, match_default56;
var init_match56 = __esm({
  "node_modules/date-fns/esm/locale/vi/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern55 = /^(\d+)/i;
    parseOrdinalNumberPattern55 = /\d+/i;
    matchEraPatterns55 = {
      narrow: /^(tcn|scn)/i,
      abbreviated: /^(tr∆∞·ªõc CN|sau CN)/i,
      wide: /^(tr∆∞·ªõc C√¥ng Nguy√™n|sau C√¥ng Nguy√™n)/i
    };
    parseEraPatterns55 = {
      any: [/^t/i, /^s/i]
    };
    matchQuarterPatterns55 = {
      narrow: /^([1234]|i{1,3}v?)/i,
      abbreviated: /^q([1234]|i{1,3}v?)/i,
      wide: /^qu√Ω ([1234]|i{1,3}v?)/i
    };
    parseQuarterPatterns55 = {
      any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
    };
    matchMonthPatterns55 = {
      // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
      // note the order of '1' since it is a sub-string of '10', so must be lower priority
      narrow: /^(0?[2-9]|10|11|12|0?1)/i,
      // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
      abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
      // note the order of 'M∆∞·ªùi' since it is sub-string of M∆∞·ªùi M·ªôt, so must be lower priority
      wide: /^th√°ng ?(M·ªôt|Hai|Ba|T∆∞|NƒÉm|S√°u|B·∫£y|T√°m|Ch√≠n|M∆∞·ªùi|M∆∞·ªùi ?M·ªôt|M∆∞·ªùi ?Hai|0?[1-9](?!\d)|10|11|12)/i
    };
    parseMonthPatterns55 = {
      narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
      abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
      wide: [/^th√°ng ?(M·ªôt|0?1(?!\d))/i, /^th√°ng ?(Hai|0?2)/i, /^th√°ng ?(Ba|0?3)/i, /^th√°ng ?(T∆∞|0?4)/i, /^th√°ng ?(NƒÉm|0?5)/i, /^th√°ng ?(S√°u|0?6)/i, /^th√°ng ?(B·∫£y|0?7)/i, /^th√°ng ?(T√°m|0?8)/i, /^th√°ng ?(Ch√≠n|0?9)/i, /^th√°ng ?(M∆∞·ªùi|10)/i, /^th√°ng ?(M∆∞·ªùi ?M·ªôt|11)/i, /^th√°ng ?(M∆∞·ªùi ?Hai|12)/i]
    };
    matchDayPatterns55 = {
      narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
      short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      wide: /^(Ch·ªß ?Nh·∫≠t|Ch√∫a ?Nh·∫≠t|th·ª© ?Hai|th·ª© ?Ba|th·ª© ?T∆∞|th·ª© ?NƒÉm|th·ª© ?S√°u|th·ª© ?B·∫£y)/i
    };
    parseDayPatterns55 = {
      narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      wide: [/(Ch·ªß|Ch√∫a) ?Nh·∫≠t/i, /Hai/i, /Ba/i, /T∆∞/i, /NƒÉm/i, /S√°u/i, /B·∫£y/i]
    };
    matchDayPeriodPatterns55 = {
      narrow: /^(a|p|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i,
      abbreviated: /^(am|pm|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i,
      wide: /^(ch[^i]*|sa|n·ª≠a ƒë√™m|tr∆∞a|(gi·ªù) (s√°ng|chi·ªÅu|t·ªëi|ƒë√™m))/i
    };
    parseDayPeriodPatterns55 = {
      any: {
        am: /^(a|sa)/i,
        pm: /^(p|ch[^i]*)/i,
        midnight: /n·ª≠a ƒë√™m/i,
        noon: /tr∆∞a/i,
        morning: /s√°ng/i,
        afternoon: /chi·ªÅu/i,
        evening: /t·ªëi/i,
        night: /^ƒë√™m/i
      }
    };
    match55 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern55,
        parsePattern: parseOrdinalNumberPattern55,
        valueCallback: function valueCallback108(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns55,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns55,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns55,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns55,
        defaultParseWidth: "any",
        valueCallback: function valueCallback109(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns55,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns55,
        defaultParseWidth: "wide"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns55,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns55,
        defaultParseWidth: "wide"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns55,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns55,
        defaultParseWidth: "any"
      })
    };
    match_default56 = match55;
  }
});

// node_modules/date-fns/esm/locale/vi/index.js
var vi_exports = {};
__export(vi_exports, {
  default: () => vi_default
});
var locale59, vi_default;
var init_vi = __esm({
  "node_modules/date-fns/esm/locale/vi/index.js"() {
    init_formatDistance58();
    init_formatLong59();
    init_formatRelative57();
    init_localize56();
    init_match56();
    locale59 = {
      code: "vi",
      formatDistance: formatDistance_default57,
      formatLong: formatLong_default59,
      formatRelative: formatRelative_default56,
      localize: localize_default56,
      match: match_default56,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
        /* First week of new year contains Jan 1st  */
      }
    };
    vi_default = locale59;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/_lib/formatDistance/index.js
var formatDistanceLocale56, formatDistance114, formatDistance_default58;
var init_formatDistance59 = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/_lib/formatDistance/index.js"() {
    formatDistanceLocale56 = {
      lessThanXSeconds: {
        one: "‰∏çÂà∞ 1 Áßí",
        other: "‰∏çÂà∞ {{count}} Áßí"
      },
      xSeconds: {
        one: "1 Áßí",
        other: "{{count}} Áßí"
      },
      halfAMinute: "ÂçäÂàÜÈíü",
      lessThanXMinutes: {
        one: "‰∏çÂà∞ 1 ÂàÜÈíü",
        other: "‰∏çÂà∞ {{count}} ÂàÜÈíü"
      },
      xMinutes: {
        one: "1 ÂàÜÈíü",
        other: "{{count}} ÂàÜÈíü"
      },
      xHours: {
        one: "1 Â∞èÊó∂",
        other: "{{count}} Â∞èÊó∂"
      },
      aboutXHours: {
        one: "Â§ßÁ∫¶ 1 Â∞èÊó∂",
        other: "Â§ßÁ∫¶ {{count}} Â∞èÊó∂"
      },
      xDays: {
        one: "1 Â§©",
        other: "{{count}} Â§©"
      },
      aboutXWeeks: {
        one: "Â§ßÁ∫¶ 1 ‰∏™ÊòüÊúü",
        other: "Â§ßÁ∫¶ {{count}} ‰∏™ÊòüÊúü"
      },
      xWeeks: {
        one: "1 ‰∏™ÊòüÊúü",
        other: "{{count}} ‰∏™ÊòüÊúü"
      },
      aboutXMonths: {
        one: "Â§ßÁ∫¶ 1 ‰∏™Êúà",
        other: "Â§ßÁ∫¶ {{count}} ‰∏™Êúà"
      },
      xMonths: {
        one: "1 ‰∏™Êúà",
        other: "{{count}} ‰∏™Êúà"
      },
      aboutXYears: {
        one: "Â§ßÁ∫¶ 1 Âπ¥",
        other: "Â§ßÁ∫¶ {{count}} Âπ¥"
      },
      xYears: {
        one: "1 Âπ¥",
        other: "{{count}} Âπ¥"
      },
      overXYears: {
        one: "Ë∂ÖËøá 1 Âπ¥",
        other: "Ë∂ÖËøá {{count}} Âπ¥"
      },
      almostXYears: {
        one: "Â∞ÜËøë 1 Âπ¥",
        other: "Â∞ÜËøë {{count}} Âπ¥"
      }
    };
    formatDistance114 = function formatDistance115(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale56[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "ÂÜÖ";
        } else {
          return result + "Ââç";
        }
      }
      return result;
    };
    formatDistance_default58 = formatDistance114;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/_lib/formatLong/index.js
var dateFormats60, timeFormats60, dateTimeFormats60, formatLong60, formatLong_default60;
var init_formatLong60 = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats60 = {
      full: "y'Âπ¥'M'Êúà'd'Êó•' EEEE",
      long: "y'Âπ¥'M'Êúà'd'Êó•'",
      medium: "yyyy-MM-dd",
      short: "yy-MM-dd"
    };
    timeFormats60 = {
      full: "zzzz a h:mm:ss",
      long: "z a h:mm:ss",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    dateTimeFormats60 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong60 = {
      date: buildFormatLongFn({
        formats: dateFormats60,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats60,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats60,
        defaultWidth: "full"
      })
    };
    formatLong_default60 = formatLong60;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/_lib/formatRelative/index.js
function checkWeek(date, baseDate, options) {
  var baseFormat = "eeee p";
  if (isSameUTCWeek(date, baseDate, options)) {
    return baseFormat;
  } else if (date.getTime() > baseDate.getTime()) {
    return "'‰∏ã‰∏™'" + baseFormat;
  }
  return "'‰∏ä‰∏™'" + baseFormat;
}
var formatRelativeLocale56, formatRelative112, formatRelative_default57;
var init_formatRelative58 = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/_lib/formatRelative/index.js"() {
    init_isSameUTCWeek();
    formatRelativeLocale56 = {
      lastWeek: checkWeek,
      // days before yesterday, maybe in this week or last week
      yesterday: "'Êò®Â§©' p",
      today: "'‰ªäÂ§©' p",
      tomorrow: "'ÊòéÂ§©' p",
      nextWeek: checkWeek,
      // days after tomorrow, maybe in this week or next week
      other: "PP p"
    };
    formatRelative112 = function formatRelative113(token, date, baseDate, options) {
      var format2 = formatRelativeLocale56[token];
      if (typeof format2 === "function") {
        return format2(date, baseDate, options);
      }
      return format2;
    };
    formatRelative_default57 = formatRelative112;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/_lib/localize/index.js
var eraValues56, quarterValues56, monthValues56, dayValues56, dayPeriodValues56, formattingDayPeriodValues46, ordinalNumber111, localize56, localize_default57;
var init_localize57 = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues56 = {
      narrow: ["Ââç", "ÂÖ¨ÂÖÉ"],
      abbreviated: ["Ââç", "ÂÖ¨ÂÖÉ"],
      wide: ["ÂÖ¨ÂÖÉÂâç", "ÂÖ¨ÂÖÉ"]
    };
    quarterValues56 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Á¨¨‰∏ÄÂ≠£", "Á¨¨‰∫åÂ≠£", "Á¨¨‰∏âÂ≠£", "Á¨¨ÂõõÂ≠£"],
      wide: ["Á¨¨‰∏ÄÂ≠£Â∫¶", "Á¨¨‰∫åÂ≠£Â∫¶", "Á¨¨‰∏âÂ≠£Â∫¶", "Á¨¨ÂõõÂ≠£Â∫¶"]
    };
    monthValues56 = {
      narrow: ["‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠", "‰∏É", "ÂÖ´", "‰πù", "ÂçÅ", "ÂçÅ‰∏Ä", "ÂçÅ‰∫å"],
      abbreviated: ["1Êúà", "2Êúà", "3Êúà", "4Êúà", "5Êúà", "6Êúà", "7Êúà", "8Êúà", "9Êúà", "10Êúà", "11Êúà", "12Êúà"],
      wide: ["‰∏ÄÊúà", "‰∫åÊúà", "‰∏âÊúà", "ÂõõÊúà", "‰∫îÊúà", "ÂÖ≠Êúà", "‰∏ÉÊúà", "ÂÖ´Êúà", "‰πùÊúà", "ÂçÅÊúà", "ÂçÅ‰∏ÄÊúà", "ÂçÅ‰∫åÊúà"]
    };
    dayValues56 = {
      narrow: ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"],
      short: ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"],
      abbreviated: ["Âë®Êó•", "Âë®‰∏Ä", "Âë®‰∫å", "Âë®‰∏â", "Âë®Âõõ", "Âë®‰∫î", "Âë®ÂÖ≠"],
      wide: ["ÊòüÊúüÊó•", "ÊòüÊúü‰∏Ä", "ÊòüÊúü‰∫å", "ÊòüÊúü‰∏â", "ÊòüÊúüÂõõ", "ÊòüÊúü‰∫î", "ÊòüÊúüÂÖ≠"]
    };
    dayPeriodValues56 = {
      narrow: {
        am: "‰∏ä",
        pm: "‰∏ã",
        midnight: "ÂáåÊô®",
        noon: "Âçà",
        morning: "Êó©",
        afternoon: "‰∏ãÂçà",
        evening: "Êôö",
        night: "Â§ú"
      },
      abbreviated: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈó¥"
      },
      wide: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈó¥"
      }
    };
    formattingDayPeriodValues46 = {
      narrow: {
        am: "‰∏ä",
        pm: "‰∏ã",
        midnight: "ÂáåÊô®",
        noon: "Âçà",
        morning: "Êó©",
        afternoon: "‰∏ãÂçà",
        evening: "Êôö",
        night: "Â§ú"
      },
      abbreviated: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈó¥"
      },
      wide: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈó¥"
      }
    };
    ordinalNumber111 = function ordinalNumber112(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      switch (options === null || options === void 0 ? void 0 : options.unit) {
        case "date":
          return number.toString() + "Êó•";
        case "hour":
          return number.toString() + "Êó∂";
        case "minute":
          return number.toString() + "ÂàÜ";
        case "second":
          return number.toString() + "Áßí";
        default:
          return "Á¨¨ " + number.toString();
      }
    };
    localize56 = {
      ordinalNumber: ordinalNumber111,
      era: buildLocalizeFn({
        values: eraValues56,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues56,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback56(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues56,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues56,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues56,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues46,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default57 = localize56;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/_lib/match/index.js
var matchOrdinalNumberPattern56, parseOrdinalNumberPattern56, matchEraPatterns56, parseEraPatterns56, matchQuarterPatterns56, parseQuarterPatterns56, matchMonthPatterns56, parseMonthPatterns56, matchDayPatterns56, parseDayPatterns56, matchDayPeriodPatterns56, parseDayPeriodPatterns56, match56, match_default57;
var init_match57 = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern56 = /^(Á¨¨\s*)?\d+(Êó•|Êó∂|ÂàÜ|Áßí)?/i;
    parseOrdinalNumberPattern56 = /\d+/i;
    matchEraPatterns56 = {
      narrow: /^(Ââç)/i,
      abbreviated: /^(Ââç)/i,
      wide: /^(ÂÖ¨ÂÖÉÂâç|ÂÖ¨ÂÖÉ)/i
    };
    parseEraPatterns56 = {
      any: [/^(Ââç)/i, /^(ÂÖ¨ÂÖÉ)/i]
    };
    matchQuarterPatterns56 = {
      narrow: /^[1234]/i,
      abbreviated: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Âàª/i,
      wide: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]ÂàªÈíü/i
    };
    parseQuarterPatterns56 = {
      any: [/(1|‰∏Ä)/i, /(2|‰∫å)/i, /(3|‰∏â)/i, /(4|Âõõ)/i]
    };
    matchMonthPatterns56 = {
      narrow: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])/i,
      abbreviated: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä]|\d|1[12])Êúà/i,
      wide: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])Êúà/i
    };
    parseMonthPatterns56 = {
      narrow: [/^‰∏Ä/i, /^‰∫å/i, /^‰∏â/i, /^Âõõ/i, /^‰∫î/i, /^ÂÖ≠/i, /^‰∏É/i, /^ÂÖ´/i, /^‰πù/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))/i, /^ÂçÅ‰∏Ä/i, /^ÂçÅ‰∫å/i],
      any: [/^‰∏Ä|1/i, /^‰∫å|2/i, /^‰∏â|3/i, /^Âõõ|4/i, /^‰∫î|5/i, /^ÂÖ≠|6/i, /^‰∏É|7/i, /^ÂÖ´|8/i, /^‰πù|9/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))|10/i, /^ÂçÅ‰∏Ä|11/i, /^ÂçÅ‰∫å|12/i]
    };
    matchDayPatterns56 = {
      narrow: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      short: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      abbreviated: /^Âë®[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      wide: /^ÊòüÊúü[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i
    };
    parseDayPatterns56 = {
      any: [/Êó•/i, /‰∏Ä/i, /‰∫å/i, /‰∏â/i, /Âõõ/i, /‰∫î/i, /ÂÖ≠/i]
    };
    matchDayPeriodPatterns56 = {
      any: /^(‰∏äÂçà?|‰∏ãÂçà?|ÂçàÂ§ú|[‰∏≠Ê≠£]Âçà|Êó©‰∏ä?|‰∏ãÂçà|Êôö‰∏ä?|ÂáåÊô®|)/i
    };
    parseDayPeriodPatterns56 = {
      any: {
        am: /^‰∏äÂçà?/i,
        pm: /^‰∏ãÂçà?/i,
        midnight: /^ÂçàÂ§ú/i,
        noon: /^[‰∏≠Ê≠£]Âçà/i,
        morning: /^Êó©‰∏ä/i,
        afternoon: /^‰∏ãÂçà/i,
        evening: /^Êôö‰∏ä?/i,
        night: /^ÂáåÊô®/i
      }
    };
    match56 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern56,
        parsePattern: parseOrdinalNumberPattern56,
        valueCallback: function valueCallback110(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns56,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns56,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns56,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns56,
        defaultParseWidth: "any",
        valueCallback: function valueCallback111(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns56,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns56,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns56,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns56,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns56,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns56,
        defaultParseWidth: "any"
      })
    };
    match_default57 = match56;
  }
});

// node_modules/date-fns/esm/locale/zh-CN/index.js
var zh_CN_exports = {};
__export(zh_CN_exports, {
  default: () => zh_CN_default
});
var locale60, zh_CN_default;
var init_zh_CN = __esm({
  "node_modules/date-fns/esm/locale/zh-CN/index.js"() {
    init_formatDistance59();
    init_formatLong60();
    init_formatRelative58();
    init_localize57();
    init_match57();
    locale60 = {
      code: "zh-CN",
      formatDistance: formatDistance_default58,
      formatLong: formatLong_default60,
      formatRelative: formatRelative_default57,
      localize: localize_default57,
      match: match_default57,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    zh_CN_default = locale60;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/_lib/formatDistance/index.js
var formatDistanceLocale57, formatDistance116, formatDistance_default59;
var init_formatDistance60 = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/_lib/formatDistance/index.js"() {
    formatDistanceLocale57 = {
      lessThanXSeconds: {
        one: "Â∞ëÊñº 1 Áßí",
        other: "Â∞ëÊñº {{count}} Áßí"
      },
      xSeconds: {
        one: "1 Áßí",
        other: "{{count}} Áßí"
      },
      halfAMinute: "ÂçäÂàÜÈêò",
      lessThanXMinutes: {
        one: "Â∞ëÊñº 1 ÂàÜÈêò",
        other: "Â∞ëÊñº {{count}} ÂàÜÈêò"
      },
      xMinutes: {
        one: "1 ÂàÜÈêò",
        other: "{{count}} ÂàÜÈêò"
      },
      xHours: {
        one: "1 Â∞èÊôÇ",
        other: "{{count}} Â∞èÊôÇ"
      },
      aboutXHours: {
        one: "Â§ßÁ¥Ñ 1 Â∞èÊôÇ",
        other: "Â§ßÁ¥Ñ {{count}} Â∞èÊôÇ"
      },
      xDays: {
        one: "1 Â§©",
        other: "{{count}} Â§©"
      },
      aboutXWeeks: {
        one: "Â§ßÁ¥Ñ 1 ÂÄãÊòüÊúü",
        other: "Â§ßÁ¥Ñ {{count}} ÂÄãÊòüÊúü"
      },
      xWeeks: {
        one: "1 ÂÄãÊòüÊúü",
        other: "{{count}} ÂÄãÊòüÊúü"
      },
      aboutXMonths: {
        one: "Â§ßÁ¥Ñ 1 ÂÄãÊúà",
        other: "Â§ßÁ¥Ñ {{count}} ÂÄãÊúà"
      },
      xMonths: {
        one: "1 ÂÄãÊúà",
        other: "{{count}} ÂÄãÊúà"
      },
      aboutXYears: {
        one: "Â§ßÁ¥Ñ 1 Âπ¥",
        other: "Â§ßÁ¥Ñ {{count}} Âπ¥"
      },
      xYears: {
        one: "1 Âπ¥",
        other: "{{count}} Âπ¥"
      },
      overXYears: {
        one: "Ë∂ÖÈÅé 1 Âπ¥",
        other: "Ë∂ÖÈÅé {{count}} Âπ¥"
      },
      almostXYears: {
        one: "Â∞áËøë 1 Âπ¥",
        other: "Â∞áËøë {{count}} Âπ¥"
      }
    };
    formatDistance116 = function formatDistance117(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale57[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "ÂÖß";
        } else {
          return result + "Ââç";
        }
      }
      return result;
    };
    formatDistance_default59 = formatDistance116;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/_lib/formatLong/index.js
var dateFormats61, timeFormats61, dateTimeFormats61, formatLong61, formatLong_default61;
var init_formatLong61 = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats61 = {
      full: "y'Âπ¥'M'Êúà'd'Êó•' EEEE",
      long: "y'Âπ¥'M'Êúà'd'Êó•'",
      medium: "yyyy-MM-dd",
      short: "yy-MM-dd"
    };
    timeFormats61 = {
      full: "zzzz a h:mm:ss",
      long: "z a h:mm:ss",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    dateTimeFormats61 = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    formatLong61 = {
      date: buildFormatLongFn({
        formats: dateFormats61,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats61,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats61,
        defaultWidth: "full"
      })
    };
    formatLong_default61 = formatLong61;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/_lib/formatRelative/index.js
var formatRelativeLocale57, formatRelative114, formatRelative_default58;
var init_formatRelative59 = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/_lib/formatRelative/index.js"() {
    formatRelativeLocale57 = {
      lastWeek: "'‰∏äÂÄã'eeee p",
      yesterday: "'Êò®Â§©' p",
      today: "'‰ªäÂ§©' p",
      tomorrow: "'ÊòéÂ§©' p",
      nextWeek: "'‰∏ãÂÄã'eeee p",
      other: "P"
    };
    formatRelative114 = function formatRelative115(token, _date, _baseDate, _options) {
      return formatRelativeLocale57[token];
    };
    formatRelative_default58 = formatRelative114;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/_lib/localize/index.js
var eraValues57, quarterValues57, monthValues57, dayValues57, dayPeriodValues57, formattingDayPeriodValues47, ordinalNumber113, localize57, localize_default58;
var init_localize58 = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues57 = {
      narrow: ["Ââç", "ÂÖ¨ÂÖÉ"],
      abbreviated: ["Ââç", "ÂÖ¨ÂÖÉ"],
      wide: ["ÂÖ¨ÂÖÉÂâç", "ÂÖ¨ÂÖÉ"]
    };
    quarterValues57 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Á¨¨‰∏ÄÂàª", "Á¨¨‰∫åÂàª", "Á¨¨‰∏âÂàª", "Á¨¨ÂõõÂàª"],
      wide: ["Á¨¨‰∏ÄÂàªÈêò", "Á¨¨‰∫åÂàªÈêò", "Á¨¨‰∏âÂàªÈêò", "Á¨¨ÂõõÂàªÈêò"]
    };
    monthValues57 = {
      narrow: ["‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠", "‰∏É", "ÂÖ´", "‰πù", "ÂçÅ", "ÂçÅ‰∏Ä", "ÂçÅ‰∫å"],
      abbreviated: ["1Êúà", "2Êúà", "3Êúà", "4Êúà", "5Êúà", "6Êúà", "7Êúà", "8Êúà", "9Êúà", "10Êúà", "11Êúà", "12Êúà"],
      wide: ["‰∏ÄÊúà", "‰∫åÊúà", "‰∏âÊúà", "ÂõõÊúà", "‰∫îÊúà", "ÂÖ≠Êúà", "‰∏ÉÊúà", "ÂÖ´Êúà", "‰πùÊúà", "ÂçÅÊúà", "ÂçÅ‰∏ÄÊúà", "ÂçÅ‰∫åÊúà"]
    };
    dayValues57 = {
      narrow: ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"],
      short: ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"],
      abbreviated: ["ÈÄ±Êó•", "ÈÄ±‰∏Ä", "ÈÄ±‰∫å", "ÈÄ±‰∏â", "ÈÄ±Âõõ", "ÈÄ±‰∫î", "ÈÄ±ÂÖ≠"],
      wide: ["ÊòüÊúüÊó•", "ÊòüÊúü‰∏Ä", "ÊòüÊúü‰∫å", "ÊòüÊúü‰∏â", "ÊòüÊúüÂõõ", "ÊòüÊúü‰∫î", "ÊòüÊúüÂÖ≠"]
    };
    dayPeriodValues57 = {
      narrow: {
        am: "‰∏ä",
        pm: "‰∏ã",
        midnight: "ÂáåÊô®",
        noon: "Âçà",
        morning: "Êó©",
        afternoon: "‰∏ãÂçà",
        evening: "Êôö",
        night: "Â§ú"
      },
      abbreviated: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈñì"
      },
      wide: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈñì"
      }
    };
    formattingDayPeriodValues47 = {
      narrow: {
        am: "‰∏ä",
        pm: "‰∏ã",
        midnight: "ÂáåÊô®",
        noon: "Âçà",
        morning: "Êó©",
        afternoon: "‰∏ãÂçà",
        evening: "Êôö",
        night: "Â§ú"
      },
      abbreviated: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈñì"
      },
      wide: {
        am: "‰∏äÂçà",
        pm: "‰∏ãÂçà",
        midnight: "ÂáåÊô®",
        noon: "‰∏≠Âçà",
        morning: "Êó©Êô®",
        afternoon: "‰∏≠Âçà",
        evening: "Êôö‰∏ä",
        night: "Â§úÈñì"
      }
    };
    ordinalNumber113 = function ordinalNumber114(dirtyNumber, options) {
      var number = Number(dirtyNumber);
      switch (options === null || options === void 0 ? void 0 : options.unit) {
        case "date":
          return number + "Êó•";
        case "hour":
          return number + "ÊôÇ";
        case "minute":
          return number + "ÂàÜ";
        case "second":
          return number + "Áßí";
        default:
          return "Á¨¨ " + number;
      }
    };
    localize57 = {
      ordinalNumber: ordinalNumber113,
      era: buildLocalizeFn({
        values: eraValues57,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues57,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback57(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues57,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues57,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues57,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues47,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default58 = localize57;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/_lib/match/index.js
var matchOrdinalNumberPattern57, parseOrdinalNumberPattern57, matchEraPatterns57, parseEraPatterns57, matchQuarterPatterns57, parseQuarterPatterns57, matchMonthPatterns57, parseMonthPatterns57, matchDayPatterns57, parseDayPatterns57, matchDayPeriodPatterns57, parseDayPeriodPatterns57, match57, match_default58;
var init_match58 = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/_lib/match/index.js"() {
    init_buildMatchFn();
    init_buildMatchPatternFn();
    matchOrdinalNumberPattern57 = /^(Á¨¨\s*)?\d+(Êó•|ÊôÇ|ÂàÜ|Áßí)?/i;
    parseOrdinalNumberPattern57 = /\d+/i;
    matchEraPatterns57 = {
      narrow: /^(Ââç)/i,
      abbreviated: /^(Ââç)/i,
      wide: /^(ÂÖ¨ÂÖÉÂâç|ÂÖ¨ÂÖÉ)/i
    };
    parseEraPatterns57 = {
      any: [/^(Ââç)/i, /^(ÂÖ¨ÂÖÉ)/i]
    };
    matchQuarterPatterns57 = {
      narrow: /^[1234]/i,
      abbreviated: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]Âàª/i,
      wide: /^Á¨¨[‰∏Ä‰∫å‰∏âÂõõ]ÂàªÈêò/i
    };
    parseQuarterPatterns57 = {
      any: [/(1|‰∏Ä)/i, /(2|‰∫å)/i, /(3|‰∏â)/i, /(4|Âõõ)/i]
    };
    matchMonthPatterns57 = {
      narrow: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])/i,
      abbreviated: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä]|\d|1[12])Êúà/i,
      wide: /^(‰∏Ä|‰∫å|‰∏â|Âõõ|‰∫î|ÂÖ≠|‰∏É|ÂÖ´|‰πù|ÂçÅ[‰∫å‰∏Ä])Êúà/i
    };
    parseMonthPatterns57 = {
      narrow: [/^‰∏Ä/i, /^‰∫å/i, /^‰∏â/i, /^Âõõ/i, /^‰∫î/i, /^ÂÖ≠/i, /^‰∏É/i, /^ÂÖ´/i, /^‰πù/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))/i, /^ÂçÅ‰∏Ä/i, /^ÂçÅ‰∫å/i],
      any: [/^‰∏Ä|1/i, /^‰∫å|2/i, /^‰∏â|3/i, /^Âõõ|4/i, /^‰∫î|5/i, /^ÂÖ≠|6/i, /^‰∏É|7/i, /^ÂÖ´|8/i, /^‰πù|9/i, /^ÂçÅ(?!(‰∏Ä|‰∫å))|10/i, /^ÂçÅ‰∏Ä|11/i, /^ÂçÅ‰∫å|12/i]
    };
    matchDayPatterns57 = {
      narrow: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      short: /^[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      abbreviated: /^ÈÄ±[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i,
      wide: /^ÊòüÊúü[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠Êó•]/i
    };
    parseDayPatterns57 = {
      any: [/Êó•/i, /‰∏Ä/i, /‰∫å/i, /‰∏â/i, /Âõõ/i, /‰∫î/i, /ÂÖ≠/i]
    };
    matchDayPeriodPatterns57 = {
      any: /^(‰∏äÂçà?|‰∏ãÂçà?|ÂçàÂ§ú|[‰∏≠Ê≠£]Âçà|Êó©‰∏ä?|‰∏ãÂçà|Êôö‰∏ä?|ÂáåÊô®)/i
    };
    parseDayPeriodPatterns57 = {
      any: {
        am: /^‰∏äÂçà?/i,
        pm: /^‰∏ãÂçà?/i,
        midnight: /^ÂçàÂ§ú/i,
        noon: /^[‰∏≠Ê≠£]Âçà/i,
        morning: /^Êó©‰∏ä/i,
        afternoon: /^‰∏ãÂçà/i,
        evening: /^Êôö‰∏ä?/i,
        night: /^ÂáåÊô®/i
      }
    };
    match57 = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern57,
        parsePattern: parseOrdinalNumberPattern57,
        valueCallback: function valueCallback112(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns57,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns57,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns57,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns57,
        defaultParseWidth: "any",
        valueCallback: function valueCallback113(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns57,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns57,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns57,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns57,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns57,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns57,
        defaultParseWidth: "any"
      })
    };
    match_default58 = match57;
  }
});

// node_modules/date-fns/esm/locale/zh-TW/index.js
var zh_TW_exports = {};
__export(zh_TW_exports, {
  default: () => zh_TW_default
});
var locale61, zh_TW_default;
var init_zh_TW = __esm({
  "node_modules/date-fns/esm/locale/zh-TW/index.js"() {
    init_formatDistance60();
    init_formatLong61();
    init_formatRelative59();
    init_localize58();
    init_match58();
    locale61 = {
      code: "zh-TW",
      formatDistance: formatDistance_default59,
      formatLong: formatLong_default61,
      formatRelative: formatRelative_default58,
      localize: localize_default58,
      match: match_default58,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
    zh_TW_default = locale61;
  }
});

// node_modules/react-date-range/dist/locale/index.js
var require_locale = __commonJS({
  "node_modules/react-date-range/dist/locale/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "af", {
      enumerable: true,
      get: function get() {
        return _af.default;
      }
    });
    Object.defineProperty(exports, "arDZ", {
      enumerable: true,
      get: function get() {
        return _arDZ.default;
      }
    });
    Object.defineProperty(exports, "arSA", {
      enumerable: true,
      get: function get() {
        return _arSA.default;
      }
    });
    Object.defineProperty(exports, "be", {
      enumerable: true,
      get: function get() {
        return _be.default;
      }
    });
    Object.defineProperty(exports, "bg", {
      enumerable: true,
      get: function get() {
        return _bg.default;
      }
    });
    Object.defineProperty(exports, "bn", {
      enumerable: true,
      get: function get() {
        return _bn.default;
      }
    });
    Object.defineProperty(exports, "ca", {
      enumerable: true,
      get: function get() {
        return _ca.default;
      }
    });
    Object.defineProperty(exports, "cs", {
      enumerable: true,
      get: function get() {
        return _cs.default;
      }
    });
    Object.defineProperty(exports, "cy", {
      enumerable: true,
      get: function get() {
        return _cy.default;
      }
    });
    Object.defineProperty(exports, "da", {
      enumerable: true,
      get: function get() {
        return _da.default;
      }
    });
    Object.defineProperty(exports, "de", {
      enumerable: true,
      get: function get() {
        return _de.default;
      }
    });
    Object.defineProperty(exports, "el", {
      enumerable: true,
      get: function get() {
        return _el.default;
      }
    });
    Object.defineProperty(exports, "enAU", {
      enumerable: true,
      get: function get() {
        return _enAU.default;
      }
    });
    Object.defineProperty(exports, "enCA", {
      enumerable: true,
      get: function get() {
        return _enCA.default;
      }
    });
    Object.defineProperty(exports, "enGB", {
      enumerable: true,
      get: function get() {
        return _enGB.default;
      }
    });
    Object.defineProperty(exports, "enUS", {
      enumerable: true,
      get: function get() {
        return _enUS.default;
      }
    });
    Object.defineProperty(exports, "eo", {
      enumerable: true,
      get: function get() {
        return _eo.default;
      }
    });
    Object.defineProperty(exports, "es", {
      enumerable: true,
      get: function get() {
        return _es.default;
      }
    });
    Object.defineProperty(exports, "et", {
      enumerable: true,
      get: function get() {
        return _et.default;
      }
    });
    Object.defineProperty(exports, "faIR", {
      enumerable: true,
      get: function get() {
        return _faIR.default;
      }
    });
    Object.defineProperty(exports, "fi", {
      enumerable: true,
      get: function get() {
        return _fi.default;
      }
    });
    Object.defineProperty(exports, "fr", {
      enumerable: true,
      get: function get() {
        return _fr.default;
      }
    });
    Object.defineProperty(exports, "frCA", {
      enumerable: true,
      get: function get() {
        return _frCA.default;
      }
    });
    Object.defineProperty(exports, "gl", {
      enumerable: true,
      get: function get() {
        return _gl.default;
      }
    });
    Object.defineProperty(exports, "gu", {
      enumerable: true,
      get: function get() {
        return _gu.default;
      }
    });
    Object.defineProperty(exports, "he", {
      enumerable: true,
      get: function get() {
        return _he.default;
      }
    });
    Object.defineProperty(exports, "hi", {
      enumerable: true,
      get: function get() {
        return _hi.default;
      }
    });
    Object.defineProperty(exports, "hr", {
      enumerable: true,
      get: function get() {
        return _hr.default;
      }
    });
    Object.defineProperty(exports, "hu", {
      enumerable: true,
      get: function get() {
        return _hu.default;
      }
    });
    Object.defineProperty(exports, "hy", {
      enumerable: true,
      get: function get() {
        return _hy.default;
      }
    });
    Object.defineProperty(exports, "id", {
      enumerable: true,
      get: function get() {
        return _id.default;
      }
    });
    Object.defineProperty(exports, "is", {
      enumerable: true,
      get: function get() {
        return _is.default;
      }
    });
    Object.defineProperty(exports, "it", {
      enumerable: true,
      get: function get() {
        return _it.default;
      }
    });
    Object.defineProperty(exports, "ja", {
      enumerable: true,
      get: function get() {
        return _ja.default;
      }
    });
    Object.defineProperty(exports, "ka", {
      enumerable: true,
      get: function get() {
        return _ka.default;
      }
    });
    Object.defineProperty(exports, "kk", {
      enumerable: true,
      get: function get() {
        return _kk.default;
      }
    });
    Object.defineProperty(exports, "ko", {
      enumerable: true,
      get: function get() {
        return _ko.default;
      }
    });
    Object.defineProperty(exports, "lt", {
      enumerable: true,
      get: function get() {
        return _lt.default;
      }
    });
    Object.defineProperty(exports, "lv", {
      enumerable: true,
      get: function get() {
        return _lv.default;
      }
    });
    Object.defineProperty(exports, "ms", {
      enumerable: true,
      get: function get() {
        return _ms.default;
      }
    });
    Object.defineProperty(exports, "nb", {
      enumerable: true,
      get: function get() {
        return _nb.default;
      }
    });
    Object.defineProperty(exports, "nl", {
      enumerable: true,
      get: function get() {
        return _nl.default;
      }
    });
    Object.defineProperty(exports, "nn", {
      enumerable: true,
      get: function get() {
        return _nn.default;
      }
    });
    Object.defineProperty(exports, "pl", {
      enumerable: true,
      get: function get() {
        return _pl.default;
      }
    });
    Object.defineProperty(exports, "pt", {
      enumerable: true,
      get: function get() {
        return _pt.default;
      }
    });
    Object.defineProperty(exports, "ptBR", {
      enumerable: true,
      get: function get() {
        return _ptBR.default;
      }
    });
    Object.defineProperty(exports, "ro", {
      enumerable: true,
      get: function get() {
        return _ro.default;
      }
    });
    Object.defineProperty(exports, "ru", {
      enumerable: true,
      get: function get() {
        return _ru.default;
      }
    });
    Object.defineProperty(exports, "sk", {
      enumerable: true,
      get: function get() {
        return _sk.default;
      }
    });
    Object.defineProperty(exports, "sl", {
      enumerable: true,
      get: function get() {
        return _sl.default;
      }
    });
    Object.defineProperty(exports, "sr", {
      enumerable: true,
      get: function get() {
        return _sr.default;
      }
    });
    Object.defineProperty(exports, "srLatn", {
      enumerable: true,
      get: function get() {
        return _srLatn.default;
      }
    });
    Object.defineProperty(exports, "sv", {
      enumerable: true,
      get: function get() {
        return _sv.default;
      }
    });
    Object.defineProperty(exports, "ta", {
      enumerable: true,
      get: function get() {
        return _ta.default;
      }
    });
    Object.defineProperty(exports, "te", {
      enumerable: true,
      get: function get() {
        return _te.default;
      }
    });
    Object.defineProperty(exports, "th", {
      enumerable: true,
      get: function get() {
        return _th.default;
      }
    });
    Object.defineProperty(exports, "tr", {
      enumerable: true,
      get: function get() {
        return _tr.default;
      }
    });
    Object.defineProperty(exports, "ug", {
      enumerable: true,
      get: function get() {
        return _ug.default;
      }
    });
    Object.defineProperty(exports, "uk", {
      enumerable: true,
      get: function get() {
        return _uk.default;
      }
    });
    Object.defineProperty(exports, "vi", {
      enumerable: true,
      get: function get() {
        return _vi.default;
      }
    });
    Object.defineProperty(exports, "zhCN", {
      enumerable: true,
      get: function get() {
        return _zhCN.default;
      }
    });
    Object.defineProperty(exports, "zhTW", {
      enumerable: true,
      get: function get() {
        return _zhTW.default;
      }
    });
    var _af = _interopRequireDefault((init_af(), __toCommonJS(af_exports)));
    var _arDZ = _interopRequireDefault((init_ar_DZ(), __toCommonJS(ar_DZ_exports)));
    var _arSA = _interopRequireDefault((init_ar_SA(), __toCommonJS(ar_SA_exports)));
    var _be = _interopRequireDefault((init_be(), __toCommonJS(be_exports)));
    var _bg = _interopRequireDefault((init_bg(), __toCommonJS(bg_exports)));
    var _bn = _interopRequireDefault((init_bn(), __toCommonJS(bn_exports)));
    var _ca = _interopRequireDefault((init_ca(), __toCommonJS(ca_exports)));
    var _cs = _interopRequireDefault((init_cs(), __toCommonJS(cs_exports)));
    var _cy = _interopRequireDefault((init_cy(), __toCommonJS(cy_exports)));
    var _da = _interopRequireDefault((init_da(), __toCommonJS(da_exports)));
    var _de = _interopRequireDefault((init_de(), __toCommonJS(de_exports)));
    var _el = _interopRequireDefault((init_el(), __toCommonJS(el_exports)));
    var _enAU = _interopRequireDefault((init_en_AU(), __toCommonJS(en_AU_exports)));
    var _enCA = _interopRequireDefault((init_en_CA(), __toCommonJS(en_CA_exports)));
    var _enGB = _interopRequireDefault((init_en_GB(), __toCommonJS(en_GB_exports)));
    var _enUS = _interopRequireDefault((init_en_US(), __toCommonJS(en_US_exports)));
    var _eo = _interopRequireDefault((init_eo(), __toCommonJS(eo_exports)));
    var _es = _interopRequireDefault((init_es(), __toCommonJS(es_exports)));
    var _et = _interopRequireDefault((init_et(), __toCommonJS(et_exports)));
    var _faIR = _interopRequireDefault((init_fa_IR(), __toCommonJS(fa_IR_exports)));
    var _fi = _interopRequireDefault((init_fi(), __toCommonJS(fi_exports)));
    var _fr = _interopRequireDefault((init_fr(), __toCommonJS(fr_exports)));
    var _frCA = _interopRequireDefault((init_fr_CA(), __toCommonJS(fr_CA_exports)));
    var _gl = _interopRequireDefault((init_gl(), __toCommonJS(gl_exports)));
    var _gu = _interopRequireDefault((init_gu(), __toCommonJS(gu_exports)));
    var _he = _interopRequireDefault((init_he(), __toCommonJS(he_exports)));
    var _hi = _interopRequireDefault((init_hi(), __toCommonJS(hi_exports)));
    var _hr = _interopRequireDefault((init_hr(), __toCommonJS(hr_exports)));
    var _hu = _interopRequireDefault((init_hu(), __toCommonJS(hu_exports)));
    var _hy = _interopRequireDefault((init_hy(), __toCommonJS(hy_exports)));
    var _id = _interopRequireDefault((init_id(), __toCommonJS(id_exports)));
    var _is = _interopRequireDefault((init_is(), __toCommonJS(is_exports)));
    var _it = _interopRequireDefault((init_it(), __toCommonJS(it_exports)));
    var _ja = _interopRequireDefault((init_ja(), __toCommonJS(ja_exports)));
    var _ka = _interopRequireDefault((init_ka(), __toCommonJS(ka_exports)));
    var _kk = _interopRequireDefault((init_kk(), __toCommonJS(kk_exports)));
    var _ko = _interopRequireDefault((init_ko(), __toCommonJS(ko_exports)));
    var _lt = _interopRequireDefault((init_lt(), __toCommonJS(lt_exports)));
    var _lv = _interopRequireDefault((init_lv(), __toCommonJS(lv_exports)));
    var _ms = _interopRequireDefault((init_ms(), __toCommonJS(ms_exports)));
    var _nb = _interopRequireDefault((init_nb(), __toCommonJS(nb_exports)));
    var _nl = _interopRequireDefault((init_nl(), __toCommonJS(nl_exports)));
    var _nn = _interopRequireDefault((init_nn(), __toCommonJS(nn_exports)));
    var _pl = _interopRequireDefault((init_pl(), __toCommonJS(pl_exports)));
    var _pt = _interopRequireDefault((init_pt(), __toCommonJS(pt_exports)));
    var _ptBR = _interopRequireDefault((init_pt_BR(), __toCommonJS(pt_BR_exports)));
    var _ro = _interopRequireDefault((init_ro(), __toCommonJS(ro_exports)));
    var _ru = _interopRequireDefault((init_ru(), __toCommonJS(ru_exports)));
    var _sk = _interopRequireDefault((init_sk(), __toCommonJS(sk_exports)));
    var _sl = _interopRequireDefault((init_sl(), __toCommonJS(sl_exports)));
    var _sr = _interopRequireDefault((init_sr(), __toCommonJS(sr_exports)));
    var _srLatn = _interopRequireDefault((init_sr_Latn(), __toCommonJS(sr_Latn_exports)));
    var _sv = _interopRequireDefault((init_sv(), __toCommonJS(sv_exports)));
    var _ta = _interopRequireDefault((init_ta(), __toCommonJS(ta_exports)));
    var _te = _interopRequireDefault((init_te(), __toCommonJS(te_exports)));
    var _th = _interopRequireDefault((init_th(), __toCommonJS(th_exports)));
    var _tr = _interopRequireDefault((init_tr(), __toCommonJS(tr_exports)));
    var _ug = _interopRequireDefault((init_ug(), __toCommonJS(ug_exports)));
    var _uk = _interopRequireDefault((init_uk(), __toCommonJS(uk_exports)));
    var _vi = _interopRequireDefault((init_vi(), __toCommonJS(vi_exports)));
    var _zhCN = _interopRequireDefault((init_zh_CN(), __toCommonJS(zh_CN_exports)));
    var _zhTW = _interopRequireDefault((init_zh_TW(), __toCommonJS(zh_TW_exports)));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});
export default require_locale();
//# sourceMappingURL=react-date-range_dist_locale.js.map
